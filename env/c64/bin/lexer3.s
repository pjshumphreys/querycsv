;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.import		_stdin
	.import		_stdout
	.import		_stderr
	.import		_clearerr
	.import		_ferror
	.import		_fgetc
	.import		_fprintf
	.import		_fread
	.import		_strlen
	.import		_memset
	.import		_strdup
	.import		__maperrno
	.import		__errno
	.import		_malloc
	.import		_realloc
	.import		_free
	.import		_exit
	.export		_yyrestart
	.export		_yy_switch_to_buffer
	.export		_yy_create_buffer
	.export		_yy_delete_buffer
	.export		_yy_flush_buffer
	.export		_yypush_buffer_state
	.export		_yypop_buffer_state
	.export		_yy_scan_buffer
	.export		_yy_scan_string
	.export		_yy_scan_bytes
	.export		_yyalloc
	.export		_yyrealloc
	.export		_yyfree
	.import		_strReplace
	.import		_d_sprintf
	.import		_yyerror2
	.export		_yylex_init
	.export		_yylex_init_extra
	.export		_yylex_destroy
	.export		_yyget_debug
	.export		_yyset_debug
	.export		_yyget_extra
	.export		_yyset_extra
	.export		_yyget_in
	.export		_yyset_in
	.export		_yyget_out
	.export		_yyset_out
	.export		_yyget_leng
	.export		_yyget_text
	.export		_yyget_lineno
	.export		_yyset_lineno
	.export		_yyget_column
	.export		_yyset_column
	.export		_yyget_lval
	.export		_yyset_lval
	.export		_yylex

.segment	"RODATA"

_yy_accept:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0075
	.word	$0073
	.word	$0071
	.word	$0071
	.word	$0073
	.word	$0073
	.word	$0073
	.word	$0063
	.word	$0063
	.word	$0063
	.word	$0069
	.word	$005F
	.word	$005C
	.word	$0060
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0073
	.word	$0071
	.word	$005E
	.word	$0000
	.word	$0066
	.word	$0000
	.word	$0000
	.word	$0070
	.word	$006F
	.word	$0072
	.word	$006B
	.word	$0000
	.word	$006A
	.word	$0069
	.word	$0000
	.word	$0061
	.word	$005D
	.word	$0062
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$000A
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$000E
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$002D
	.word	$0032
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$003B
	.word	$003C
	.word	$0064
	.word	$003F
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0051
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0000
	.word	$0068
	.word	$0000
	.word	$0065
	.word	$0072
	.word	$0000
	.word	$006E
	.word	$006A
	.word	$0000
	.word	$0000
	.word	$006C
	.word	$0001
	.word	$0002
	.word	$0009
	.word	$000B
	.word	$0064
	.word	$0003
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0025
	.word	$0064
	.word	$0064
	.word	$0000
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0030
	.word	$0064
	.word	$0034
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0005
	.word	$0004
	.word	$0038
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$004C
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0006
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0067
	.word	$0000
	.word	$006D
	.word	$0064
	.word	$0064
	.word	$000F
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$001E
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0028
	.word	$0000
	.word	$0029
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0031
	.word	$0033
	.word	$0064
	.word	$0036
	.word	$0037
	.word	$0039
	.word	$0064
	.word	$003D
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0047
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$004E
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0055
	.word	$0064
	.word	$0057
	.word	$0064
	.word	$0064
	.word	$005A
	.word	$005B
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0010
	.word	$0011
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0007
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0023
	.word	$0024
	.word	$0064
	.word	$0027
	.word	$0029
	.word	$002A
	.word	$002B
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0040
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0050
	.word	$0052
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0059
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0014
	.word	$0016
	.word	$0064
	.word	$0017
	.word	$0064
	.word	$0019
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$001D
	.word	$0064
	.word	$0020
	.word	$0021
	.word	$0022
	.word	$0064
	.word	$0064
	.word	$002C
	.word	$0064
	.word	$002F
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$003E
	.word	$0041
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0046
	.word	$0064
	.word	$0064
	.word	$004A
	.word	$004B
	.word	$0064
	.word	$0064
	.word	$0053
	.word	$0054
	.word	$0056
	.word	$0064
	.word	$0064
	.word	$000D
	.word	$0064
	.word	$0012
	.word	$0013
	.word	$0064
	.word	$0018
	.word	$001A
	.word	$001B
	.word	$001C
	.word	$0064
	.word	$0026
	.word	$0064
	.word	$0064
	.word	$0030
	.word	$0064
	.word	$003A
	.word	$0064
	.word	$0043
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$004F
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0015
	.word	$001F
	.word	$0064
	.word	$0064
	.word	$0035
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0049
	.word	$004D
	.word	$0058
	.word	$0064
	.word	$000F
	.word	$0064
	.word	$002E
	.word	$0042
	.word	$0064
	.word	$0045
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0044
	.word	$0048
	.word	$0064
	.word	$0064
	.word	$0064
	.word	$0008
	.word	$000C
	.word	$0000
_yy_ec:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$08
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$01
	.byte	$08
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$01
	.byte	$2B
	.byte	$01
	.byte	$2C
	.byte	$01
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_yy_meta:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_yy_base:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0351
	.word	$0370
	.word	$0045
	.word	$0048
	.word	$0340
	.word	$004A
	.word	$004B
	.word	$0370
	.word	$0343
	.word	$0043
	.word	$0048
	.word	$0047
	.word	$0370
	.word	$033E
	.word	$003D
	.word	$003D
	.word	$0042
	.word	$0053
	.word	$0042
	.word	$0071
	.word	$003D
	.word	$005A
	.word	$006E
	.word	$004E
	.word	$0059
	.word	$007D
	.word	$0083
	.word	$0076
	.word	$0082
	.word	$0095
	.word	$0000
	.word	$0082
	.word	$00C5
	.word	$0088
	.word	$00A8
	.word	$00B1
	.word	$00B6
	.word	$0099
	.word	$00CD
	.word	$0370
	.word	$006C
	.word	$006D
	.word	$0344
	.word	$0096
	.word	$00A4
	.word	$0342
	.word	$0000
	.word	$00C6
	.word	$00D3
	.word	$00CC
	.word	$00E1
	.word	$00E6
	.word	$0370
	.word	$0370
	.word	$0370
	.word	$0000
	.word	$0083
	.word	$00DB
	.word	$00B9
	.word	$00B8
	.word	$00DD
	.word	$00D6
	.word	$0000
	.word	$00EB
	.word	$00DC
	.word	$00ED
	.word	$00E8
	.word	$00E0
	.word	$00F2
	.word	$00E3
	.word	$00E8
	.word	$00FC
	.word	$00F7
	.word	$00F0
	.word	$00F7
	.word	$00F9
	.word	$00FD
	.word	$011D
	.word	$0118
	.word	$0108
	.word	$011C
	.word	$0000
	.word	$011B
	.word	$010C
	.word	$0118
	.word	$0124
	.word	$0121
	.word	$0115
	.word	$0120
	.word	$011E
	.word	$0127
	.word	$0000
	.word	$0000
	.word	$0132
	.word	$0131
	.word	$0126
	.word	$014E
	.word	$0137
	.word	$0158
	.word	$0132
	.word	$0137
	.word	$014C
	.word	$0144
	.word	$013B
	.word	$014E
	.word	$0152
	.word	$015F
	.word	$0000
	.word	$015B
	.word	$0162
	.word	$0162
	.word	$015C
	.word	$0164
	.word	$0165
	.word	$0157
	.word	$015A
	.word	$00A1
	.word	$0120
	.word	$031D
	.word	$0341
	.word	$0000
	.word	$01EA
	.word	$0143
	.word	$0174
	.word	$0185
	.word	$013D
	.word	$00C9
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0165
	.word	$0000
	.word	$0157
	.word	$015D
	.word	$016F
	.word	$0160
	.word	$016C
	.word	$0180
	.word	$018B
	.word	$0183
	.word	$0191
	.word	$0181
	.word	$018E
	.word	$0197
	.word	$0194
	.word	$0198
	.word	$0188
	.word	$019B
	.word	$019D
	.word	$018D
	.word	$019E
	.word	$01A1
	.word	$019E
	.word	$0196
	.word	$0198
	.word	$01B3
	.word	$0198
	.word	$019A
	.word	$0194
	.word	$01A3
	.word	$01A4
	.word	$01AD
	.word	$01BE
	.word	$01A5
	.word	$0000
	.word	$01C1
	.word	$01B7
	.word	$01C7
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$01C2
	.word	$01CC
	.word	$01C4
	.word	$01CA
	.word	$01CF
	.word	$01D4
	.word	$01D3
	.word	$01CB
	.word	$01D4
	.word	$01CD
	.word	$01CE
	.word	$01D6
	.word	$01D0
	.word	$01D8
	.word	$01D9
	.word	$0000
	.word	$01D3
	.word	$01DD
	.word	$01E0
	.word	$0000
	.word	$01DA
	.word	$01F3
	.word	$01EB
	.word	$01DB
	.word	$01E8
	.word	$01EA
	.word	$01F9
	.word	$01FD
	.word	$01FB
	.word	$009D
	.word	$00BA
	.word	$00B3
	.word	$01F9
	.word	$0207
	.word	$020C
	.word	$0203
	.word	$020A
	.word	$020F
	.word	$0210
	.word	$0211
	.word	$020A
	.word	$0200
	.word	$0201
	.word	$0211
	.word	$0208
	.word	$020B
	.word	$021A
	.word	$0207
	.word	$0209
	.word	$0000
	.word	$0217
	.word	$021A
	.word	$0217
	.word	$0223
	.word	$0233
	.word	$0228
	.word	$0235
	.word	$023B
	.word	$0000
	.word	$0231
	.word	$0000
	.word	$022D
	.word	$0232
	.word	$0237
	.word	$0243
	.word	$0235
	.word	$0241
	.word	$0000
	.word	$0000
	.word	$0234
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0238
	.word	$0000
	.word	$023C
	.word	$023A
	.word	$0240
	.word	$0245
	.word	$024E
	.word	$0247
	.word	$024C
	.word	$0249
	.word	$0000
	.word	$0241
	.word	$0253
	.word	$0249
	.word	$0254
	.word	$024E
	.word	$0000
	.word	$0251
	.word	$025C
	.word	$0263
	.word	$0260
	.word	$0262
	.word	$0000
	.word	$0273
	.word	$0000
	.word	$0274
	.word	$0275
	.word	$0000
	.word	$0000
	.word	$0269
	.word	$0277
	.word	$027C
	.word	$0000
	.word	$0000
	.word	$026C
	.word	$0273
	.word	$026E
	.word	$026F
	.word	$0276
	.word	$0000
	.word	$0280
	.word	$0278
	.word	$0275
	.word	$0287
	.word	$0277
	.word	$027E
	.word	$0286
	.word	$027E
	.word	$0288
	.word	$028A
	.word	$027D
	.word	$0000
	.word	$0000
	.word	$028A
	.word	$0000
	.word	$0370
	.word	$0000
	.word	$008E
	.word	$028D
	.word	$0299
	.word	$0287
	.word	$02A6
	.word	$02AE
	.word	$02A7
	.word	$02A4
	.word	$0000
	.word	$02A0
	.word	$02A1
	.word	$02A3
	.word	$02AA
	.word	$02B5
	.word	$02B7
	.word	$02B6
	.word	$02BB
	.word	$02BC
	.word	$02AA
	.word	$02B6
	.word	$02BC
	.word	$0000
	.word	$0000
	.word	$02BC
	.word	$02BD
	.word	$02B0
	.word	$02AE
	.word	$0000
	.word	$02BC
	.word	$02B8
	.word	$02B3
	.word	$02C4
	.word	$02C6
	.word	$0000
	.word	$0000
	.word	$02B6
	.word	$0000
	.word	$02BA
	.word	$0000
	.word	$02C8
	.word	$02D0
	.word	$02D1
	.word	$0000
	.word	$02E6
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$02DC
	.word	$02E9
	.word	$0000
	.word	$02D9
	.word	$0000
	.word	$02DC
	.word	$02E8
	.word	$02ED
	.word	$0000
	.word	$0000
	.word	$02EA
	.word	$02DB
	.word	$02F0
	.word	$02E1
	.word	$0000
	.word	$02E9
	.word	$02F5
	.word	$0000
	.word	$0000
	.word	$02EB
	.word	$02F5
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$02F6
	.word	$02E2
	.word	$0000
	.word	$02F8
	.word	$0000
	.word	$0000
	.word	$02F9
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$02EB
	.word	$0000
	.word	$02F1
	.word	$02F2
	.word	$0000
	.word	$02FE
	.word	$0000
	.word	$02F5
	.word	$0000
	.word	$02FE
	.word	$02F6
	.word	$030B
	.word	$0304
	.word	$030B
	.word	$0000
	.word	$0311
	.word	$0323
	.word	$0314
	.word	$0000
	.word	$0000
	.word	$0319
	.word	$0316
	.word	$0000
	.word	$031B
	.word	$0325
	.word	$0328
	.word	$0329
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$031B
	.word	$0000
	.word	$032D
	.word	$0000
	.word	$0000
	.word	$031E
	.word	$0000
	.word	$031F
	.word	$032A
	.word	$0333
	.word	$0000
	.word	$0000
	.word	$0326
	.word	$0322
	.word	$0329
	.word	$0000
	.word	$0000
	.word	$0370
	.word	$0363
	.word	$0366
	.word	$0065
	.word	$0369
	.word	$036C
_yy_def:
	.word	$0000
	.word	$01B2
	.word	$0001
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B3
	.word	$01B4
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B6
	.word	$01B2
	.word	$01B2
	.word	$01B3
	.word	$01B3
	.word	$01B2
	.word	$01B4
	.word	$01B4
	.word	$01B2
	.word	$01B7
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B6
	.word	$01B6
	.word	$01B2
	.word	$01B2
	.word	$01B7
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B2
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$01B5
	.word	$0000
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
_yy_nxt:
	.word	$0000
	.word	$0004
	.word	$0005
	.word	$0006
	.word	$0005
	.word	$0007
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000A
	.word	$000B
	.word	$000C
	.word	$000D
	.word	$000E
	.word	$000F
	.word	$0010
	.word	$0011
	.word	$0012
	.word	$0013
	.word	$0014
	.word	$0015
	.word	$0016
	.word	$0017
	.word	$0018
	.word	$0019
	.word	$001A
	.word	$001B
	.word	$001C
	.word	$001D
	.word	$001E
	.word	$001F
	.word	$0020
	.word	$0021
	.word	$0022
	.word	$0023
	.word	$0024
	.word	$0025
	.word	$0026
	.word	$0027
	.word	$0021
	.word	$0021
	.word	$0021
	.word	$0028
	.word	$0004
	.word	$0004
	.word	$0011
	.word	$0012
	.word	$0013
	.word	$0014
	.word	$0015
	.word	$0016
	.word	$0017
	.word	$0018
	.word	$0019
	.word	$001A
	.word	$001B
	.word	$001C
	.word	$001D
	.word	$001E
	.word	$001F
	.word	$0020
	.word	$0021
	.word	$0022
	.word	$0023
	.word	$0024
	.word	$0025
	.word	$0026
	.word	$0027
	.word	$0021
	.word	$0021
	.word	$0021
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$002C
	.word	$002F
	.word	$0032
	.word	$002D
	.word	$0040
	.word	$0030
	.word	$0034
	.word	$0035
	.word	$0037
	.word	$0038
	.word	$0033
	.word	$003B
	.word	$0042
	.word	$003C
	.word	$0050
	.word	$0036
	.word	$0043
	.word	$0051
	.word	$003D
	.word	$0044
	.word	$003E
	.word	$003F
	.word	$0045
	.word	$004A
	.word	$0041
	.word	$0046
	.word	$0047
	.word	$003A
	.word	$004B
	.word	$0052
	.word	$0048
	.word	$0055
	.word	$0056
	.word	$0040
	.word	$002C
	.word	$002C
	.word	$0049
	.word	$007A
	.word	$007A
	.word	$0033
	.word	$003B
	.word	$0042
	.word	$003C
	.word	$0050
	.word	$0036
	.word	$0043
	.word	$0051
	.word	$003D
	.word	$0044
	.word	$003E
	.word	$003F
	.word	$0045
	.word	$004A
	.word	$0041
	.word	$0046
	.word	$0047
	.word	$004C
	.word	$004B
	.word	$0052
	.word	$0048
	.word	$0055
	.word	$0056
	.word	$0053
	.word	$004D
	.word	$0057
	.word	$0049
	.word	$004E
	.word	$0054
	.word	$0058
	.word	$004F
	.word	$005A
	.word	$005C
	.word	$0059
	.word	$0065
	.word	$005E
	.word	$006D
	.word	$002F
	.word	$005D
	.word	$005B
	.word	$0078
	.word	$0030
	.word	$0082
	.word	$005F
	.word	$0066
	.word	$0060
	.word	$004C
	.word	$0061
	.word	$0078
	.word	$0062
	.word	$006E
	.word	$002F
	.word	$0053
	.word	$004D
	.word	$0057
	.word	$0030
	.word	$004E
	.word	$0054
	.word	$0058
	.word	$004F
	.word	$005A
	.word	$005C
	.word	$0059
	.word	$0065
	.word	$005E
	.word	$006D
	.word	$0063
	.word	$005D
	.word	$005B
	.word	$0064
	.word	$0161
	.word	$0082
	.word	$005F
	.word	$0066
	.word	$0060
	.word	$00CE
	.word	$0061
	.word	$0072
	.word	$0062
	.word	$006E
	.word	$0079
	.word	$006F
	.word	$00CE
	.word	$0070
	.word	$0077
	.word	$0073
	.word	$0071
	.word	$0085
	.word	$00CC
	.word	$0074
	.word	$0075
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$0032
	.word	$0063
	.word	$0076
	.word	$0081
	.word	$0064
	.word	$0067
	.word	$007E
	.word	$0068
	.word	$0033
	.word	$0086
	.word	$007C
	.word	$007C
	.word	$0072
	.word	$007D
	.word	$007F
	.word	$0069
	.word	$006F
	.word	$006A
	.word	$0070
	.word	$006B
	.word	$0073
	.word	$0071
	.word	$0085
	.word	$006C
	.word	$0074
	.word	$0075
	.word	$0034
	.word	$0035
	.word	$0083
	.word	$0080
	.word	$0080
	.word	$0076
	.word	$0081
	.word	$0087
	.word	$0067
	.word	$0036
	.word	$0068
	.word	$0033
	.word	$0086
	.word	$0088
	.word	$008B
	.word	$0089
	.word	$0090
	.word	$007F
	.word	$0069
	.word	$008A
	.word	$006A
	.word	$0091
	.word	$006B
	.word	$0084
	.word	$0092
	.word	$0096
	.word	$006C
	.word	$0093
	.word	$008C
	.word	$008D
	.word	$008E
	.word	$0083
	.word	$0097
	.word	$0094
	.word	$0098
	.word	$0099
	.word	$0087
	.word	$008F
	.word	$0036
	.word	$009A
	.word	$0095
	.word	$009B
	.word	$0088
	.word	$008B
	.word	$0089
	.word	$0090
	.word	$009C
	.word	$009E
	.word	$008A
	.word	$009D
	.word	$0091
	.word	$009F
	.word	$0084
	.word	$0092
	.word	$0096
	.word	$0078
	.word	$0093
	.word	$008C
	.word	$008D
	.word	$008E
	.word	$00A1
	.word	$0097
	.word	$0094
	.word	$0098
	.word	$0099
	.word	$00A3
	.word	$008F
	.word	$00A4
	.word	$009A
	.word	$0095
	.word	$009B
	.word	$00A7
	.word	$00A8
	.word	$00A9
	.word	$00A2
	.word	$009C
	.word	$009E
	.word	$00AA
	.word	$009D
	.word	$00AB
	.word	$00AC
	.word	$00AD
	.word	$00A5
	.word	$00A6
	.word	$00A0
	.word	$00AE
	.word	$00AF
	.word	$00B0
	.word	$00B3
	.word	$00A1
	.word	$00B1
	.word	$00B4
	.word	$00B8
	.word	$0081
	.word	$00A3
	.word	$00CC
	.word	$00A4
	.word	$00BB
	.word	$00BC
	.word	$007D
	.word	$00A7
	.word	$00A8
	.word	$00A9
	.word	$00A2
	.word	$00BF
	.word	$00B2
	.word	$00AA
	.word	$00C0
	.word	$00AB
	.word	$00AC
	.word	$00AD
	.word	$00A5
	.word	$00A6
	.word	$00A0
	.word	$00AE
	.word	$00AF
	.word	$00B0
	.word	$00B3
	.word	$00B5
	.word	$00B1
	.word	$00B4
	.word	$00B8
	.word	$00B6
	.word	$00BD
	.word	$00B9
	.word	$00C1
	.word	$00BB
	.word	$00BC
	.word	$00B7
	.word	$00BA
	.word	$00C2
	.word	$00BE
	.word	$00C3
	.word	$00BF
	.word	$00B2
	.word	$00C4
	.word	$00C0
	.word	$00C5
	.word	$00C6
	.word	$00C7
	.word	$00C8
	.word	$00C9
	.word	$00CA
	.word	$00CB
	.word	$00CF
	.word	$00D0
	.word	$00D1
	.word	$00B5
	.word	$007E
	.word	$00D2
	.word	$00D3
	.word	$00B6
	.word	$00BD
	.word	$00B9
	.word	$00C1
	.word	$00D4
	.word	$007F
	.word	$00B7
	.word	$00BA
	.word	$00C2
	.word	$00BE
	.word	$00C3
	.word	$00CD
	.word	$00CD
	.word	$00C4
	.word	$00CE
	.word	$00C5
	.word	$00C6
	.word	$00C7
	.word	$00C8
	.word	$00C9
	.word	$00CA
	.word	$00CB
	.word	$00CF
	.word	$00D0
	.word	$00D1
	.word	$00D5
	.word	$00D6
	.word	$00D2
	.word	$00D3
	.word	$00D8
	.word	$00D9
	.word	$00DA
	.word	$00DB
	.word	$00D4
	.word	$007F
	.word	$00DC
	.word	$00DE
	.word	$00DF
	.word	$00DD
	.word	$00E0
	.word	$00E1
	.word	$00E2
	.word	$00E3
	.word	$00D7
	.word	$00E4
	.word	$00E5
	.word	$00E6
	.word	$00E7
	.word	$00E8
	.word	$00E9
	.word	$009F
	.word	$00EB
	.word	$00EC
	.word	$00ED
	.word	$00D5
	.word	$00D6
	.word	$00EE
	.word	$00EF
	.word	$00D8
	.word	$00D9
	.word	$00DA
	.word	$00DB
	.word	$00F0
	.word	$00F3
	.word	$00DC
	.word	$00DE
	.word	$00DF
	.word	$00DD
	.word	$00E0
	.word	$00E1
	.word	$00E2
	.word	$00E3
	.word	$00D7
	.word	$00E4
	.word	$00E5
	.word	$00E6
	.word	$00E7
	.word	$00E8
	.word	$00E9
	.word	$00F1
	.word	$00EB
	.word	$00EC
	.word	$00ED
	.word	$00EA
	.word	$00F4
	.word	$00EE
	.word	$00EF
	.word	$00F5
	.word	$00F6
	.word	$00F2
	.word	$00F7
	.word	$00F0
	.word	$00F3
	.word	$00F8
	.word	$00F9
	.word	$00FA
	.word	$00FB
	.word	$00FC
	.word	$00FD
	.word	$0100
	.word	$00FE
	.word	$0101
	.word	$0102
	.word	$0103
	.word	$0104
	.word	$0105
	.word	$0106
	.word	$0107
	.word	$00F1
	.word	$00FF
	.word	$0108
	.word	$0109
	.word	$00EA
	.word	$00F4
	.word	$010A
	.word	$007D
	.word	$00F5
	.word	$00F6
	.word	$00F2
	.word	$00F7
	.word	$010D
	.word	$010E
	.word	$00F8
	.word	$00F9
	.word	$00FA
	.word	$00FB
	.word	$00FC
	.word	$00FD
	.word	$0100
	.word	$00FE
	.word	$0101
	.word	$0102
	.word	$0103
	.word	$0104
	.word	$0105
	.word	$0106
	.word	$0107
	.word	$010F
	.word	$00FF
	.word	$0108
	.word	$0109
	.word	$0110
	.word	$010B
	.word	$010A
	.word	$010C
	.word	$0113
	.word	$0114
	.word	$0111
	.word	$0115
	.word	$010D
	.word	$010E
	.word	$0112
	.word	$0116
	.word	$0117
	.word	$0118
	.word	$0119
	.word	$011A
	.word	$011B
	.word	$011D
	.word	$011E
	.word	$011F
	.word	$0120
	.word	$0121
	.word	$0122
	.word	$0123
	.word	$011C
	.word	$010F
	.word	$0124
	.word	$0125
	.word	$0126
	.word	$0110
	.word	$010B
	.word	$0127
	.word	$010C
	.word	$0113
	.word	$0114
	.word	$0111
	.word	$0115
	.word	$0128
	.word	$0129
	.word	$0112
	.word	$0116
	.word	$0117
	.word	$0118
	.word	$0119
	.word	$011A
	.word	$011B
	.word	$011D
	.word	$011E
	.word	$011F
	.word	$0120
	.word	$0121
	.word	$0122
	.word	$0123
	.word	$011C
	.word	$012A
	.word	$0124
	.word	$0125
	.word	$0126
	.word	$012B
	.word	$012C
	.word	$0127
	.word	$012D
	.word	$012E
	.word	$012F
	.word	$0130
	.word	$0131
	.word	$0128
	.word	$0129
	.word	$0132
	.word	$0133
	.word	$0134
	.word	$0135
	.word	$0136
	.word	$0137
	.word	$0138
	.word	$0139
	.word	$013A
	.word	$013B
	.word	$013C
	.word	$013D
	.word	$013E
	.word	$013F
	.word	$0140
	.word	$012A
	.word	$0141
	.word	$0142
	.word	$0143
	.word	$012B
	.word	$012C
	.word	$0144
	.word	$012D
	.word	$012E
	.word	$012F
	.word	$0130
	.word	$0131
	.word	$0145
	.word	$0146
	.word	$0132
	.word	$0133
	.word	$0134
	.word	$0135
	.word	$0136
	.word	$0137
	.word	$0138
	.word	$0139
	.word	$013A
	.word	$013B
	.word	$013C
	.word	$013D
	.word	$013E
	.word	$013F
	.word	$0140
	.word	$0147
	.word	$0141
	.word	$0142
	.word	$0143
	.word	$0148
	.word	$0149
	.word	$0144
	.word	$014A
	.word	$014B
	.word	$014C
	.word	$014D
	.word	$014E
	.word	$0145
	.word	$0146
	.word	$014F
	.word	$0150
	.word	$0151
	.word	$0152
	.word	$0153
	.word	$0154
	.word	$0155
	.word	$0156
	.word	$0157
	.word	$0158
	.word	$0159
	.word	$015A
	.word	$015B
	.word	$015C
	.word	$015D
	.word	$0147
	.word	$015E
	.word	$015F
	.word	$0160
	.word	$0148
	.word	$0149
	.word	$0162
	.word	$014A
	.word	$014B
	.word	$014C
	.word	$014D
	.word	$014E
	.word	$0163
	.word	$0164
	.word	$014F
	.word	$0150
	.word	$0151
	.word	$0152
	.word	$0153
	.word	$0154
	.word	$0155
	.word	$0156
	.word	$0157
	.word	$0158
	.word	$0159
	.word	$015A
	.word	$015B
	.word	$015C
	.word	$015D
	.word	$0165
	.word	$015E
	.word	$015F
	.word	$0160
	.word	$0166
	.word	$0167
	.word	$0162
	.word	$0168
	.word	$0169
	.word	$016A
	.word	$016B
	.word	$016C
	.word	$0163
	.word	$0164
	.word	$016D
	.word	$016E
	.word	$016F
	.word	$0170
	.word	$0171
	.word	$0172
	.word	$0173
	.word	$0174
	.word	$0175
	.word	$0176
	.word	$0177
	.word	$0178
	.word	$0179
	.word	$017A
	.word	$017B
	.word	$0165
	.word	$017C
	.word	$017D
	.word	$017E
	.word	$0166
	.word	$0167
	.word	$017F
	.word	$0168
	.word	$0169
	.word	$016A
	.word	$016B
	.word	$016C
	.word	$0180
	.word	$0181
	.word	$016D
	.word	$016E
	.word	$016F
	.word	$0170
	.word	$0171
	.word	$0172
	.word	$0173
	.word	$0174
	.word	$0175
	.word	$0176
	.word	$0177
	.word	$0178
	.word	$0179
	.word	$017A
	.word	$017B
	.word	$0182
	.word	$017C
	.word	$017D
	.word	$017E
	.word	$0183
	.word	$0184
	.word	$017F
	.word	$0185
	.word	$0186
	.word	$0187
	.word	$0188
	.word	$0189
	.word	$0180
	.word	$0181
	.word	$018A
	.word	$018B
	.word	$018C
	.word	$018D
	.word	$018E
	.word	$018F
	.word	$0190
	.word	$0191
	.word	$0192
	.word	$0193
	.word	$0194
	.word	$0195
	.word	$0196
	.word	$0197
	.word	$0198
	.word	$0182
	.word	$0199
	.word	$019A
	.word	$019B
	.word	$0183
	.word	$0184
	.word	$019C
	.word	$0185
	.word	$0186
	.word	$0187
	.word	$0188
	.word	$0189
	.word	$019D
	.word	$019E
	.word	$018A
	.word	$018B
	.word	$018C
	.word	$018D
	.word	$018E
	.word	$018F
	.word	$0190
	.word	$0191
	.word	$0192
	.word	$0193
	.word	$0194
	.word	$0195
	.word	$0196
	.word	$0197
	.word	$0198
	.word	$019F
	.word	$0199
	.word	$019A
	.word	$019B
	.word	$01A0
	.word	$01A1
	.word	$019C
	.word	$01A2
	.word	$01A3
	.word	$01A4
	.word	$01A5
	.word	$01A6
	.word	$019D
	.word	$019E
	.word	$01A7
	.word	$01A8
	.word	$01A9
	.word	$01AA
	.word	$01AB
	.word	$01AC
	.word	$01AD
	.word	$01AE
	.word	$01AF
	.word	$01B0
	.word	$01B1
	.word	$002B
	.word	$0077
	.word	$002E
	.word	$002B
	.word	$019F
	.word	$0039
	.word	$0031
	.word	$002A
	.word	$01A0
	.word	$01A1
	.word	$01B2
	.word	$01A2
	.word	$01A3
	.word	$01A4
	.word	$01A5
	.word	$01A6
	.word	$01B2
	.word	$01B2
	.word	$01A7
	.word	$01A8
	.word	$01A9
	.word	$01AA
	.word	$01AB
	.word	$01AC
	.word	$01AD
	.word	$01AE
	.word	$01AF
	.word	$01B0
	.word	$01B1
	.word	$002B
	.word	$002B
	.word	$002B
	.word	$002E
	.word	$002E
	.word	$002E
	.word	$0077
	.word	$0077
	.word	$0077
	.word	$007B
	.word	$01B2
	.word	$007B
	.word	$0003
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
_yy_chk:
	.word	$0000
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0005
	.word	$0005
	.word	$0005
	.word	$0006
	.word	$0006
	.word	$0006
	.word	$0008
	.word	$0009
	.word	$000C
	.word	$0008
	.word	$0012
	.word	$0009
	.word	$000D
	.word	$000D
	.word	$000E
	.word	$000E
	.word	$000C
	.word	$0011
	.word	$0013
	.word	$0011
	.word	$0017
	.word	$000D
	.word	$0013
	.word	$0017
	.word	$0011
	.word	$0013
	.word	$0011
	.word	$0011
	.word	$0013
	.word	$0015
	.word	$0012
	.word	$0013
	.word	$0014
	.word	$01B5
	.word	$0015
	.word	$0018
	.word	$0014
	.word	$001A
	.word	$001B
	.word	$0012
	.word	$002B
	.word	$002C
	.word	$0014
	.word	$002B
	.word	$002C
	.word	$000C
	.word	$0011
	.word	$0013
	.word	$0011
	.word	$0017
	.word	$000D
	.word	$0013
	.word	$0017
	.word	$0011
	.word	$0013
	.word	$0011
	.word	$0011
	.word	$0013
	.word	$0015
	.word	$0012
	.word	$0013
	.word	$0014
	.word	$0016
	.word	$0015
	.word	$0018
	.word	$0014
	.word	$001A
	.word	$001B
	.word	$0019
	.word	$0016
	.word	$001C
	.word	$0014
	.word	$0016
	.word	$0019
	.word	$001C
	.word	$0016
	.word	$001D
	.word	$001E
	.word	$001C
	.word	$0022
	.word	$001F
	.word	$0024
	.word	$002E
	.word	$001E
	.word	$001D
	.word	$0028
	.word	$002E
	.word	$003B
	.word	$001F
	.word	$0022
	.word	$001F
	.word	$0016
	.word	$001F
	.word	$0077
	.word	$0020
	.word	$0024
	.word	$002F
	.word	$0019
	.word	$0016
	.word	$001C
	.word	$002F
	.word	$0016
	.word	$0019
	.word	$001C
	.word	$0016
	.word	$001D
	.word	$001E
	.word	$001C
	.word	$0022
	.word	$001F
	.word	$0024
	.word	$0020
	.word	$001E
	.word	$001D
	.word	$0020
	.word	$0131
	.word	$003B
	.word	$001F
	.word	$0022
	.word	$001F
	.word	$00CE
	.word	$001F
	.word	$0026
	.word	$0020
	.word	$0024
	.word	$0028
	.word	$0025
	.word	$00CD
	.word	$0025
	.word	$00CC
	.word	$0026
	.word	$0025
	.word	$003D
	.word	$0077
	.word	$0027
	.word	$0027
	.word	$0029
	.word	$0029
	.word	$0029
	.word	$0032
	.word	$0020
	.word	$0027
	.word	$0081
	.word	$0020
	.word	$0023
	.word	$0034
	.word	$0023
	.word	$0032
	.word	$003E
	.word	$0033
	.word	$0033
	.word	$0026
	.word	$0033
	.word	$0034
	.word	$0023
	.word	$0025
	.word	$0023
	.word	$0025
	.word	$0023
	.word	$0026
	.word	$0025
	.word	$003D
	.word	$0023
	.word	$0027
	.word	$0027
	.word	$0035
	.word	$0035
	.word	$003C
	.word	$0036
	.word	$0036
	.word	$0027
	.word	$0036
	.word	$003F
	.word	$0023
	.word	$0035
	.word	$0023
	.word	$0032
	.word	$003E
	.word	$0040
	.word	$0043
	.word	$0042
	.word	$0045
	.word	$0034
	.word	$0023
	.word	$0042
	.word	$0023
	.word	$0046
	.word	$0023
	.word	$003C
	.word	$0047
	.word	$0048
	.word	$0023
	.word	$0047
	.word	$0044
	.word	$0044
	.word	$0044
	.word	$003C
	.word	$0049
	.word	$0047
	.word	$004A
	.word	$004B
	.word	$003F
	.word	$0044
	.word	$0035
	.word	$004C
	.word	$0047
	.word	$004D
	.word	$0040
	.word	$0043
	.word	$0042
	.word	$0045
	.word	$004E
	.word	$004F
	.word	$0042
	.word	$004E
	.word	$0046
	.word	$0050
	.word	$003C
	.word	$0047
	.word	$0048
	.word	$0078
	.word	$0047
	.word	$0044
	.word	$0044
	.word	$0044
	.word	$0051
	.word	$0049
	.word	$0047
	.word	$004A
	.word	$004B
	.word	$0052
	.word	$0044
	.word	$0053
	.word	$004C
	.word	$0047
	.word	$004D
	.word	$0055
	.word	$0056
	.word	$0057
	.word	$0051
	.word	$004E
	.word	$004F
	.word	$0058
	.word	$004E
	.word	$0059
	.word	$005A
	.word	$005B
	.word	$0053
	.word	$0053
	.word	$0050
	.word	$005C
	.word	$005D
	.word	$005D
	.word	$0061
	.word	$0051
	.word	$0060
	.word	$0062
	.word	$0064
	.word	$0080
	.word	$0052
	.word	$0078
	.word	$0053
	.word	$0066
	.word	$0067
	.word	$007D
	.word	$0055
	.word	$0056
	.word	$0057
	.word	$0051
	.word	$0069
	.word	$0060
	.word	$0058
	.word	$006A
	.word	$0059
	.word	$005A
	.word	$005B
	.word	$0053
	.word	$0053
	.word	$0050
	.word	$005C
	.word	$005D
	.word	$005D
	.word	$0061
	.word	$0063
	.word	$0060
	.word	$0062
	.word	$0064
	.word	$0063
	.word	$0068
	.word	$0065
	.word	$006B
	.word	$0066
	.word	$0067
	.word	$0063
	.word	$0065
	.word	$006C
	.word	$0068
	.word	$006D
	.word	$0069
	.word	$0060
	.word	$006F
	.word	$006A
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$0073
	.word	$0074
	.word	$0075
	.word	$0076
	.word	$0086
	.word	$0088
	.word	$0089
	.word	$0063
	.word	$007E
	.word	$008A
	.word	$008B
	.word	$0063
	.word	$0068
	.word	$0065
	.word	$006B
	.word	$008C
	.word	$007E
	.word	$0063
	.word	$0065
	.word	$006C
	.word	$0068
	.word	$006D
	.word	$007F
	.word	$007F
	.word	$006F
	.word	$007F
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$0073
	.word	$0074
	.word	$0075
	.word	$0076
	.word	$0086
	.word	$0088
	.word	$0089
	.word	$008D
	.word	$008E
	.word	$008A
	.word	$008B
	.word	$008F
	.word	$0090
	.word	$0091
	.word	$0091
	.word	$008C
	.word	$007E
	.word	$0092
	.word	$0093
	.word	$0094
	.word	$0092
	.word	$0095
	.word	$0096
	.word	$0097
	.word	$0098
	.word	$008E
	.word	$0099
	.word	$009A
	.word	$009B
	.word	$009C
	.word	$009D
	.word	$009E
	.word	$009F
	.word	$00A0
	.word	$00A1
	.word	$00A2
	.word	$008D
	.word	$008E
	.word	$00A3
	.word	$00A4
	.word	$008F
	.word	$0090
	.word	$0091
	.word	$0091
	.word	$00A5
	.word	$00A7
	.word	$0092
	.word	$0093
	.word	$0094
	.word	$0092
	.word	$0095
	.word	$0096
	.word	$0097
	.word	$0098
	.word	$008E
	.word	$0099
	.word	$009A
	.word	$009B
	.word	$009C
	.word	$009D
	.word	$009E
	.word	$00A6
	.word	$00A0
	.word	$00A1
	.word	$00A2
	.word	$009F
	.word	$00A9
	.word	$00A3
	.word	$00A4
	.word	$00AA
	.word	$00AB
	.word	$00A6
	.word	$00AF
	.word	$00A5
	.word	$00A7
	.word	$00B0
	.word	$00B1
	.word	$00B2
	.word	$00B3
	.word	$00B4
	.word	$00B5
	.word	$00B7
	.word	$00B6
	.word	$00B8
	.word	$00B9
	.word	$00BA
	.word	$00BB
	.word	$00BC
	.word	$00BD
	.word	$00BF
	.word	$00A6
	.word	$00B6
	.word	$00C0
	.word	$00C1
	.word	$009F
	.word	$00A9
	.word	$00C3
	.word	$007C
	.word	$00AA
	.word	$00AB
	.word	$00A6
	.word	$00AF
	.word	$00C5
	.word	$00C6
	.word	$00B0
	.word	$00B1
	.word	$00B2
	.word	$00B3
	.word	$00B4
	.word	$00B5
	.word	$00B7
	.word	$00B6
	.word	$00B8
	.word	$00B9
	.word	$00BA
	.word	$00BB
	.word	$00BC
	.word	$00BD
	.word	$00BF
	.word	$00C7
	.word	$00B6
	.word	$00C0
	.word	$00C1
	.word	$00C8
	.word	$00C4
	.word	$00C3
	.word	$00C4
	.word	$00CA
	.word	$00CB
	.word	$00C9
	.word	$00CF
	.word	$00C5
	.word	$00C6
	.word	$00C9
	.word	$00D0
	.word	$00D1
	.word	$00D2
	.word	$00D3
	.word	$00D4
	.word	$00D5
	.word	$00D6
	.word	$00D7
	.word	$00D8
	.word	$00D9
	.word	$00DA
	.word	$00DB
	.word	$00DC
	.word	$00D5
	.word	$00C7
	.word	$00DD
	.word	$00DE
	.word	$00DF
	.word	$00C8
	.word	$00C4
	.word	$00E1
	.word	$00C4
	.word	$00CA
	.word	$00CB
	.word	$00C9
	.word	$00CF
	.word	$00E2
	.word	$00E3
	.word	$00C9
	.word	$00D0
	.word	$00D1
	.word	$00D2
	.word	$00D3
	.word	$00D4
	.word	$00D5
	.word	$00D6
	.word	$00D7
	.word	$00D8
	.word	$00D9
	.word	$00DA
	.word	$00DB
	.word	$00DC
	.word	$00D5
	.word	$00E4
	.word	$00DD
	.word	$00DE
	.word	$00DF
	.word	$00E5
	.word	$00E6
	.word	$00E1
	.word	$00E7
	.word	$00E8
	.word	$00EA
	.word	$00EC
	.word	$00ED
	.word	$00E2
	.word	$00E3
	.word	$00EE
	.word	$00EF
	.word	$00F0
	.word	$00F1
	.word	$00F4
	.word	$00F8
	.word	$00FA
	.word	$00FB
	.word	$00FC
	.word	$00FD
	.word	$00FE
	.word	$00FF
	.word	$0100
	.word	$0101
	.word	$0103
	.word	$00E4
	.word	$0104
	.word	$0105
	.word	$0106
	.word	$00E5
	.word	$00E6
	.word	$0107
	.word	$00E7
	.word	$00E8
	.word	$00EA
	.word	$00EC
	.word	$00ED
	.word	$0109
	.word	$010A
	.word	$00EE
	.word	$00EF
	.word	$00F0
	.word	$00F1
	.word	$00F4
	.word	$00F8
	.word	$00FA
	.word	$00FB
	.word	$00FC
	.word	$00FD
	.word	$00FE
	.word	$00FF
	.word	$0100
	.word	$0101
	.word	$0103
	.word	$010B
	.word	$0104
	.word	$0105
	.word	$0106
	.word	$010C
	.word	$010D
	.word	$0107
	.word	$010F
	.word	$0111
	.word	$0112
	.word	$0115
	.word	$0116
	.word	$0109
	.word	$010A
	.word	$0117
	.word	$011A
	.word	$011B
	.word	$011C
	.word	$011D
	.word	$011E
	.word	$0120
	.word	$0121
	.word	$0122
	.word	$0123
	.word	$0124
	.word	$0125
	.word	$0126
	.word	$0127
	.word	$0128
	.word	$010B
	.word	$0129
	.word	$012A
	.word	$012D
	.word	$010C
	.word	$010D
	.word	$0132
	.word	$010F
	.word	$0111
	.word	$0112
	.word	$0115
	.word	$0116
	.word	$0133
	.word	$0134
	.word	$0117
	.word	$011A
	.word	$011B
	.word	$011C
	.word	$011D
	.word	$011E
	.word	$0120
	.word	$0121
	.word	$0122
	.word	$0123
	.word	$0124
	.word	$0125
	.word	$0126
	.word	$0127
	.word	$0128
	.word	$0135
	.word	$0129
	.word	$012A
	.word	$012D
	.word	$0136
	.word	$0137
	.word	$0132
	.word	$0138
	.word	$013A
	.word	$013B
	.word	$013C
	.word	$013D
	.word	$0133
	.word	$0134
	.word	$013E
	.word	$013F
	.word	$0140
	.word	$0141
	.word	$0142
	.word	$0143
	.word	$0144
	.word	$0145
	.word	$0148
	.word	$0149
	.word	$014A
	.word	$014B
	.word	$014D
	.word	$014E
	.word	$014F
	.word	$0135
	.word	$0150
	.word	$0151
	.word	$0154
	.word	$0136
	.word	$0137
	.word	$0156
	.word	$0138
	.word	$013A
	.word	$013B
	.word	$013C
	.word	$013D
	.word	$0158
	.word	$0159
	.word	$013E
	.word	$013F
	.word	$0140
	.word	$0141
	.word	$0142
	.word	$0143
	.word	$0144
	.word	$0145
	.word	$0148
	.word	$0149
	.word	$014A
	.word	$014B
	.word	$014D
	.word	$014E
	.word	$014F
	.word	$015A
	.word	$0150
	.word	$0151
	.word	$0154
	.word	$015C
	.word	$0160
	.word	$0156
	.word	$0161
	.word	$0163
	.word	$0165
	.word	$0166
	.word	$0167
	.word	$0158
	.word	$0159
	.word	$016A
	.word	$016B
	.word	$016C
	.word	$016D
	.word	$016F
	.word	$0170
	.word	$0173
	.word	$0174
	.word	$0178
	.word	$0179
	.word	$017B
	.word	$017E
	.word	$0183
	.word	$0185
	.word	$0186
	.word	$015A
	.word	$0188
	.word	$018A
	.word	$018C
	.word	$015C
	.word	$0160
	.word	$018D
	.word	$0161
	.word	$0163
	.word	$0165
	.word	$0166
	.word	$0167
	.word	$018E
	.word	$018F
	.word	$016A
	.word	$016B
	.word	$016C
	.word	$016D
	.word	$016F
	.word	$0170
	.word	$0173
	.word	$0174
	.word	$0178
	.word	$0179
	.word	$017B
	.word	$017E
	.word	$0183
	.word	$0185
	.word	$0186
	.word	$0190
	.word	$0188
	.word	$018A
	.word	$018C
	.word	$0192
	.word	$0193
	.word	$018D
	.word	$0194
	.word	$0197
	.word	$0198
	.word	$019A
	.word	$019B
	.word	$018E
	.word	$018F
	.word	$019C
	.word	$019D
	.word	$01A1
	.word	$01A3
	.word	$01A6
	.word	$01A8
	.word	$01A9
	.word	$01AA
	.word	$01AD
	.word	$01AE
	.word	$01AF
	.word	$007A
	.word	$0079
	.word	$0030
	.word	$002D
	.word	$0190
	.word	$0010
	.word	$000B
	.word	$0007
	.word	$0192
	.word	$0193
	.word	$0003
	.word	$0194
	.word	$0197
	.word	$0198
	.word	$019A
	.word	$019B
	.word	$0000
	.word	$0000
	.word	$019C
	.word	$019D
	.word	$01A1
	.word	$01A3
	.word	$01A6
	.word	$01A8
	.word	$01A9
	.word	$01AA
	.word	$01AD
	.word	$01AE
	.word	$01AF
	.word	$01B3
	.word	$01B3
	.word	$01B3
	.word	$01B4
	.word	$01B4
	.word	$01B4
	.word	$01B6
	.word	$01B6
	.word	$01B6
	.word	$01B7
	.word	$0000
	.word	$01B7
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
	.word	$01B2
_yy_rule_can_match_eol:
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000001
	.dword	$00000001
	.dword	$00000001
	.dword	$00000001
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
	.dword	$00000001
	.dword	$00000001
	.dword	$00000001
	.dword	$00000000
	.dword	$00000000
	.dword	$00000000
L0001:
	.byte	$AF,$25,$53,$00,$22,$22,$00,$22,$00,$5D,$5D,$00,$5D,$00,$27,$27
	.byte	$00,$27,$00,$46,$4C,$45,$58,$20,$53,$43,$41,$4E,$4E,$45,$52,$20
	.byte	$4A,$41,$4D,$4D,$45,$44,$00,$46,$41,$54,$41,$4C,$20,$46,$4C,$45
	.byte	$58,$20,$53,$43,$41,$4E,$4E,$45,$52,$20,$49,$4E,$54,$45,$52,$4E
	.byte	$41,$4C,$20,$45,$52,$52,$4F,$52,$2D,$2D,$4E,$4F,$20,$41,$43,$54
	.byte	$49,$4F,$4E,$20,$46,$4F,$55,$4E,$44,$00,$46,$41,$54,$41,$4C,$20
	.byte	$46,$4C,$45,$58,$20,$53,$43,$41,$4E,$4E,$45,$52,$20,$49,$4E,$54
	.byte	$45,$52,$4E,$41,$4C,$20,$45,$52,$52,$4F,$52,$2D,$2D,$45,$4E,$44
	.byte	$20,$4F,$46,$20,$42,$55,$46,$46,$45,$52,$20,$4D,$49,$53,$53,$45
	.byte	$44,$00,$46,$41,$54,$41,$4C,$20,$45,$52,$52,$4F,$52,$20,$2D,$20
	.byte	$53,$43,$41,$4E,$4E,$45,$52,$20,$49,$4E,$50,$55,$54,$20,$42,$55
	.byte	$46,$46,$45,$52,$20,$4F,$56,$45,$52,$46,$4C,$4F,$57,$00,$49,$4E
	.byte	$50,$55,$54,$20,$49,$4E,$20,$46,$4C,$45,$58,$20,$53,$43,$41,$4E
	.byte	$4E,$45,$52,$20,$46,$41,$49,$4C,$45,$44,$00,$49,$4E,$50,$55,$54
	.byte	$20,$49,$4E,$20,$46,$4C,$45,$58,$20,$53,$43,$41,$4E,$4E,$45,$52
	.byte	$20,$46,$41,$49,$4C,$45,$44,$00,$4F,$55,$54,$20,$4F,$46,$20,$44
	.byte	$59,$4E,$41,$4D,$49,$43,$20,$4D,$45,$4D,$4F,$52,$59,$20,$49,$4E
	.byte	$20,$59,$59,$AF,$47,$45,$54,$AF,$4E,$45,$58,$54,$AF,$42,$55,$46
	.byte	$46,$45,$52,$28,$29,$00,$46,$4C,$45,$58,$20,$53,$43,$41,$4E,$4E
	.byte	$45,$52,$20,$50,$55,$53,$48,$2D,$42,$41,$43,$4B,$20,$4F,$56,$45
	.byte	$52,$46,$4C,$4F,$57,$00,$4F,$55,$54,$20,$4F,$46,$20,$44,$59,$4E
	.byte	$41,$4D,$49,$43,$20,$4D,$45,$4D,$4F,$52,$59,$20,$49,$4E,$20,$59
	.byte	$59,$AF,$43,$52,$45,$41,$54,$45,$AF,$42,$55,$46,$46,$45,$52,$28
	.byte	$29,$00,$4F,$55,$54,$20,$4F,$46,$20,$44,$59,$4E,$41,$4D,$49,$43
	.byte	$20,$4D,$45,$4D,$4F,$52,$59,$20,$49,$4E,$20,$59,$59,$AF,$43,$52
	.byte	$45,$41,$54,$45,$AF,$42,$55,$46,$46,$45,$52,$28,$29,$00,$4F,$55
	.byte	$54,$20,$4F,$46,$20,$44,$59,$4E,$41,$4D,$49,$43,$20,$4D,$45,$4D
	.byte	$4F,$52,$59,$20,$49,$4E,$20,$59,$59,$45,$4E,$53,$55,$52,$45,$AF
	.byte	$42,$55,$46,$46,$45,$52,$AF,$53,$54,$41,$43,$4B,$28,$29,$00,$4F
	.byte	$55,$54,$20,$4F,$46,$20,$44,$59,$4E,$41,$4D,$49,$43,$20,$4D,$45
	.byte	$4D,$4F,$52,$59,$20,$49,$4E,$20,$59,$59,$45,$4E,$53,$55,$52,$45
	.byte	$AF,$42,$55,$46,$46,$45,$52,$AF,$53,$54,$41,$43,$4B,$28,$29,$00
	.byte	$4F,$55,$54,$20,$4F,$46,$20,$44,$59,$4E,$41,$4D,$49,$43,$20,$4D
	.byte	$45,$4D,$4F,$52,$59,$20,$49,$4E,$20,$59,$59,$AF,$53,$43,$41,$4E
	.byte	$AF,$42,$55,$46,$46,$45,$52,$28,$29,$00,$4F,$55,$54,$20,$4F,$46
	.byte	$20,$44,$59,$4E,$41,$4D,$49,$43,$20,$4D,$45,$4D,$4F,$52,$59,$20
	.byte	$49,$4E,$20,$59,$59,$AF,$53,$43,$41,$4E,$AF,$42,$59,$54,$45,$53
	.byte	$28,$29,$00,$42,$41,$44,$20,$42,$55,$46,$46,$45,$52,$20,$49,$4E
	.byte	$20,$59,$59,$AF,$53,$43,$41,$4E,$AF,$42,$59,$54,$45,$53,$28,$29
	.byte	$00,$25,$53,$0D,$00,$59,$59,$53,$45,$54,$AF,$4C,$49,$4E,$45,$4E
	.byte	$4F,$20,$43,$41,$4C,$4C,$45,$44,$20,$57,$49,$54,$48,$20,$4E,$4F
	.byte	$20,$42,$55,$46,$46,$45,$52,$00,$59,$59,$53,$45,$54,$AF,$43,$4F
	.byte	$4C,$55,$4D,$4E,$20,$43,$41,$4C,$4C,$45,$44,$20,$57,$49,$54,$48
	.byte	$20,$4E,$4F,$20,$42,$55,$46,$46,$45,$52,$00

; ---------------------------------------------------------------
; void __near__ yyrestart (__near__ struct _FILE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yyrestart: near

.segment	"BSS"

L13B3:
	.res	2,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L13B3
	stx     L13B3+1
;
; if ( ! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) ){
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L13B8
	lda     L13B3
	ldx     L13B3+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13B3
	ldx     L13B3+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L13BB
L13B8:	tax
L13BB:	jsr     bnegax
	beq     L13B5
;
; yyensure_buffer_stack (yyscanner);
;
	jsr     pushw0sp
	jsr     _yyensure_buffer_stack
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] =
;
	lda     L13B3
	ldx     L13B3+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13B3
	ldx     L13B3+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
;
; yy_create_buffer(yyg->yyin_r,16384 ,yyscanner);
;
	jsr     pushax
	lda     L13B3
	ldx     L13B3+1
	ldy     #$03
	jsr     pushwidx
	ldx     #$40
	lda     #$00
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	jsr     _yy_create_buffer
	ldy     #$00
	jsr     staxspidx
;
; yy_init_buffer(( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0),input_file ,yyscanner);
;
L13B5:	lda     L13B3
	ldx     L13B3+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L13C8
	lda     L13B3
	ldx     L13B3+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13B3
	ldx     L13B3+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L13CB
L13C8:	tax
L13CB:	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	jsr     _yy_init_buffer
;
; yy_load_buffer_state(yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ yy_switch_to_buffer (__near__ struct yy_buffer_state*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_switch_to_buffer: near

.segment	"BSS"

L13D2:
	.res	2,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L13D2
	stx     L13D2+1
;
; yyensure_buffer_stack (yyscanner);
;
	jsr     pushw0sp
	jsr     _yyensure_buffer_stack
;
; if ( ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) == new_buffer )
;
	lda     L13D2
	ldx     L13D2+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L13D9
	lda     L13D2
	ldx     L13D2+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L13DC
L13D9:	tax
L13DC:	ldy     #$02
	cmp     (sp),y
	bne     L166C
	txa
	iny
	cmp     (sp),y
;
; return;
;
	jeq     incsp4
;
; if ( ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
L166C:	lda     L13D2
	ldx     L13D2+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L13E1
	lda     L13D2
	ldx     L13D2+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L13E4
L13E1:	tax
L13E4:	stx     tmp1
	ora     tmp1
	jeq     L13DE
;
; *yyg->yy_c_buf_p = yyg->yy_hold_char;
;
	lda     L13D2
	ldx     L13D2+1
	ldy     #$12
	jsr     pushwidx
	lda     L13D2
	sta     ptr1
	lda     L13D2+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buf_pos = yyg->yy_c_buf_p;
;
	lda     L13D2
	ldx     L13D2+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$12
	jsr     ldaxidx
	ldy     #$04
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars = yyg->yy_n_chars;
;
	lda     L13D2
	ldx     L13D2+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$0E
	jsr     ldaxidx
	ldy     #$08
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] = new_buffer;
;
L13DE:	lda     L13D2
	ldx     L13D2+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13D2
	ldx     L13D2+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; yy_load_buffer_state(yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; yyg->yy_did_buffer_switch_on_eof = 1;
;
	lda     L13D2
	sta     ptr1
	lda     L13D2+1
	sta     ptr1+1
	lda     #$01
	ldy     #$17
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ struct yy_buffer_state* __near__ yy_create_buffer (__near__ struct _FILE*, int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_create_buffer: near

.segment	"BSS"

L1405:
	.res	2,$00

.segment	"CODE2"

;
; b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
;
	lda     #$18
	jsr     pusha0
	ldy     #$05
	jsr     pushwysp
	jsr     _yyalloc
	sta     L1405
	stx     L1405+1
;
; if ( ! b )
;
	lda     L1405
	ora     L1405+1
	bne     L140A
;
; yy_fatal_error( "out of dynamic memory in yy_create_buffer()" , yyscanner);
;
	lda     #<(L0001+326)
	ldx     #>(L0001+326)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; b->yy_buf_size = (yy_size_t)size;
;
L140A:	lda     L1405
	sta     ptr1
	lda     L1405+1
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$06
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
;
	lda     L1405
	ldx     L1405+1
	jsr     pushax
	lda     L1405
	ldx     L1405+1
	ldy     #$07
	jsr     ldaxidx
	jsr     incax2
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	jsr     _yyalloc
	ldy     #$02
	jsr     staxspidx
;
; if ( ! b->yy_ch_buf )
;
	lda     L1405
	ldx     L1405+1
	iny
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L1415
;
; yy_fatal_error( "out of dynamic memory in yy_create_buffer()" , yyscanner);
;
	lda     #<(L0001+370)
	ldx     #>(L0001+370)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; b->yy_is_our_buffer = 1;
;
L1415:	lda     L1405
	sta     ptr1
	lda     L1405+1
	sta     ptr1+1
	lda     #$01
	ldy     #$0A
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; yy_init_buffer(b,file ,yyscanner);
;
	lda     L1405
	ldx     L1405+1
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	jsr     _yy_init_buffer
;
; return b;
;
	lda     L1405
	ldx     L1405+1
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ yy_delete_buffer (__near__ struct yy_buffer_state*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_delete_buffer: near

.segment	"BSS"

L1422:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1422
	stx     L1422+1
;
; if ( ! b )
;
	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
;
; return;
;
	jeq     incsp4
;
; if ( b == ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
	ldy     #$05
	jsr     pushwysp
	lda     L1422
	ldx     L1422+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1429
	lda     L1422
	ldx     L1422+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1422
	ldx     L1422+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L142C
L1429:	tax
L142C:	jsr     tosicmp
	bne     L1426
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] = (YY_BUFFER_STATE) 0;
;
	lda     L1422
	ldx     L1422+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1422
	ldx     L1422+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if ( b->yy_is_our_buffer )
;
L1426:	ldy     #$03
	jsr     ldaxysp
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1431
;
; yyfree((void *) b->yy_ch_buf ,yyscanner );
;
	ldy     #$03
	jsr     ldaxysp
	ldy     #$03
	jsr     pushwidx
	ldy     #$05
	jsr     pushwysp
	jsr     _yyfree
;
; yyfree((void *) b ,yyscanner );
;
L1431:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	jsr     _yyfree
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ yy_flush_buffer (__near__ struct yy_buffer_state*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_flush_buffer: near

.segment	"BSS"

L145A:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L145A
	stx     L145A+1
;
; if ( ! b )
;
	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
;
; return;
;
	jeq     incsp4
;
; b->yy_n_chars = 0;
;
	iny
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_ch_buf[0] = 0;
;
	ldy     #$03
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; b->yy_ch_buf[1] = 0;
;
	ldy     #$03
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$01
	sta     (ptr1),y
;
; b->yy_buf_pos = &b->yy_ch_buf[0];
;
	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	ldy     #$04
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; b->yy_at_bol = 1;
;
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$0E
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; b->yy_buffer_status = 0;
;
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$16
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if ( b == ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
	ldy     #$05
	jsr     pushwysp
	lda     L145A
	ldx     L145A+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1470
	lda     L145A
	ldx     L145A+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L145A
	ldx     L145A+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L1473
L1470:	tax
L1473:	jsr     tosicmp
	jne     incsp4
;
; yy_load_buffer_state(yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ yypush_buffer_state (__near__ struct yy_buffer_state*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yypush_buffer_state: near

.segment	"BSS"

L1478:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1478
	stx     L1478+1
;
; if (new_buffer == 0)
;
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
;
; return;
;
	jeq     incsp4
;
; yyensure_buffer_stack(yyscanner);
;
	jsr     pushw0sp
	jsr     _yyensure_buffer_stack
;
; if ( ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
	lda     L1478
	ldx     L1478+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1482
	lda     L1478
	ldx     L1478+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L1485
L1482:	tax
L1485:	stx     tmp1
	ora     tmp1
	jeq     L147F
;
; *yyg->yy_c_buf_p = yyg->yy_hold_char;
;
	lda     L1478
	ldx     L1478+1
	ldy     #$12
	jsr     pushwidx
	lda     L1478
	sta     ptr1
	lda     L1478+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buf_pos = yyg->yy_c_buf_p;
;
	lda     L1478
	ldx     L1478+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$12
	jsr     ldaxidx
	ldy     #$04
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars = yyg->yy_n_chars;
;
	lda     L1478
	ldx     L1478+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$0E
	jsr     ldaxidx
	ldy     #$08
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0))
;
L147F:	lda     L1478
	ldx     L1478+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1492
	lda     L1478
	ldx     L1478+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L1495
L1492:	tax
L1495:	stx     tmp1
	ora     tmp1
	beq     L148F
;
; yyg->yy_buffer_stack_top++;
;
	lda     L1478
	ldx     L1478+1
	jsr     pushax
	ldy     #$07
	jsr     ldaxidx
	jsr     incax1
	ldy     #$06
	jsr     staxspidx
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] = new_buffer;
;
L148F:	lda     L1478
	ldx     L1478+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1478
	ldx     L1478+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; yy_load_buffer_state(yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; yyg->yy_did_buffer_switch_on_eof = 1;
;
	lda     L1478
	sta     ptr1
	lda     L1478+1
	sta     ptr1+1
	lda     #$01
	ldy     #$17
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ yypop_buffer_state (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yypop_buffer_state: near

.segment	"BSS"

L14A0:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L14A0
	stx     L14A0+1
;
; if (!( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0))
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L14A5
	lda     L14A0
	ldx     L14A0+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L14A0
	ldx     L14A0+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L14A8
L14A5:	tax
L14A8:	jsr     bnegax
;
; return;
;
	jne     incsp2
;
; yy_delete_buffer(( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) ,yyscanner);
;
	lda     L14A0
	ldx     L14A0+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L14AD
	lda     L14A0
	ldx     L14A0+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L14A0
	ldx     L14A0+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L14B0
L14AD:	tax
L14B0:	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_delete_buffer
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] = 0;
;
	lda     L14A0
	ldx     L14A0+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L14A0
	ldx     L14A0+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if (yyg->yy_buffer_stack_top > 0)
;
	lda     L14A0
	ldx     L14A0+1
	ldy     #$07
	jsr     ldaxidx
	cpx     #$00
	bne     L166D
	cmp     #$00
	beq     L14B6
;
; --yyg->yy_buffer_stack_top;
;
L166D:	lda     L14A0
	ldx     L14A0+1
	jsr     pushax
	ldy     #$07
	jsr     ldaxidx
	jsr     decax1
	ldy     #$06
	jsr     staxspidx
;
; if (( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0)) {
;
L14B6:	lda     L14A0
	ldx     L14A0+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L14BD
	lda     L14A0
	ldx     L14A0+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L14A0
	ldx     L14A0+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L14C0
L14BD:	tax
L14C0:	stx     tmp1
	ora     tmp1
	jeq     incsp2
;
; yy_load_buffer_state(yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; yyg->yy_did_buffer_switch_on_eof = 1;
;
	lda     L14A0
	sta     ptr1
	lda     L14A0+1
	sta     ptr1+1
	lda     #$01
	ldy     #$17
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyensure_buffer_stack (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyensure_buffer_stack: near

.segment	"BSS"

L14C7:
	.res	2,$00
L14C8:
	.res	2,$00
L14E2:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L14C8
	stx     L14C8+1
;
; if (!yyg->yy_buffer_stack) {
;
	ldy     #$0B
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	jne     L14CA
;
; num_to_alloc = 1;
;
	sta     L14C7+1
	lda     #$01
	sta     L14C7
;
; yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
;
	lda     L14C8
	ldx     L14C8+1
	jsr     pushax
;
; (num_to_alloc * sizeof(struct yy_buffer_state*)
;
	lda     L14C7
	ldx     L14C7+1
;
; , yyscanner);
;
	jsr     shlax1
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	jsr     _yyalloc
	ldy     #$0A
	jsr     staxspidx
;
; if ( ! yyg->yy_buffer_stack )
;
	lda     L14C8
	ldx     L14C8+1
	iny
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L14D2
;
; yy_fatal_error( "out of dynamic memory in yyensure_buffer_stack()" , yyscanner);
;
	lda     #<(L0001+414)
	ldx     #>(L0001+414)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
;
L14D2:	lda     L14C8
	ldx     L14C8+1
	ldy     #$0B
	jsr     pushwidx
	lda     L14C7
	ldx     L14C7+1
	jsr     shlax1
	jsr     __bzero
;
; yyg->yy_buffer_stack_max = num_to_alloc;
;
	lda     L14C8
	sta     ptr1
	lda     L14C8+1
	sta     ptr1+1
	lda     L14C7
	ldy     #$08
	sta     (ptr1),y
	iny
	lda     L14C7+1
	sta     (ptr1),y
;
; yyg->yy_buffer_stack_top = 0;
;
	lda     L14C8
	sta     ptr1
	lda     L14C8+1
	sta     ptr1+1
	lda     #$00
	ldy     #$06
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; return;
;
	jmp     incsp2
;
; if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
;
L14CA:	lda     L14C8
	ldx     L14C8+1
	ldy     #$07
	jsr     pushwidx
	lda     L14C8
	ldx     L14C8+1
	ldy     #$09
	jsr     ldaxidx
	jsr     decax1
	jsr     tosicmp
	jcc     incsp2
;
; yy_size_t grow_size = 8 ;
;
	ldx     #$00
	lda     #$08
	sta     L14E2
	stx     L14E2+1
;
; num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
;
	lda     L14C8
	ldx     L14C8+1
	ldy     #$09
	jsr     ldaxidx
	clc
	adc     L14E2
	sta     L14C7
	txa
	adc     L14E2+1
	sta     L14C7+1
;
; yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
;
	lda     L14C8
	ldx     L14C8+1
	jsr     pushax
;
; (yyg->yy_buffer_stack,
;
	lda     L14C8
	ldx     L14C8+1
	ldy     #$0B
	jsr     pushwidx
;
; num_to_alloc * sizeof(struct yy_buffer_state*)
;
	lda     L14C7
	ldx     L14C7+1
;
; , yyscanner);
;
	jsr     shlax1
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	jsr     _yyrealloc
	ldy     #$0A
	jsr     staxspidx
;
; if ( ! yyg->yy_buffer_stack )
;
	lda     L14C8
	ldx     L14C8+1
	iny
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L14EB
;
; yy_fatal_error( "out of dynamic memory in yyensure_buffer_stack()" , yyscanner);
;
	lda     #<(L0001+463)
	ldx     #>(L0001+463)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
;
L14EB:	lda     L14C8
	ldx     L14C8+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L14C8
	ldx     L14C8+1
	ldy     #$09
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushax
	lda     L14E2
	ldx     L14E2+1
	jsr     shlax1
	jsr     __bzero
;
; yyg->yy_buffer_stack_max = num_to_alloc;
;
	lda     L14C8
	sta     ptr1
	lda     L14C8+1
	sta     ptr1+1
	lda     L14C7
	ldy     #$08
	sta     (ptr1),y
	iny
	lda     L14C7+1
	sta     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yy_load_buffer_state (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_load_buffer_state: near

.segment	"BSS"

L13F6:
	.res	2,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L13F6
	stx     L13F6+1
;
; yyg->yy_n_chars = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars;
;
	sta     ptr2
	stx     ptr2+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$09
	jsr     ldaxidx
	ldy     #$0D
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; yyg->yytext_r = yyg->yy_c_buf_p = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buf_pos;
;
	lda     L13F6
	ldx     L13F6+1
	jsr     pushax
	lda     L13F6
	ldx     L13F6+1
	jsr     pushax
	lda     L13F6
	ldx     L13F6+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$05
	jsr     ldaxidx
	ldy     #$11
	jsr     staxspidx
	ldy     #$27
	jsr     staxspidx
;
; yyg->yyin_r = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_input_file;
;
	lda     L13F6
	sta     ptr2
	lda     L13F6+1
	sta     ptr2+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jsr     ldaxi
	ldy     #$02
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; yyg->yy_hold_char = *yyg->yy_c_buf_p;
;
	lda     L13F6
	sta     sreg
	lda     L13F6+1
	sta     sreg+1
	lda     L13F6
	ldx     L13F6+1
	ldy     #$12
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	sta     (sreg),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yy_init_buffer (__near__ struct yy_buffer_state*, __near__ struct _FILE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_init_buffer: near

.segment	"BSS"

L143A:
	.res	2,$00
L143E:
	.res	2,$00

.segment	"CODE2"

;
; int oerrno = (_maperrno(), _errno);
;
	jsr     __maperrno
	lda     __errno
	sta     L143A
	lda     __errno+1
	sta     L143A+1
;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L143E
	stx     L143E+1
;
; yy_flush_buffer(b ,yyscanner);
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_flush_buffer
;
; b->yy_input_file = file;
;
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; b->yy_fill_buffer = 1;
;
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$14
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; if (b != ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0)){
;
	ldy     #$07
	jsr     pushwysp
	lda     L143E
	ldx     L143E+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L144A
	lda     L143E
	ldx     L143E+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L143E
	ldx     L143E+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L144D
L144A:	tax
L144D:	jsr     tosicmp
	beq     L1447
;
; b->yy_bs_lineno = 1;
;
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$10
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; b->yy_bs_column = 0;
;
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$12
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_is_interactive = 0;
;
L1447:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; (_maperrno(), _errno) = oerrno;
;
	jsr     __maperrno
	lda     L143A
	sta     __errno
	lda     L143A+1
	sta     __errno+1
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ struct yy_buffer_state* __near__ yy_scan_buffer (__near__ unsigned char*, unsigned int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_scan_buffer: near

.segment	"BSS"

L14F7:
	.res	2,$00

.segment	"CODE2"

;
; if ( size < 2 ||
;
	ldy     #$03
	lda     (sp),y
	bne     L14FA
	dey
	lda     (sp),y
	cmp     #$02
L14FA:	bcc     L14F9
;
; base[size-2] != 0 ||
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     decax2
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L14F9
;
; base[size-1] != 0 )
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     decax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L14F8
;
; return 0;
;
L14F9:	ldx     #$00
	txa
	jmp     incsp6
;
; b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
;
L14F8:	lda     #$18
	jsr     pusha0
	ldy     #$05
	jsr     pushwysp
	jsr     _yyalloc
	sta     L14F7
	stx     L14F7+1
;
; if ( ! b )
;
	lda     L14F7
	ora     L14F7+1
	bne     L1503
;
; yy_fatal_error( "out of dynamic memory in yy_scan_buffer()" , yyscanner);
;
	lda     #<(L0001+512)
	ldx     #>(L0001+512)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; b->yy_buf_size = size - 2;
;
L1503:	lda     L14F7
	ldx     L14F7+1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     decax2
	ldy     #$06
	jsr     staxspidx
;
; b->yy_buf_pos = b->yy_ch_buf = base;
;
	lda     L14F7
	ldx     L14F7+1
	jsr     pushax
	lda     L14F7
	ldx     L14F7+1
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	ldy     #$02
	jsr     staxspidx
	ldy     #$04
	jsr     staxspidx
;
; b->yy_is_our_buffer = 0;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$00
	ldy     #$0A
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_input_file = 0;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_n_chars = b->yy_buf_size;
;
	lda     L14F7
	sta     sreg
	lda     L14F7+1
	sta     sreg+1
	lda     L14F7
	ldx     L14F7+1
	ldy     #$07
	jsr     ldaxidx
	ldy     #$08
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; b->yy_is_interactive = 0;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_at_bol = 1;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$01
	iny
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; b->yy_fill_buffer = 0;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$00
	ldy     #$14
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; b->yy_buffer_status = 0;
;
	lda     L14F7
	sta     ptr1
	lda     L14F7+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yy_switch_to_buffer(b ,yyscanner );
;
	lda     L14F7
	ldx     L14F7+1
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_switch_to_buffer
;
; return b;
;
	lda     L14F7
	ldx     L14F7+1
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ struct yy_buffer_state* __near__ yy_scan_string (__near__ const unsigned char*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_scan_string: near

.segment	"CODE2"

;
; return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _strlen
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	jsr     _yy_scan_bytes
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ struct yy_buffer_state* __near__ yy_scan_bytes (__near__ const unsigned char*, unsigned int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_scan_bytes: near

.segment	"BSS"

L1526:
	.res	2,$00
L1527:
	.res	2,$00
L1528:
	.res	2,$00
L1529:
	.res	2,$00

.segment	"CODE2"

;
; n = _yybytes_len + 2;
;
	ldy     #$03
	jsr     ldaxysp
	jsr     incax2
	sta     L1528
	stx     L1528+1
;
; buf = (char *) yyalloc(n ,yyscanner );
;
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yyalloc
	sta     L1527
	stx     L1527+1
;
; if ( ! buf )
;
	lda     L1527
	ora     L1527+1
	bne     L1530
;
; yy_fatal_error( "out of dynamic memory in yy_scan_bytes()" , yyscanner);
;
	lda     #<(L0001+554)
	ldx     #>(L0001+554)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; for ( i = 0; i < _yybytes_len; ++i )
;
L1530:	lda     #$00
	sta     L1529
	sta     L1529+1
L1535:	lda     L1529
	ldy     #$02
	cmp     (sp),y
	lda     L1529+1
	iny
	sbc     (sp),y
	bcs     L1536
;
; buf[i] = yybytes[i];
;
	lda     L1527
	clc
	adc     L1529
	sta     sreg
	lda     L1527+1
	adc     L1529+1
	sta     sreg+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     L1529
	sta     ptr1
	txa
	adc     L1529+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     (sreg),y
;
; for ( i = 0; i < _yybytes_len; ++i )
;
	inc     L1529
	bne     L1535
	inc     L1529+1
	jmp     L1535
;
; buf[_yybytes_len] = buf[_yybytes_len+1] = 0;
;
L1536:	jsr     ldaxysp
	clc
	adc     L1527
	pha
	txa
	adc     L1527+1
	tax
	pla
	jsr     pushax
	lda     L1527
	ldx     L1527+1
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     incax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	jsr     staspidx
;
; b = yy_scan_buffer(buf,n ,yyscanner);
;
	lda     L1527
	ldx     L1527+1
	jsr     pushax
	lda     L1528
	ldx     L1528+1
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	jsr     _yy_scan_buffer
	sta     L1526
	stx     L1526+1
;
; if ( ! b )
;
	lda     L1526
	ora     L1526+1
	bne     L154C
;
; yy_fatal_error( "bad buffer in yy_scan_bytes()" , yyscanner);
;
	lda     #<(L0001+595)
	ldx     #>(L0001+595)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; b->yy_is_our_buffer = 1;
;
L154C:	lda     L1526
	sta     ptr1
	lda     L1526+1
	sta     ptr1+1
	lda     #$01
	ldy     #$0A
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; return b;
;
	lda     L1526
	ldx     L1526+1
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ void* __near__ yyalloc (unsigned int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyalloc: near

.segment	"BSS"

L1659:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1659
	stx     L1659+1
;
; return (void *) malloc( size );
;
	ldy     #$03
	jsr     ldaxysp
	jsr     _malloc
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ void* __near__ yyrealloc (__near__ void*, unsigned int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyrealloc: near

.segment	"BSS"

L165F:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L165F
	stx     L165F+1
;
; return (void *) realloc( (char *) ptr, size );
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _realloc
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ yyfree (__near__ void*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyfree: near

.segment	"BSS"

L1666:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1666
	stx     L1666+1
;
; free( (char *) ptr );
;
	ldy     #$03
	jsr     ldaxysp
	jsr     _free
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yy_get_previous_state (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_get_previous_state: near

.segment	"BSS"

L12D6:
	.res	2,$00
L12D7:
	.res	2,$00
L12D8:
	.res	2,$00
L12E5:
	.res	1,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L12D8
	stx     L12D8+1
;
; yy_current_state = yyg->yy_start;
;
	ldy     #$16
	jsr     ldaxidx
	sta     L12D6
	stx     L12D6+1
;
; for ( yy_cp = yyg->yytext_r + 0; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
;
	lda     L12D8
	ldx     L12D8+1
	ldy     #$28
	jsr     ldaxidx
	sta     L12D7
	stx     L12D7+1
L12DC:	lda     L12D7
	ldx     L12D7+1
	jsr     pushax
	lda     L12D8
	ldx     L12D8+1
	ldy     #$12
	jsr     ldaxidx
	jsr     tosicmp
	jcs     L12DD
;
; YY_CHAR yy_c = (*yy_cp ? yy_ec[((unsigned int) (unsigned char) *yy_cp)] : 1);
;
	lda     L12D7
	sta     ptr1
	lda     L12D7+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L12E8
	lda     L12D7
	sta     ptr1
	lda     L12D7+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1
	tya
	clc
	adc     #>(_yy_ec)
	sta     ptr1+1
	ldy     #<(_yy_ec)
	lda     (ptr1),y
	jmp     L12EC
L12E8:	lda     #$01
L12EC:	sta     L12E5
;
; if ( yy_accept[yy_current_state] )
;
	lda     L12D6
	ldx     L12D6+1
	jsr     aslax1
	clc
	adc     #<(_yy_accept)
	sta     ptr1
	txa
	adc     #>(_yy_accept)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L12EE
;
; yyg->yy_last_accepting_state = yy_current_state;
;
	lda     L12D8
	sta     ptr1
	lda     L12D8+1
	sta     ptr1+1
	lda     L12D6
	ldy     #$1F
	sta     (ptr1),y
	iny
	lda     L12D6+1
	sta     (ptr1),y
;
; yyg->yy_last_accepting_cpos = yy_cp;
;
	lda     L12D8
	sta     ptr1
	lda     L12D8+1
	sta     ptr1+1
	lda     L12D7
	iny
	sta     (ptr1),y
	iny
	lda     L12D7+1
	sta     (ptr1),y
;
; while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
;
L12EE:	lda     L12D6
	ldx     L12D6+1
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	clc
	adc     L12E5
	bcc     L166F
	inx
L166F:	jsr     aslax1
	clc
	adc     #<(_yy_chk)
	tay
	txa
	adc     #>(_yy_chk)
	tax
	tya
	jsr     ldaxi
	cpx     L12D6+1
	bne     L1672
	cmp     L12D6
	beq     L12F6
;
; yy_current_state = (int) yy_def[yy_current_state];
;
L1672:	lda     L12D6
	ldx     L12D6+1
	jsr     aslax1
	clc
	adc     #<(_yy_def)
	tay
	txa
	adc     #>(_yy_def)
	tax
	tya
	jsr     ldaxi
	sta     L12D6
	stx     L12D6+1
;
; if ( yy_current_state >= 435 )
;
	cmp     #$B3
	txa
	sbc     #$01
	bvs     L12FF
	eor     #$80
L12FF:	bpl     L12EE
;
; yy_c = yy_meta[(unsigned int) yy_c];
;
	lda     L12E5
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_yy_meta)
	sta     ptr1+1
	ldy     #<(_yy_meta)
	lda     (ptr1),y
	sta     L12E5
;
; }
;
	jmp     L12EE
;
; yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
;
L12F6:	lda     L12D6
	ldx     L12D6+1
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     L12E5
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1671
	inx
L1671:	jsr     aslax1
	clc
	adc     #<(_yy_nxt)
	tay
	txa
	adc     #>(_yy_nxt)
	tax
	tya
	jsr     ldaxi
	sta     L12D6
	stx     L12D6+1
;
; for ( yy_cp = yyg->yytext_r + 0; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
;
	inc     L12D7
	jne     L12DC
	inc     L12D7+1
	jmp     L12DC
;
; return yy_current_state;
;
L12DD:	lda     L12D6
	ldx     L12D6+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yy_try_NUL_trans (int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_try_NUL_trans: near

.segment	"BSS"

L1309:
	.res	2,$00
L130A:
	.res	2,$00
L130C:
	.res	2,$00
L130E:
	.res	1,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L130A
	stx     L130A+1
;
; char *yy_cp = yyg->yy_c_buf_p;
;
	ldy     #$12
	jsr     ldaxidx
	sta     L130C
	stx     L130C+1
;
; YY_CHAR yy_c = 1;
;
	lda     #$01
	sta     L130E
;
; if ( yy_accept[yy_current_state] )
;
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_yy_accept)
	sta     ptr1
	txa
	adc     #>(_yy_accept)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1310
;
; yyg->yy_last_accepting_state = yy_current_state;
;
	lda     L130A
	sta     ptr1
	lda     L130A+1
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$1F
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; yyg->yy_last_accepting_cpos = yy_cp;
;
	lda     L130A
	sta     ptr1
	lda     L130A+1
	sta     ptr1+1
	lda     L130C
	iny
	sta     (ptr1),y
	iny
	lda     L130C+1
	sta     (ptr1),y
;
; while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
;
L1310:	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	clc
	adc     L130E
	bcc     L1673
	inx
L1673:	jsr     aslax1
	clc
	adc     #<(_yy_chk)
	tay
	txa
	adc     #>(_yy_chk)
	tax
	tya
	jsr     ldaxi
	ldy     #$02
	cmp     (sp),y
	bne     L1676
	txa
	iny
	cmp     (sp),y
	beq     L1318
;
; yy_current_state = (int) yy_def[yy_current_state];
;
L1676:	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_yy_def)
	tay
	txa
	adc     #>(_yy_def)
	tax
	tya
	jsr     ldaxi
	ldy     #$02
	jsr     staxysp
;
; if ( yy_current_state >= 435 )
;
	cmp     #$B3
	txa
	sbc     #$01
	bvs     L1321
	eor     #$80
L1321:	bpl     L1310
;
; yy_c = yy_meta[(unsigned int) yy_c];
;
	lda     L130E
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_yy_meta)
	sta     ptr1+1
	ldy     #<(_yy_meta)
	lda     (ptr1),y
	sta     L130E
;
; }
;
	jmp     L1310
;
; yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
;
L1318:	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     L130E
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1675
	inx
L1675:	jsr     aslax1
	clc
	adc     #<(_yy_nxt)
	tay
	txa
	adc     #>(_yy_nxt)
	tax
	tya
	jsr     ldaxi
	ldy     #$02
	jsr     staxysp
;
; yy_is_jam = (yy_current_state == 434);
;
	cpx     #$01
	bne     L132C
	cmp     #$B2
L132C:	jsr     booleq
	sta     L1309
	stx     L1309+1
;
; return yy_is_jam ? 0 : yy_current_state;
;
	lda     L1309
	ora     L1309+1
	beq     L132F
	txa
	jmp     incsp4
L132F:	ldy     #$03
	jsr     ldaxysp
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yy_get_next_buffer (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_get_next_buffer: near

.segment	"BSS"

L11E4:
	.res	2,$00
L11E6:
	.res	2,$00
L11E9:
	.res	2,$00
L11EB:
	.res	2,$00
L11EC:
	.res	2,$00
L11ED:
	.res	2,$00
L1218:
	.res	2,$00
L121F:
	.res	2,$00
L1222:
	.res	2,$00
L1227:
	.res	2,$00
L124B:
	.res	2,$00
L124D:
	.res	2,$00
L12B6:
	.res	2,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L11E4
	stx     L11E4+1
;
; char *dest = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf;
;
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	sta     L11E6
	stx     L11E6+1
;
; char *source = yyg->yytext_r;
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$28
	jsr     ldaxidx
	sta     L11E9
	stx     L11E9+1
;
; if ( yyg->yy_c_buf_p > &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars + 1] )
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$12
	jsr     pushwidx
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     pushwidx
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	jsr     incax1
	jsr     tosaddax
	jsr     tosicmp
	bcc     L11EE
	beq     L11EE
;
; yy_fatal_error( "fatal flex scanner internal error--end of buffer missed" , yyscanner)
;
	lda     #<(L0001+90)
	ldx     #>(L0001+90)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
;
; ;
;
	jsr     _yy_fatal_error
;
; if ( yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_fill_buffer == 0 )
;
L11EE:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$15
	jsr     ldaxidx
	cpx     #$00
	bne     L11FD
	cmp     #$00
	bne     L11FD
;
; if ( yyg->yy_c_buf_p - yyg->yytext_r - 0 == 1 )
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$12
	jsr     pushwidx
	lda     L11E4
	ldx     L11E4+1
	ldy     #$28
	jsr     ldaxidx
	jsr     tossubax
	cpx     #$00
	bne     L11F9
	cmp     #$01
;
; return 1;
;
	jeq     incsp2
;
; return 2;
;
L11F9:	ldx     #$00
	lda     #$02
	jmp     incsp2
;
; number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_r) - 1;
;
L11FD:	lda     L11E4
	ldx     L11E4+1
	ldy     #$12
	jsr     pushwidx
	lda     L11E4
	ldx     L11E4+1
	ldy     #$28
	jsr     ldaxidx
	jsr     tossubax
	jsr     decax1
	sta     L11EB
	stx     L11EB+1
;
; for ( i = 0; i < number_to_move; ++i )
;
	lda     #$00
	sta     L11EC
	sta     L11EC+1
L1202:	lda     L11EC
	cmp     L11EB
	lda     L11EC+1
	sbc     L11EB+1
	bcs     L1203
;
; *(dest++) = *(source++);
;
	lda     L11E6
	ldx     L11E6+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L11E6
	stx     L11E6+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     L11E9
	ldx     L11E9+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L11E9
	stx     L11E9+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; for ( i = 0; i < number_to_move; ++i )
;
	inc     L11EC
	bne     L1202
	inc     L11EC+1
	jmp     L1202
;
; if ( yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buffer_status == 2 )
;
L1203:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$17
	jsr     ldaxidx
	cpx     #$00
	bne     L120F
	cmp     #$02
	bne     L120F
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars = yyg->yy_n_chars = 0;
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	lda     L11E4
	ldx     L11E4+1
	jsr     pushax
	ldx     #$00
	txa
	ldy     #$0D
	jsr     staxspidx
	ldy     #$08
	jsr     staxspidx
;
; else
;
	jmp     L1217
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buf_size - number_to_move - 1;
;
L120F:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$07
	jsr     ldaxidx
	sec
	sbc     L11EB
	pha
	txa
	sbc     L11EB+1
	tax
	pla
	jsr     decax1
	sta     L1218
	stx     L1218+1
;
; while ( num_to_read <= 0 )
;
	lda     L1218
	ora     L1218+1
	jne     L121C
;
; YY_BUFFER_STATE b = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top];
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     L121F
	stx     L121F+1
;
; (int) (yyg->yy_c_buf_p - b->yy_ch_buf);
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$12
	jsr     pushwidx
	lda     L121F
	ldx     L121F+1
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	sta     L1222
	stx     L1222+1
;
; if ( b->yy_is_our_buffer )
;
	lda     L121F
	ldx     L121F+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L1225
;
; yy_size_t new_size = b->yy_buf_size * 2;
;
	lda     L121F
	ldx     L121F+1
	ldy     #$07
	jsr     ldaxidx
	jsr     shlax1
	sta     L1227
	stx     L1227+1
;
; if ( new_size <= 0 )
;
	cpx     #$00
	bne     L1229
	cmp     #$00
	bne     L1229
;
; b->yy_buf_size += b->yy_buf_size / 8;
;
	lda     L121F
	ldx     L121F+1
	sta     ptr2
	stx     ptr2+1
	ldy     #$07
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L121F
	ldx     L121F+1
	ldy     #$07
	jsr     ldaxidx
	jsr     shrax3
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$06
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; else
;
	jmp     L122E
;
; b->yy_buf_size *= 2;
;
L1229:	lda     L121F
	ldx     L121F+1
	sta     sreg
	stx     sreg+1
	ldy     #$07
	jsr     ldaxidx
	jsr     shlax1
	ldy     #$06
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; b->yy_ch_buf = (char *)
;
L122E:	lda     L121F
	ldx     L121F+1
	jsr     pushax
;
; yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
;
	lda     L121F
	ldx     L121F+1
	ldy     #$03
	jsr     pushwidx
	lda     L121F
	ldx     L121F+1
	ldy     #$07
	jsr     ldaxidx
	jsr     incax2
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	jsr     _yyrealloc
	ldy     #$02
	jsr     staxspidx
;
; else
;
	jmp     L1236
;
; b->yy_ch_buf = 0;
;
L1225:	lda     L121F
	sta     ptr1
	lda     L121F+1
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if ( ! b->yy_ch_buf )
;
L1236:	lda     L121F
	ldx     L121F+1
	ldy     #$03
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L1239
;
; yy_fatal_error( "fatal error - scanner input buffer overflow" , yyscanner)
;
	lda     #<(L0001+146)
	ldx     #>(L0001+146)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
;
; ;
;
	jsr     _yy_fatal_error
;
; yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
;
L1239:	lda     L11E4
	sta     sreg
	lda     L11E4+1
	sta     sreg+1
	lda     L121F
	ldx     L121F+1
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     L1222
	pha
	txa
	adc     L1222+1
	tax
	pla
	ldy     #$11
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; }
;
	jmp     L120F
;
; if ( num_to_read > 8192 )
;
L121C:	lda     L1218
	cmp     #$01
	lda     L1218+1
	sbc     #$20
	bcc     L1244
;
; num_to_read = 8192;
;
	ldx     #$20
	lda     #$00
	sta     L1218
	stx     L1218+1
;
; if ( yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_is_interactive ) { int c = '*'; size_t n; for ( n = 0; n < num_to_read && (c = fgetc (yyg->yyin_r)) != -1 && c != '\n'; ++n ) (&yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[number_to_move])[n] = (char) c; if ( c == '\n' ) (&yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[number_to_move])[n++] = (char) c; if ( c == -1 && ferror( yyg->yyin_r ) ) yy_fatal_error( "input in flex scanner failed" , yyscanner); yyg->yy_n_chars = n; } else { (_maperrno(), _errno)=0; while ( (yyg->yy_n_chars = fread((&yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[number_to_move]), 1, num_to_read, yyg->yyin_r))==0 && ferror(yyg->yyin_r)) { if( (_maperrno(), _errno) != 12) { yy_fatal_error( "input in flex scanner failed" , yyscanner); break; } (_maperrno(), _errno)=0; clearerr(yyg->yyin_r); } }
;
L1244:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$0C
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L1248
	ldx     #$00
	lda     #$2A
	sta     L124B
	stx     L124B+1
	txa
	sta     L124D
	sta     L124D+1
L124E:	lda     L124D
	cmp     L1218
	lda     L124D+1
	sbc     L1218+1
	jcs     L124F
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     ldaxidx
	jsr     _fgetc
	sta     L124B
	stx     L124B+1
	cpx     #$FF
	bne     L1679
	cmp     #$FF
	beq     L124F
L1679:	lda     L124B+1
	bne     L1251
	lda     L124B
	cmp     #$0D
	beq     L124F
L1251:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     L11EB
	pha
	txa
	adc     L11EB+1
	tax
	pla
	clc
	adc     L124D
	sta     ptr1
	txa
	adc     L124D+1
	sta     ptr1+1
	lda     L124B
	ldy     #$00
	sta     (ptr1),y
	inc     L124D
	jne     L124E
	inc     L124D+1
	jmp     L124E
L124F:	lda     L124B+1
	bne     L1264
	lda     L124B
	cmp     #$0D
	bne     L1264
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     L11EB
	pha
	txa
	adc     L11EB+1
	tax
	pla
	jsr     pushax
	lda     L124D
	ldx     L124D+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L124D
	stx     L124D+1
	lda     regsave
	ldx     regsave+1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     L124B
	ldy     #$00
	sta     (ptr1),y
L1264:	lda     L124B+1
	cmp     #$FF
	bne     L126D
	lda     L124B
	cmp     #$FF
	bne     L126D
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     ldaxidx
	jsr     _ferror
	stx     tmp1
	ora     tmp1
	beq     L126D
	lda     #<(L0001+190)
	ldx     #>(L0001+190)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
L126D:	lda     L11E4
	sta     ptr1
	lda     L11E4+1
	sta     ptr1+1
	lda     L124D
	ldy     #$0D
	sta     (ptr1),y
	iny
	lda     L124D+1
	sta     (ptr1),y
	jmp     L127E
L1248:	jsr     __maperrno
	lda     #$00
	sta     __errno
	sta     __errno+1
L127D:	lda     L11E4
	ldx     L11E4+1
	jsr     pushax
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     L11EB
	pha
	txa
	adc     L11EB+1
	tax
	pla
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     L1218
	ldx     L1218+1
	jsr     pushax
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     ldaxidx
	jsr     _fread
	ldy     #$0D
	jsr     staxspidx
	cpx     #$00
	bne     L127E
	cmp     #$00
	bne     L127E
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     ldaxidx
	jsr     _ferror
	stx     tmp1
	ora     tmp1
	beq     L127E
	jsr     __maperrno
	lda     __errno+1
	bne     L167A
	lda     __errno
	cmp     #$0C
	beq     L128D
L167A:	lda     #<(L0001+219)
	ldx     #>(L0001+219)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
	jmp     L127E
L128D:	jsr     __maperrno
	lda     #$00
	sta     __errno
	sta     __errno+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     ldaxidx
	jsr     _clearerr
	jmp     L127D
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars = yyg->yy_n_chars;
;
L127E:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	ldy     #$08
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if ( yyg->yy_n_chars == 0 )
;
L1217:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	cpx     #$00
	bne     L129E
	cmp     #$00
	bne     L129E
;
; if ( number_to_move == 0 )
;
	lda     L11EB
	ora     L11EB+1
	bne     L12A1
;
; ret_val = 1;
;
	lda     #$01
	sta     L11ED
	stx     L11ED+1
;
; yyrestart(yyg->yyin_r ,yyscanner);
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$03
	jsr     pushwidx
	ldy     #$05
	jsr     pushwysp
	jsr     _yyrestart
;
; else
;
	jmp     L12AF
;
; ret_val = 2;
;
L12A1:	lda     #$02
	sta     L11ED
	stx     L11ED+1
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buffer_status =
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
;
; 2;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$02
	ldy     #$16
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; else
;
	jmp     L12AF
;
; ret_val = 0;
;
L129E:	lda     #$00
	sta     L11ED
	sta     L11ED+1
;
; if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buf_size) {
;
L12AF:	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     L11EB
	pha
	txa
	adc     L11EB+1
	tax
	pla
	jsr     pushax
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$07
	jsr     ldaxidx
	jsr     tosicmp
	jcc     L12C0
	jeq     L12C0
;
; yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     L11EB
	sta     sreg
	txa
	adc     L11EB+1
	sta     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	jsr     shrax1
	clc
	adc     sreg
	sta     L12B6
	txa
	adc     sreg+1
	sta     L12B6+1
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf = (char *) yyrealloc((void *) yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf,new_size ,yyscanner );
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     pushwidx
	lda     L12B6
	ldx     L12B6+1
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	jsr     _yyrealloc
	ldy     #$02
	jsr     staxspidx
;
; if ( ! yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf )
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L12C0
;
; yy_fatal_error( "out of dynamic memory in yy_get_next_buffer()" , yyscanner);
;
	lda     #<(L0001+248)
	ldx     #>(L0001+248)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; yyg->yy_n_chars += number_to_move;
;
L12C0:	lda     L11E4
	ldx     L11E4+1
	sta     sreg
	stx     sreg+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     L11EB
	pha
	txa
	adc     L11EB+1
	tax
	pla
	ldy     #$0D
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars] = 0;
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars + 1] = 0;
;
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     pushwidx
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0E
	jsr     ldaxidx
	jsr     incax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yytext_r = &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[0];
;
	lda     L11E4
	sta     ptr2
	lda     L11E4+1
	sta     ptr2+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L11E4
	ldx     L11E4+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	ldy     #$27
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; return ret_val;
;
	lda     L11ED
	ldx     L11ED+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yy_fatal_error (__near__ const unsigned char*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_fatal_error: near

.segment	"BSS"

L1555:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1555
	stx     L1555+1
;
; (void) fprintf( stderr, "%s\n", msg );
;
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L0001+625)
	ldx     #>(L0001+625)
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$06
	jsr     _fprintf
;
; exit( 2 );
;
	ldx     #$00
	lda     #$02
	jsr     _exit
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yy_init_globals (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yy_init_globals: near

.segment	"BSS"

L1613:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1613
	stx     L1613+1
;
; yyg->yy_buffer_stack = 0;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0A
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_buffer_stack_top = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	ldy     #$06
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_buffer_stack_max = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_c_buf_p = (char *) 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	ldy     #$11
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_init = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_start = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_start_stack_ptr = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	ldy     #$19
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_start_stack_depth = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_start_stack = 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yyin_r = (FILE *) 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yyout_r = (FILE *) 0;
;
	lda     L1613
	sta     ptr1
	lda     L1613+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; return 0;
;
	tax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yylex_init (__near__ __near__ void**)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yylex_init: near

.segment	"CODE2"

;
; if (ptr_yy_globals == 0){
;
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L15D6
;
; (_maperrno(), _errno) = 7;
;
	jsr     __maperrno
	ldx     #$00
	lda     #$07
	sta     __errno
	stx     __errno+1
;
; return 1;
;
	lda     #$01
	jmp     incsp2
;
; *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), 0 );
;
L15D6:	jsr     pushw0sp
	lda     #$2F
	jsr     pusha0
	jsr     push0
	jsr     _yyalloc
	ldy     #$00
	jsr     staxspidx
;
; if (*ptr_yy_globals == 0){
;
	jsr     ldax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L15E2
	cmp     #$00
	bne     L15E2
;
; (_maperrno(), _errno) = 2;
;
	jsr     __maperrno
	ldx     #$00
	lda     #$02
	sta     __errno
	stx     __errno+1
;
; return 1;
;
	lda     #$01
	jmp     incsp2
;
; memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
;
L15E2:	jsr     ldax0sp
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$2E
L1699:	sta     (ptr1),y
	dey
	bpl     L1699
;
; return yy_init_globals ( *ptr_yy_globals );
;
	jsr     ldax0sp
	jsr     pushw
	jsr     _yy_init_globals
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yylex_init_extra (__near__ void*, __near__ __near__ void**)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yylex_init_extra: near

.segment	"BSS"

L15F1:
	.res	47,$00

.segment	"CODE2"

;
; yyset_extra (yy_user_defined, &dummy_yyguts);
;
	ldy     #$05
	jsr     pushwysp
	lda     #<(L15F1)
	ldx     #>(L15F1)
	jsr     pushax
	jsr     _yyset_extra
;
; if (ptr_yy_globals == 0){
;
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L15F5
;
; (_maperrno(), _errno) = 7;
;
	jsr     __maperrno
	ldx     #$00
	lda     #$07
	sta     __errno
	stx     __errno+1
;
; return 1;
;
	lda     #$01
	jmp     incsp4
;
; *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
;
L15F5:	jsr     pushw0sp
	lda     #$2F
	jsr     pusha0
	lda     #<(L15F1)
	ldx     #>(L15F1)
	jsr     pushax
	jsr     _yyalloc
	ldy     #$00
	jsr     staxspidx
;
; if (*ptr_yy_globals == 0){
;
	jsr     ldax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L1601
	cmp     #$00
	bne     L1601
;
; (_maperrno(), _errno) = 2;
;
	jsr     __maperrno
	ldx     #$00
	lda     #$02
	sta     __errno
	stx     __errno+1
;
; return 1;
;
	lda     #$01
	jmp     incsp4
;
; memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
;
L1601:	jsr     ldax0sp
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$2E
L169A:	sta     (ptr1),y
	dey
	bpl     L169A
;
; yyset_extra (yy_user_defined, *ptr_yy_globals);
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     pushw
	jsr     _yyset_extra
;
; return yy_init_globals ( *ptr_yy_globals );
;
	jsr     ldax0sp
	jsr     pushw
	jsr     _yy_init_globals
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yylex_destroy (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yylex_destroy: near

.segment	"BSS"

L162D:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L162D
	stx     L162D+1
;
; while(( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0)){
;
L162F:	lda     L162D
	ldx     L162D+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1633
	lda     L162D
	ldx     L162D+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L162D
	ldx     L162D+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L1636
L1633:	tax
L1636:	stx     tmp1
	ora     tmp1
	jeq     L1630
;
; yy_delete_buffer(( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) ,yyscanner );
;
	lda     L162D
	ldx     L162D+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L163B
	lda     L162D
	ldx     L162D+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L162D
	ldx     L162D+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L163E
L163B:	tax
L163E:	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_delete_buffer
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] = 0;
;
	lda     L162D
	ldx     L162D+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L162D
	ldx     L162D+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yypop_buffer_state(yyscanner);
;
	jsr     pushw0sp
	jsr     _yypop_buffer_state
;
; }
;
	jmp     L162F
;
; yyfree(yyg->yy_buffer_stack ,yyscanner);
;
L1630:	lda     L162D
	ldx     L162D+1
	ldy     #$0B
	jsr     pushwidx
	ldy     #$05
	jsr     pushwysp
	jsr     _yyfree
;
; yyg->yy_buffer_stack = 0;
;
	lda     L162D
	sta     ptr1
	lda     L162D+1
	sta     ptr1+1
	lda     #$00
	ldy     #$0A
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyfree(yyg->yy_start_stack ,yyscanner );
;
	lda     L162D
	ldx     L162D+1
	ldy     #$1E
	jsr     pushwidx
	ldy     #$05
	jsr     pushwysp
	jsr     _yyfree
;
; yyg->yy_start_stack = 0;
;
	lda     L162D
	sta     ptr1
	lda     L162D+1
	sta     ptr1+1
	lda     #$00
	ldy     #$1D
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yy_init_globals( yyscanner);
;
	jsr     pushw0sp
	jsr     _yy_init_globals
;
; yyfree ( yyscanner , yyscanner );
;
	jsr     pushw0sp
	ldy     #$05
	jsr     pushwysp
	jsr     _yyfree
;
; yyscanner = 0;
;
	ldx     #$00
	txa
	jsr     stax0sp
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yyget_debug (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_debug: near

.segment	"BSS"

L15C4:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15C4
	stx     L15C4+1
;
; return yyg->yy_flex_debug_r;
;
	ldy     #$26
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_debug (int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_debug: near

.segment	"BSS"

L15C8:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15C8
	stx     L15C8+1
;
; yyg->yy_flex_debug_r = _bdebug ;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$25
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ void* __near__ yyget_extra (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_extra: near

.segment	"BSS"

L155F:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L155F
	stx     L155F+1
;
; return yyg->yyextra_r;
;
	jsr     ldaxi
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_extra (__near__ void*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_extra: near

.segment	"BSS"

L1591:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1591
	stx     L1591+1
;
; yyg->yyextra_r = user_defined ;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ struct _FILE* __near__ yyget_in (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_in: near

.segment	"BSS"

L1581:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1581
	stx     L1581+1
;
; return yyg->yyin_r;
;
	ldy     #$03
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_in (__near__ struct _FILE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_in: near

.segment	"BSS"

L15BA:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15BA
	stx     L15BA+1
;
; yyg->yyin_r = _in_str ;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$02
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ struct _FILE* __near__ yyget_out (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_out: near

.segment	"BSS"

L1585:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1585
	stx     L1585+1
;
; return yyg->yyout_r;
;
	ldy     #$05
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_out (__near__ struct _FILE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_out: near

.segment	"BSS"

L15BF:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15BF
	stx     L15BF+1
;
; yyg->yyout_r = _out_str ;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$04
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ yyget_leng (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_leng: near

.segment	"BSS"

L1589:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1589
	stx     L1589+1
;
; return yyg->yyleng_r;
;
	ldy     #$10
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; __near__ unsigned char* __near__ yyget_text (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_text: near

.segment	"BSS"

L158D:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L158D
	stx     L158D+1
;
; return yyg->yytext_r;
;
	ldy     #$28
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yyget_lineno (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_lineno: near

.segment	"BSS"

L1563:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1563
	stx     L1563+1
;
; if (! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0))
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1568
	lda     L1563
	ldx     L1563+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1563
	ldx     L1563+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L156B
L1568:	tax
L156B:	jsr     bnegax
	beq     L1565
;
; return 0;
;
	ldx     #$00
	txa
	jmp     incsp2
;
; return (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno);
;
L1565:	lda     L1563
	ldx     L1563+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1563
	ldx     L1563+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$11
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_lineno (int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_lineno: near

.segment	"BSS"

L1596:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1596
	stx     L1596+1
;
; if (! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L159B
	lda     L1596
	ldx     L1596+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1596
	ldx     L1596+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L159E
L159B:	tax
L159E:	jsr     bnegax
	beq     L1598
;
; yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner);
;
	lda     #<(L0001+629)
	ldx     #>(L0001+629)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno) = _line_number;
;
L1598:	lda     L1596
	ldx     L1596+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1596
	ldx     L1596+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$10
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yyget_column (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_column: near

.segment	"BSS"

L1572:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1572
	stx     L1572+1
;
; if (! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0))
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L1577
	lda     L1572
	ldx     L1572+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1572
	ldx     L1572+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L157A
L1577:	tax
L157A:	jsr     bnegax
	beq     L1574
;
; return 0;
;
	ldx     #$00
	txa
	jmp     incsp2
;
; return (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_column);
;
L1574:	lda     L1572
	ldx     L1572+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1572
	ldx     L1572+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$13
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_column (int, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_column: near

.segment	"BSS"

L15A8:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15A8
	stx     L15A8+1
;
; if (! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) )
;
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L15AD
	lda     L15A8
	ldx     L15A8+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L15A8
	ldx     L15A8+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L15B0
L15AD:	tax
L15B0:	jsr     bnegax
	beq     L15AA
;
; yy_fatal_error( "yyset_column called with no buffer" , yyscanner);
;
	lda     #<(L0001+664)
	ldx     #>(L0001+664)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_column) = _column_no;
;
L15AA:	lda     L15A8
	ldx     L15A8+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L15A8
	ldx     L15A8+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$12
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ union YYSTYPE* __near__ yyget_lval (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyget_lval: near

.segment	"BSS"

L15CD:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15CD
	stx     L15CD+1
;
; return yyg->yylval_r;
;
	ldy     #$2E
	jsr     ldaxidx
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ yyset_lval (__near__ union YYSTYPE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_yyset_lval: near

.segment	"BSS"

L15D1:
	.res	2,$00

.segment	"CODE2"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L15D1
	stx     L15D1+1
;
; yyg->yylval_r = yylval_param;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$2D
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ input (__near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input: near

.segment	"BSS"

L1372:
	.res	2,$00
L1373:
	.res	2,$00
L1380:
	.res	2,$00

.segment	"CODE"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L1373
	stx     L1373+1
;
; *yyg->yy_c_buf_p = yyg->yy_hold_char;
;
	ldy     #$12
	jsr     pushwidx
	lda     L1373
	sta     ptr1
	lda     L1373+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; if ( *yyg->yy_c_buf_p == 0 )
;
	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jne     L1386
;
; if ( yyg->yy_c_buf_p < &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars] )
;
	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     pushwidx
	lda     L1373
	ldx     L1373+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1373
	ldx     L1373+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1373
	ldx     L1373+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     tosicmp
	bcs     L1379
;
; *yyg->yy_c_buf_p = '\0';
;
	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; else
;
	jmp     L1386
;
; yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_r;
;
L1379:	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     pushwidx
	lda     L1373
	ldx     L1373+1
	ldy     #$28
	jsr     ldaxidx
	jsr     tossubax
	sta     L1380
	stx     L1380+1
;
; ++yyg->yy_c_buf_p;
;
	lda     L1373
	ldx     L1373+1
	jsr     pushax
	ldy     #$12
	jsr     ldaxidx
	jsr     incax1
	ldy     #$11
	jsr     staxspidx
;
; switch ( yy_get_next_buffer( yyscanner ) )
;
	jsr     pushw0sp
	jsr     _yy_get_next_buffer
;
; }
;
	cpx     #$00
	bne     L1386
	cmp     #$00
	beq     L139A
	cmp     #$01
	beq     L138D
	cmp     #$02
	bne     L1386
;
; yyrestart(yyg->yyin_r ,yyscanner);
;
	lda     L1373
	ldx     L1373+1
	ldy     #$03
	jsr     pushwidx
	ldy     #$05
	jsr     pushwysp
	jsr     _yyrestart
;
; return -1;
;
L138D:	ldx     #$FF
	txa
	jmp     incsp2
;
; yyg->yy_c_buf_p = yyg->yytext_r + offset;
;
L139A:	lda     L1373
	sta     sreg
	lda     L1373+1
	sta     sreg+1
	lda     L1373
	ldx     L1373+1
	ldy     #$28
	jsr     ldaxidx
	clc
	adc     L1380
	pha
	txa
	adc     L1380+1
	tax
	pla
	ldy     #$11
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; c = *(unsigned char *) yyg->yy_c_buf_p;
;
L1386:	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     L1372
	sty     L1372+1
;
; *yyg->yy_c_buf_p = '\0';
;
	lda     L1373
	ldx     L1373+1
	ldy     #$12
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yy_hold_char = *++yyg->yy_c_buf_p;
;
	lda     L1373
	ldx     L1373+1
	jsr     pushax
	lda     L1373
	ldx     L1373+1
	jsr     pushax
	ldy     #$12
	jsr     ldaxidx
	jsr     incax1
	ldy     #$11
	jsr     staxspidx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	jsr     staspidx
;
; if ( c == '\n' )
;
	lda     L1372+1
	bne     L13A8
	lda     L1372
	cmp     #$0D
	bne     L13A8
;
; do{ (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno)++;
;
	lda     L1373
	ldx     L1373+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1373
	ldx     L1373+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	ldy     #$11
	jsr     ldaxidx
	jsr     incax1
	ldy     #$10
	jsr     staxspidx
;
; (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_column)=0;
;
	lda     L1373
	ldx     L1373+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L1373
	ldx     L1373+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$12
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; return c;
;
L13A8:	lda     L1372
	ldx     L1372+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ yylex (__near__ union YYSTYPE*, __near__ void*)
; ---------------------------------------------------------------

.segment	"YYLEX"

.proc	_yylex: near

.segment	"BSS"

L0EC9:
	.res	2,$00
L0ECA:
	.res	2,$00
L0ECB:
	.res	2,$00
L0ECC:
	.res	2,$00
L0ECD:
	.res	2,$00
L0F02:
	.res	1,$00
L0F3C:
	.res	2,$00
L10C4:
	.res	2,$00
L10FF:
	.res	2,$00
L114B:
	.res	2,$00
L1181:
	.res	2,$00
L1197:
	.res	2,$00

.segment	"YYLEX"

;
; struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
;
	jsr     ldax0sp
	sta     L0ECD
	stx     L0ECD+1
;
; yyg->yylval_r = yylval_param;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$2D
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; if ( !yyg->yy_init )
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$14
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	jne     L0ED1
;
; yyg->yy_init = 1;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     #$01
	ldy     #$13
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; if ( ! yyg->yy_start )
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$16
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L0ED5
;
; yyg->yy_start = 1;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     #$01
	ldy     #$15
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; if ( ! yyg->yyin_r )
;
L0ED5:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$03
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L0ED9
;
; yyg->yyin_r = stdin;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     _stdin
	ldy     #$02
	sta     (ptr1),y
	iny
	lda     _stdin+1
	sta     (ptr1),y
;
; if ( ! yyg->yyout_r )
;
L0ED9:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$05
	jsr     ldaxidx
	stx     tmp1
	ora     tmp1
	bne     L0EDD
;
; yyg->yyout_r = stdout;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     _stdout
	ldy     #$04
	sta     (ptr1),y
	iny
	lda     _stdout+1
	sta     (ptr1),y
;
; if ( ! ( yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : 0) ) {
;
L0EDD:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L0EE4
	lda     L0ECD
	ldx     L0ECD+1
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	jmp     L0EE7
L0EE4:	tax
L0EE7:	jsr     bnegax
	beq     L0EE1
;
; yyensure_buffer_stack (yyscanner);
;
	jsr     pushw0sp
	jsr     _yyensure_buffer_stack
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] =
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
;
; yy_create_buffer(yyg->yyin_r,16384 ,yyscanner);
;
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$03
	jsr     pushwidx
	ldx     #$40
	lda     #$00
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	jsr     _yy_create_buffer
	ldy     #$00
	jsr     staxspidx
;
; yy_load_buffer_state(yyscanner );
;
L0EE1:	jsr     pushw0sp
	jsr     _yy_load_buffer_state
;
; yy_cp = yyg->yy_c_buf_p;
;
L0ED1:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$12
	jsr     ldaxidx
	sta     L0ECA
	stx     L0ECA+1
;
; *yy_cp = yyg->yy_hold_char;
;
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; yy_bp = yy_cp;
;
	lda     L0ECA
	sta     L0ECB
	lda     L0ECA+1
	sta     L0ECB+1
;
; yy_current_state = yyg->yy_start;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$16
	jsr     ldaxidx
	sta     L0EC9
	stx     L0EC9+1
;
; YY_CHAR yy_c = yy_ec[((unsigned int) (unsigned char) *yy_cp)] ;
;
L0EFE:	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	tya
	clc
	adc     #>(_yy_ec)
	sta     ptr1+1
	ldy     #<(_yy_ec)
	lda     (ptr1),y
	sta     L0F02
;
; if ( yy_accept[yy_current_state] )
;
	lda     L0EC9
	ldx     L0EC9+1
	jsr     aslax1
	clc
	adc     #<(_yy_accept)
	sta     ptr1
	txa
	adc     #>(_yy_accept)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L0F06
;
; yyg->yy_last_accepting_state = yy_current_state;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0EC9
	ldy     #$1F
	sta     (ptr1),y
	iny
	lda     L0EC9+1
	sta     (ptr1),y
;
; yyg->yy_last_accepting_cpos = yy_cp;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	iny
	sta     (ptr1),y
	iny
	lda     L0ECA+1
	sta     (ptr1),y
;
; while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
;
L0F06:	lda     L0EC9
	ldx     L0EC9+1
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	clc
	adc     L0F02
	bcc     L169B
	inx
L169B:	jsr     aslax1
	clc
	adc     #<(_yy_chk)
	tay
	txa
	adc     #>(_yy_chk)
	tax
	tya
	jsr     ldaxi
	cpx     L0EC9+1
	bne     L16A0
	cmp     L0EC9
	beq     L0F0E
;
; yy_current_state = (int) yy_def[yy_current_state];
;
L16A0:	lda     L0EC9
	ldx     L0EC9+1
	jsr     aslax1
	clc
	adc     #<(_yy_def)
	tay
	txa
	adc     #>(_yy_def)
	tax
	tya
	jsr     ldaxi
	sta     L0EC9
	stx     L0EC9+1
;
; if ( yy_current_state >= 435 )
;
	cmp     #$B3
	txa
	sbc     #$01
	bvs     L0F17
	eor     #$80
L0F17:	bpl     L0F06
;
; yy_c = yy_meta[(unsigned int) yy_c];
;
	lda     L0F02
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_yy_meta)
	sta     ptr1+1
	ldy     #<(_yy_meta)
	lda     (ptr1),y
	sta     L0F02
;
; }
;
	jmp     L0F06
;
; yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
;
L0F0E:	lda     L0EC9
	ldx     L0EC9+1
	jsr     aslax1
	clc
	adc     #<(_yy_base)
	tay
	txa
	adc     #>(_yy_base)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     L0F02
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L169F
	inx
L169F:	jsr     aslax1
	clc
	adc     #<(_yy_nxt)
	tay
	txa
	adc     #>(_yy_nxt)
	tax
	tya
	jsr     ldaxi
	sta     L0EC9
	stx     L0EC9+1
;
; ++yy_cp;
;
	inc     L0ECA
	bne     L0F20
	inc     L0ECA+1
;
; while ( yy_current_state != 434 );
;
L0F20:	lda     L0EC9+1
	cmp     #$01
	jne     L0EFE
	lda     L0EC9
	cmp     #$B2
	jne     L0EFE
;
; yy_cp = yyg->yy_last_accepting_cpos;
;
L16AC:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$22
	jsr     ldaxidx
	sta     L0ECA
	stx     L0ECA+1
;
; yy_current_state = yyg->yy_last_accepting_state;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$20
	jsr     ldaxidx
	sta     L0EC9
	stx     L0EC9+1
;
; yy_act = yy_accept[yy_current_state];
;
L0F27:	lda     L0EC9
	ldx     L0EC9+1
	jsr     aslax1
	clc
	adc     #<(_yy_accept)
	tay
	txa
	adc     #>(_yy_accept)
	tax
	tya
	jsr     ldaxi
	sta     L0ECC
	stx     L0ECC+1
;
; yyg->yytext_r = yy_bp; yyg->yyleng_r = (size_t) (yy_cp - yy_bp); yyg->yy_hold_char = *yy_cp; *yy_cp = '\0'; yyg->yy_c_buf_p = yy_cp;;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECB
	ldy     #$27
	sta     (ptr1),y
	iny
	lda     L0ECB+1
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	sec
	sbc     L0ECB
	pha
	lda     L0ECA+1
	sbc     L0ECB+1
	tax
	pla
	ldy     #$0F
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	jsr     staspidx
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	ldy     #$11
	sta     (ptr1),y
	iny
	lda     L0ECA+1
	sta     (ptr1),y
;
; if ( yy_act != 117 && yy_rule_can_match_eol[yy_act] )
;
	lda     L0ECC+1
	bne     L16A1
	lda     L0ECC
	cmp     #$75
	jeq     L0F3E
L16A1:	lda     L0ECC
	ldx     L0ECC+1
	jsr     aslax2
	clc
	adc     #<(_yy_rule_can_match_eol)
	tay
	txa
	adc     #>(_yy_rule_can_match_eol)
	tax
	tya
	jsr     ldeaxi
	jsr     tsteax
	jeq     L0F3E
;
; for ( yyl = 0; yyl < yyg->yyleng_r; ++yyl )
;
	lda     #$00
	sta     L0F3C
	sta     L0F3C+1
L0F3D:	lda     L0F3C
	ldx     L0F3C+1
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$10
	jsr     ldaxidx
	jsr     tosicmp
	jcs     L0F3E
;
; if ( yyg->yytext_r[yyl] == '\n' )
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	clc
	adc     L0F3C
	sta     ptr1
	txa
	adc     L0F3C+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0D
	bne     L0F3F
;
; do{ (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno)++;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	ldy     #$11
	jsr     ldaxidx
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$10
	jsr     staxspidx
;
; (yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_column)=0;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$12
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for ( yyl = 0; yyl < yyg->yyleng_r; ++yyl )
;
L0F3F:	inc     L0F3C
	jne     L0F3D
	inc     L0F3C+1
	jmp     L0F3D
;
; switch ( yy_act )
;
L0F3E:	lda     L0ECC
	ldx     L0ECC+1
;
; }
;
	cpx     #$00
	jne     L11DF
	cmp     #$00
	jeq     L0F59
	cmp     #$01
	jeq     L0F61
	cmp     #$02
	jeq     L0F64
	cmp     #$03
	jeq     L0F67
	cmp     #$04
	jeq     L0F6C
	cmp     #$05
	jeq     L0F71
	cmp     #$06
	jeq     L0F76
	cmp     #$07
	jeq     L0F7B
	cmp     #$08
	jeq     L0F80
	cmp     #$09
	jeq     L0F85
	cmp     #$0A
	jeq     L0F88
	cmp     #$0B
	jeq     L0F8B
	cmp     #$0C
	jeq     L0F8E
	cmp     #$0D
	jeq     L0F91
	cmp     #$0E
	jeq     L0F94
	cmp     #$0F
	jeq     L0F97
	cmp     #$10
	jeq     L0F9A
	cmp     #$11
	jeq     L0F9D
	cmp     #$12
	jeq     L0FA0
	cmp     #$13
	jeq     L0FA3
	cmp     #$14
	jeq     L0FA6
	cmp     #$15
	jeq     L0FA9
	cmp     #$16
	jeq     L0FAC
	cmp     #$17
	jeq     L0FAF
	cmp     #$18
	jeq     L0FB2
	cmp     #$19
	jeq     L0FB5
	cmp     #$1A
	jeq     L0FB8
	cmp     #$1B
	jeq     L0FBB
	cmp     #$1C
	jeq     L0FBE
	cmp     #$1D
	jeq     L0FC1
	cmp     #$1E
	jeq     L0FC4
	cmp     #$1F
	jeq     L0FC7
	cmp     #$20
	jeq     L0FCA
	cmp     #$21
	jeq     L0FCD
	cmp     #$22
	jeq     L0FD0
	cmp     #$23
	jeq     L0FD3
	cmp     #$24
	jeq     L0FD6
	cmp     #$25
	jeq     L0FD9
	cmp     #$26
	jeq     L0FDC
	cmp     #$27
	jeq     L0FDF
	cmp     #$28
	jeq     L0FE2
	cmp     #$29
	jeq     L0FE5
	cmp     #$2A
	jeq     L0FE8
	cmp     #$2B
	jeq     L0FEB
	cmp     #$2C
	jeq     L0FEE
	cmp     #$2D
	jeq     L0FF1
	cmp     #$2E
	jeq     L0FF4
	cmp     #$2F
	jeq     L0FF7
	cmp     #$30
	jeq     L0FFA
	cmp     #$31
	jeq     L0FFD
	cmp     #$32
	jeq     L1000
	cmp     #$33
	jeq     L1003
	cmp     #$34
	jeq     L1006
	cmp     #$35
	jeq     L1009
	cmp     #$36
	jeq     L100C
	cmp     #$37
	jeq     L100F
	cmp     #$38
	jeq     L1012
	cmp     #$39
	jeq     L1015
	cmp     #$3A
	jeq     L1018
	cmp     #$3B
	jeq     L101B
	cmp     #$3C
	jeq     L101E
	cmp     #$3D
	jeq     L1021
	cmp     #$3E
	jeq     L1024
	cmp     #$3F
	jeq     L1027
	cmp     #$40
	jeq     L102A
	cmp     #$41
	jeq     L102D
	cmp     #$42
	jeq     L1030
	cmp     #$43
	jeq     L1033
	cmp     #$44
	jeq     L1036
	cmp     #$45
	jeq     L1039
	cmp     #$46
	jeq     L103C
	cmp     #$47
	jeq     L103F
	cmp     #$48
	jeq     L1042
	cmp     #$49
	jeq     L1045
	cmp     #$4A
	jeq     L1048
	cmp     #$4B
	jeq     L104B
	cmp     #$4C
	jeq     L104E
	cmp     #$4D
	jeq     L1051
	cmp     #$4E
	jeq     L1054
	cmp     #$4F
	jeq     L1057
	cmp     #$50
	jeq     L105A
	cmp     #$51
	jeq     L105D
	cmp     #$52
	jeq     L1060
	cmp     #$53
	jeq     L1063
	cmp     #$54
	jeq     L1066
	cmp     #$55
	jeq     L1069
	cmp     #$56
	jeq     L106C
	cmp     #$57
	jeq     L106F
	cmp     #$58
	jeq     L1072
	cmp     #$59
	jeq     L1075
	cmp     #$5A
	jeq     L1078
	cmp     #$5B
	jeq     L107B
	cmp     #$5C
	jeq     L107E
	cmp     #$5D
	jeq     L1083
	cmp     #$5E
	jeq     L1088
	cmp     #$5F
	jeq     L108D
	cmp     #$60
	jeq     L1092
	cmp     #$61
	jeq     L1097
	cmp     #$62
	jeq     L109C
	cmp     #$63
	jeq     L10A1
	cmp     #$64
	jeq     L10A5
	cmp     #$65
	jeq     L10AF
	cmp     #$66
	jeq     L10BE
	cmp     #$67
	jeq     L10EA
	cmp     #$68
	jeq     L10F9
	cmp     #$69
	jeq     L1125
	cmp     #$6A
	jeq     L112B
	cmp     #$6B
	jeq     L112B
	cmp     #$6C
	jeq     L112B
	cmp     #$6D
	jeq     L112B
	cmp     #$6E
	jeq     L112B
	cmp     #$6F
	jeq     L1139
	cmp     #$70
	jeq     L1145
	cmp     #$71
	jeq     L0ED1
	cmp     #$72
	jeq     L0ED1
	cmp     #$73
	jeq     L0ED1
	cmp     #$74
	jeq     L1177
	cmp     #$75
	jeq     L1180
	cmp     #$76
	jeq     L117D
	jmp     L11DF
;
; *yy_cp = yyg->yy_hold_char;
;
L0F59:	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; goto yy_find_action;
;
	jmp     L16AC
;
; { return ALL; }
;
L0F61:	inx
	lda     #$08
	jmp     incsp4
;
; { return AND; }
;
L0F64:	inx
	lda     #$04
	jmp     incsp4
;
; { yyg->yylval_r->intval = 1;return AMMSC; }
;
L0F67:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$01
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { yyg->yylval_r->intval = 2;return AMMSC; }
;
L0F6C:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$02
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { yyg->yylval_r->intval = 3;return AMMSC; }
;
L0F71:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$03
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { yyg->yylval_r->intval = 4;return AMMSC; }
;
L0F76:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$04
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { yyg->yylval_r->intval = 5;return AMMSC; }
;
L0F7B:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$05
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { yyg->yylval_r->intval = 6;return AMMSC; }
;
L0F80:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$06
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$69
	jmp     incsp4
;
; { return ANY; }
;
L0F85:	inx
	jmp     incsp4
;
; { return AS; }
;
L0F88:	inx
	jmp     incsp4
;
; { return ASC; }
;
L0F8B:	inx
	jmp     incsp4
;
; { return AUTHORIZATION; }
;
L0F8E:	inx
	jmp     incsp4
;
; { return BETWEEN; }
;
L0F91:	inx
	jmp     incsp4
;
; { return BY; }
;
L0F94:	inx
	jmp     incsp4
;
; { return CHARACTER; }
;
L0F97:	inx
	lda     #$10
	jmp     incsp4
;
; { return CHECK; }
;
L0F9A:	inx
	lda     #$11
	jmp     incsp4
;
; { return CLOSE; }
;
L0F9D:	inx
	lda     #$12
	jmp     incsp4
;
; { return COLLATE; }
;
L0FA0:	inx
	lda     #$02
	jmp     incsp4
;
; { return COMMAND; }
;
L0FA3:	inx
	lda     #$14
	jmp     incsp4
;
; { return COMMIT; }
;
L0FA6:	inx
	lda     #$13
	jmp     incsp4
;
; { return CONTINUE; }
;
L0FA9:	inx
	jmp     incsp4
;
; { return CONCAT; }
;
L0FAC:	inx
	jmp     incsp4
;
; { return CREATE; }
;
L0FAF:	inx
	jmp     incsp4
;
; { return CURRENT; }
;
L0FB2:	inx
	jmp     incsp4
;
; { return CURSOR; }
;
L0FB5:	inx
	jmp     incsp4
;
; { return DESIMAL; }
;
L0FB8:	inx
	jmp     incsp4
;
; { return DECLARE; }
;
L0FBB:	inx
	jmp     incsp4
;
; { return DEFAULT; }
;
L0FBE:	inx
	jmp     incsp4
;
; { return DELEET; }
;
L0FC1:	inx
	jmp     incsp4
;
; { return DESC; }
;
L0FC4:	inx
	jmp     incsp4
;
; { return DISTINCT; }
;
L0FC7:	inx
	jmp     incsp4
;
; { return DUBBLE; }
;
L0FCA:	inx
	jmp     incsp4
;
; { return ESCAPE; }
;
L0FCD:	inx
	lda     #$24
	jmp     incsp4
;
; { return EXISTS; }
;
L0FD0:	inx
	lda     #$25
	jmp     incsp4
;
; { return FETCH; }
;
L0FD3:	inx
	lda     #$26
	jmp     incsp4
;
; { return FLOWT; }
;
L0FD6:	inx
	lda     #$27
	jmp     incsp4
;
; { return FOR; }
;
L0FD9:	inx
	lda     #$28
	jmp     incsp4
;
; { return FOREIGN; }
;
L0FDC:	inx
	lda     #$29
	jmp     incsp4
;
; { return FOUND; }
;
L0FDF:	inx
	lda     #$2A
	jmp     incsp4
;
; { return FROM; }
;
L0FE2:	inx
	lda     #$2B
	jmp     incsp4
;
; { return GOTO; }
;
L0FE5:	inx
	lda     #$2C
	jmp     incsp4
;
; { return GRANT; }
;
L0FE8:	inx
	lda     #$2D
	jmp     incsp4
;
; { return GROUP; }
;
L0FEB:	inx
	lda     #$2E
	jmp     incsp4
;
; { return HAVING; }
;
L0FEE:	inx
	lda     #$2F
	jmp     incsp4
;
; { return INN; }
;
L0FF1:	inx
	lda     #$30
	jmp     incsp4
;
; { return INDICATOR; }
;
L0FF4:	inx
	lda     #$31
	jmp     incsp4
;
; { return INSERT; }
;
L0FF7:	inx
	lda     #$32
	jmp     incsp4
;
; { return INTEGER; }
;
L0FFA:	inx
	lda     #$33
	jmp     incsp4
;
; { return INTO; }
;
L0FFD:	inx
	lda     #$34
	jmp     incsp4
;
; { return IS; }
;
L1000:	inx
	lda     #$35
	jmp     incsp4
;
; { return JOIN; }
;
L1003:	inx
	lda     #$36
	jmp     incsp4
;
; { return KEY; }
;
L1006:	inx
	lda     #$37
	jmp     incsp4
;
; { return LANGUAGE; }
;
L1009:	inx
	lda     #$38
	jmp     incsp4
;
; { return LEFT; }
;
L100C:	inx
	lda     #$39
	jmp     incsp4
;
; { return LIKE; }
;
L100F:	inx
	lda     #$3A
	jmp     incsp4
;
; { return NOT; }
;
L1012:	inx
	lda     #$05
	jmp     incsp4
;
; { return NULLX; }
;
L1015:	inx
	lda     #$3C
	jmp     incsp4
;
; { return NUMERIC; }
;
L1018:	inx
	lda     #$3D
	jmp     incsp4
;
; { return OF; }
;
L101B:	inx
	lda     #$3E
	jmp     incsp4
;
; { return ON; }
;
L101E:	inx
	lda     #$3F
	jmp     incsp4
;
; { return OPEN; }
;
L1021:	inx
	lda     #$40
	jmp     incsp4
;
; { return OPTION; }
;
L1024:	inx
	lda     #$41
	jmp     incsp4
;
; { return OR; }
;
L1027:	inx
	lda     #$03
	jmp     incsp4
;
; { return ORDER; }
;
L102A:	inx
	lda     #$42
	jmp     incsp4
;
; { return PARAMS; }
;
L102D:	inx
	lda     #$43
	jmp     incsp4
;
; { return PRECISION; }
;
L1030:	inx
	lda     #$45
	jmp     incsp4
;
; { return PRIMARY; }
;
L1033:	inx
	lda     #$46
	jmp     incsp4
;
; { return PRIVILEGES; }
;
L1036:	inx
	lda     #$47
	jmp     incsp4
;
; { return PROCEDURE; }
;
L1039:	inx
	lda     #$48
	jmp     incsp4
;
; { return PUBLIK; }
;
L103C:	inx
	lda     #$49
	jmp     incsp4
;
; { return REAL; }
;
L103F:	inx
	lda     #$4A
	jmp     incsp4
;
; { return REFERENCES; }
;
L1042:	inx
	lda     #$4B
	jmp     incsp4
;
; { return ROLLBACK; }
;
L1045:	inx
	lda     #$4C
	jmp     incsp4
;
; { return SCHEMA; }
;
L1048:	inx
	lda     #$4D
	jmp     incsp4
;
; { return SELECT; }
;
L104B:	inx
	lda     #$4E
	jmp     incsp4
;
; { return SET; }
;
L104E:	inx
	lda     #$4F
	jmp     incsp4
;
; { return SMALLINT; }
;
L1051:	inx
	lda     #$50
	jmp     incsp4
;
; { return SOME; }
;
L1054:	inx
	lda     #$51
	jmp     incsp4
;
; { return SQLCODE; }
;
L1057:	inx
	lda     #$52
	jmp     incsp4
;
; { return TABLE; }
;
L105A:	inx
	lda     #$54
	jmp     incsp4
;
; { return TO; }
;
L105D:	inx
	lda     #$56
	jmp     incsp4
;
; { return UNION; }
;
L1060:	inx
	lda     #$57
	jmp     incsp4
;
; { return UNIQUE; }
;
L1063:	inx
	lda     #$58
	jmp     incsp4
;
; { return UPDATE; }
;
L1066:	inx
	lda     #$59
	jmp     incsp4
;
; { return USER; }
;
L1069:	inx
	lda     #$5A
	jmp     incsp4
;
; { return VALUES; }
;
L106C:	inx
	lda     #$5B
	jmp     incsp4
;
; { return VIEW; }
;
L106F:	inx
	lda     #$5C
	jmp     incsp4
;
; { return WHENEVER; }
;
L1072:	inx
	lda     #$5E
	jmp     incsp4
;
; { return WHERE; }
;
L1075:	inx
	lda     #$5F
	jmp     incsp4
;
; { return WITH; }
;
L1078:	inx
	lda     #$60
	jmp     incsp4
;
; { return WORK; }
;
L107B:	inx
	lda     #$61
	jmp     incsp4
;
; { yyg->yylval_r->intval = 0;return COMPARISON; }
;
L107E:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	tay
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 1;return COMPARISON; }
;
L1083:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$01
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 1;return COMPARISON; }
;
L1088:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$01
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 2;return COMPARISON; }
;
L108D:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$02
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 3;return COMPARISON; }
;
L1092:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$03
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 4;return COMPARISON; }
;
L1097:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$04
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { yyg->yylval_r->intval = 5;return COMPARISON; }
;
L109C:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$05
	ldy     #$00
	jsr     steaxspidx
	ldx     #$01
	lda     #$06
	jmp     incsp4
;
; { return yyg->yytext_r[0]; }
;
L10A1:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldx     #$00
	jmp     incsp4
;
; yyg->yylval_r->strval = 0;
;
L10A5:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; d_sprintf(&(yyg->yylval_r->strval), "_%s", yyg->yytext_r);
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	ldy     #$06
	jsr     _d_sprintf
;
; return NAME;
;
	ldx     #$01
	lda     #$6A
	jmp     incsp4
;
; yyg->yytext_r[0] = '_';
;
L10AF:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$AF
	ldy     #$00
	sta     (ptr1),y
;
; yyg->yytext_r[strlen(yyg->yytext_r)-1] = '\0';
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     _strlen
	jsr     decax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yylval_r->strval = strReplace("\"\"", "\"", yyg->yytext_r);
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     #<(L0001+4)
	ldx     #>(L0001+4)
	jsr     pushax
	lda     #<(L0001+7)
	ldx     #>(L0001+7)
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	jsr     _strReplace
	ldy     #$00
	jsr     staxspidx
;
; return NAME;
;
	ldx     #$01
	lda     #$6A
	jmp     incsp4
;
; *yy_cp = yyg->yy_hold_char;
;
L10BE:	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; do { const char *p; for ( p = yy_cp-1; (unsigned)p >= (unsigned)(yy_cp - 1); --p) if ( *p == '\n' ) --(yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno); }while(0);
;
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	sta     L10C4
	stx     L10C4+1
L10C5:	lda     L10C4
	ldx     L10C4+1
	jsr     pushax
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	jsr     tosicmp
	bcc     L10C6
	lda     L10C4
	sta     ptr1
	lda     L10C4+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0D
	bne     L10C7
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	ldy     #$11
	jsr     ldaxidx
	jsr     decax1
	ldy     #$10
	jsr     staxspidx
L10C7:	lda     L10C4
	sec
	sbc     #$01
	sta     L10C4
	bcs     L10C5
	dec     L10C4+1
	jmp     L10C5
;
; yyg->yy_c_buf_p = yy_cp -= 1;
;
L10C6:	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sec
	sbc     #$01
	sta     L0ECA
	bcs     L10D8
	dec     L0ECA+1
L10D8:	ldx     L0ECA+1
	ldy     #$11
	jsr     staxspidx
;
; yyg->yytext_r = yy_bp; yyg->yyleng_r = (size_t) (yy_cp - yy_bp); yyg->yy_hold_char = *yy_cp; *yy_cp = '\0'; yyg->yy_c_buf_p = yy_cp;;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECB
	ldy     #$27
	sta     (ptr1),y
	iny
	lda     L0ECB+1
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	sec
	sbc     L0ECB
	pha
	lda     L0ECA+1
	sbc     L0ECB+1
	tax
	pla
	ldy     #$0F
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	jsr     staspidx
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	ldy     #$11
	sta     (ptr1),y
	iny
	lda     L0ECA+1
	sta     (ptr1),y
;
; { yyerror2((yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno), yyg->yytext_r); }
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	jsr     tosaddax
	jsr     ldaxi
	ldy     #$11
	jsr     ldaxidx
	jsr     axlong
	jsr     pusheax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	jsr     _yyerror2
;
; break;
;
	jmp     L0ED1
;
; yyg->yytext_r[0] = '_';
;
L10EA:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	lda     #$AF
	ldy     #$00
	sta     (ptr1),y
;
; yyg->yytext_r[strlen(yyg->yytext_r)-1] = '\0';
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     _strlen
	jsr     decax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yylval_r->strval = strReplace("]]", "]", yyg->yytext_r);
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     #<(L0001+9)
	ldx     #>(L0001+9)
	jsr     pushax
	lda     #<(L0001+12)
	ldx     #>(L0001+12)
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	jsr     _strReplace
	ldy     #$00
	jsr     staxspidx
;
; return NAME;
;
	ldx     #$01
	lda     #$6A
	jmp     incsp4
;
; *yy_cp = yyg->yy_hold_char;
;
L10F9:	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; do { const char *p; for ( p = yy_cp-1; (unsigned)p >= (unsigned)(yy_cp - 1); --p) if ( *p == '\n' ) --(yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno); }while(0);
;
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	sta     L10FF
	stx     L10FF+1
L1100:	lda     L10FF
	ldx     L10FF+1
	jsr     pushax
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	jsr     tosicmp
	bcc     L1101
	lda     L10FF
	sta     ptr1
	lda     L10FF+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0D
	bne     L1102
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	ldy     #$11
	jsr     ldaxidx
	jsr     decax1
	ldy     #$10
	jsr     staxspidx
L1102:	lda     L10FF
	sec
	sbc     #$01
	sta     L10FF
	bcs     L1100
	dec     L10FF+1
	jmp     L1100
;
; yyg->yy_c_buf_p = yy_cp -= 1;
;
L1101:	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sec
	sbc     #$01
	sta     L0ECA
	bcs     L1113
	dec     L0ECA+1
L1113:	ldx     L0ECA+1
	ldy     #$11
	jsr     staxspidx
;
; yyg->yytext_r = yy_bp; yyg->yyleng_r = (size_t) (yy_cp - yy_bp); yyg->yy_hold_char = *yy_cp; *yy_cp = '\0'; yyg->yy_c_buf_p = yy_cp;;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECB
	ldy     #$27
	sta     (ptr1),y
	iny
	lda     L0ECB+1
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	sec
	sbc     L0ECB
	pha
	lda     L0ECA+1
	sbc     L0ECB+1
	tax
	pla
	ldy     #$0F
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	jsr     staspidx
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	ldy     #$11
	sta     (ptr1),y
	iny
	lda     L0ECA+1
	sta     (ptr1),y
;
; { yyerror2((yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno), yyg->yytext_r); }
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	jsr     tosaddax
	jsr     ldaxi
	ldy     #$11
	jsr     ldaxidx
	jsr     axlong
	jsr     pusheax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	jsr     _yyerror2
;
; break;
;
	jmp     L0ED1
;
; yyg->yylval_r->strval = strdup(yyg->yytext_r);
;
L1125:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     _strdup
	ldy     #$00
	jsr     staxspidx
;
; return STRING;
;
	ldx     #$01
	lda     #$6B
	jmp     incsp4
;
; yyg->yylval_r->strval = strdup(yyg->yytext_r);
;
L112B:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     _strdup
	ldy     #$00
	jsr     staxspidx
;
; return STRING;
;
	ldx     #$01
	lda     #$6B
	jmp     incsp4
;
; yyg->yytext_r[strlen(yyg->yytext_r)-1] = '\0';
;
L1139:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     _strlen
	jsr     decax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; yyg->yylval_r->strval = strReplace("''", "'", yyg->yytext_r+1);
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$2E
	jsr     pushwidx
	lda     #<(L0001+14)
	ldx     #>(L0001+14)
	jsr     pushax
	lda     #<(L0001+17)
	ldx     #>(L0001+17)
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     incax1
	jsr     pushax
	jsr     _strReplace
	ldy     #$00
	jsr     staxspidx
;
; return STRING;
;
	ldx     #$01
	lda     #$6B
	jmp     incsp4
;
; *yy_cp = yyg->yy_hold_char;
;
L1145:	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; do { const char *p; for ( p = yy_cp-1; (unsigned)p >= (unsigned)(yy_cp - 1); --p) if ( *p == '\n' ) --(yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno); }while(0);
;
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	sta     L114B
	stx     L114B+1
L114C:	lda     L114B
	ldx     L114B+1
	jsr     pushax
	lda     L0ECA
	ldx     L0ECA+1
	jsr     decax1
	jsr     tosicmp
	bcc     L114D
	lda     L114B
	sta     ptr1
	lda     L114B+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0D
	bne     L114E
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     pushw
	ldy     #$11
	jsr     ldaxidx
	jsr     decax1
	ldy     #$10
	jsr     staxspidx
L114E:	lda     L114B
	sec
	sbc     #$01
	sta     L114B
	bcs     L114C
	dec     L114B+1
	jmp     L114C
;
; yyg->yy_c_buf_p = yy_cp -= 1;
;
L114D:	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sec
	sbc     #$01
	sta     L0ECA
	bcs     L115F
	dec     L0ECA+1
L115F:	ldx     L0ECA+1
	ldy     #$11
	jsr     staxspidx
;
; yyg->yytext_r = yy_bp; yyg->yyleng_r = (size_t) (yy_cp - yy_bp); yyg->yy_hold_char = *yy_cp; *yy_cp = '\0'; yyg->yy_c_buf_p = yy_cp;;
;
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECB
	ldy     #$27
	sta     (ptr1),y
	iny
	lda     L0ECB+1
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	sec
	sbc     L0ECB
	pha
	lda     L0ECA+1
	sbc     L0ECB+1
	tax
	pla
	ldy     #$0F
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	jsr     staspidx
	lda     L0ECA
	sta     ptr1
	lda     L0ECA+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	lda     L0ECA
	ldy     #$11
	sta     (ptr1),y
	iny
	lda     L0ECA+1
	sta     (ptr1),y
;
; { yyerror2((yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_bs_lineno), yyg->yytext_r); }
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	jsr     tosaddax
	jsr     ldaxi
	ldy     #$11
	jsr     ldaxidx
	jsr     axlong
	jsr     pusheax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     pushwidx
	jsr     _yyerror2
;
; break;
;
	jmp     L0ED1
;
; yy_fatal_error( "flex scanner jammed" , yyscanner);
;
L1177:	lda     #<(L0001+19)
	ldx     #>(L0001+19)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_fatal_error
;
; break;
;
	jmp     L0ED1
;
; return 0;
;
L117D:	txa
	jmp     incsp4
;
; int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_r) - 1;
;
L1180:	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	jsr     tossubax
	jsr     decax1
	sta     L1181
	stx     L1181+1
;
; *yy_cp = yyg->yy_hold_char;
;
	lda     L0ECA
	ldx     L0ECA+1
	jsr     pushax
	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; if ( yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buffer_status == 0 )
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$17
	jsr     ldaxidx
	cpx     #$00
	jne     L1186
	cmp     #$00
	jne     L1186
;
; yyg->yy_n_chars = yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_n_chars;
;
	lda     L0ECD
	sta     ptr2
	lda     L0ECD+1
	sta     ptr2+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$09
	jsr     ldaxidx
	ldy     #$0D
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_input_file = yyg->yyin_r;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$03
	jsr     ldaxidx
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_buffer_status = 1;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$16
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; if ( yyg->yy_c_buf_p <= &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars] )
;
L1186:	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$12
	jsr     pushwidx
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     tosicmp
	beq     L169E
	jcs     L1193
;
; yyg->yy_c_buf_p = yyg->yytext_r + yy_amount_of_matched_text;
;
L169E:	lda     L0ECD
	sta     sreg
	lda     L0ECD+1
	sta     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	clc
	adc     L1181
	pha
	txa
	adc     L1181+1
	tax
	pla
	ldy     #$11
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yy_current_state = yy_get_previous_state( yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_get_previous_state
	sta     L0EC9
	stx     L0EC9+1
;
; yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
;
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yy_try_NUL_trans
	sta     L1197
	stx     L1197+1
;
; yy_bp = yyg->yytext_r + 0;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     L0ECB
	stx     L0ECB+1
;
; if ( yy_next_state )
;
	lda     L1197
	ora     L1197+1
	jeq     L16AC
;
; yy_cp = ++yyg->yy_c_buf_p;
;
	lda     L0ECD
	ldx     L0ECD+1
	jsr     pushax
	ldy     #$12
	jsr     ldaxidx
	jsr     incax1
	ldy     #$11
	jsr     staxspidx
	sta     L0ECA
	stx     L0ECA+1
;
; yy_current_state = yy_next_state;
;
	lda     L1197
	sta     L0EC9
	lda     L1197+1
	sta     L0EC9+1
;
; goto yy_match;
;
	jmp     L0EFE
;
; else switch ( yy_get_next_buffer( yyscanner ) )
;
L1193:	jsr     pushw0sp
	jsr     _yy_get_next_buffer
;
; }
;
	cpx     #$00
	jne     L0ED1
	cmp     #$00
	beq     L11C8
	cmp     #$01
	beq     L11B4
	cmp     #$02
	jeq     L11D3
	jmp     L0ED1
;
; yyg->yy_did_buffer_switch_on_eof = 0;
;
L11B4:	lda     L0ECD
	sta     ptr1
	lda     L0ECD+1
	sta     ptr1+1
	txa
	ldy     #$17
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; yyg->yy_c_buf_p = yyg->yytext_r + 0;
;
	lda     L0ECD
	sta     sreg
	lda     L0ECD+1
	sta     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	ldy     #$11
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yy_act = (117 + ((yyg->yy_start - 1) / 2) + 1);
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$16
	jsr     ldaxidx
	jsr     decax1
	jsr     asrax1
	ldy     #$75
	jsr     incaxy
	jsr     incax1
	sta     L0ECC
	stx     L0ECC+1
;
; goto do_action;
;
	jmp     L0F3E
;
; yyg->yy_c_buf_p =
;
L11C8:	lda     L0ECD
;
; yyg->yytext_r + yy_amount_of_matched_text;
;
	sta     sreg
;
; yyg->yy_c_buf_p =
;
	lda     L0ECD+1
;
; yyg->yytext_r + yy_amount_of_matched_text;
;
	sta     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	clc
	adc     L1181
	pha
	txa
	adc     L1181+1
	tax
	pla
	ldy     #$11
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; yy_current_state = yy_get_previous_state( yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_get_previous_state
	sta     L0EC9
	stx     L0EC9+1
;
; yy_cp = yyg->yy_c_buf_p;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$12
	jsr     ldaxidx
	sta     L0ECA
	stx     L0ECA+1
;
; yy_bp = yyg->yytext_r + 0;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     L0ECB
	stx     L0ECB+1
;
; goto yy_match;
;
	jmp     L0EFE
;
; yyg->yy_c_buf_p =
;
L11D3:	lda     L0ECD
;
; &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars];
;
	sta     ptr2
;
; yyg->yy_c_buf_p =
;
	lda     L0ECD+1
;
; &yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]->yy_ch_buf[yyg->yy_n_chars];
;
	sta     ptr2+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0B
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$07
	jsr     ldaxidx
	jsr     aslax1
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	jsr     ldaxi
	ldy     #$03
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$0E
	jsr     ldaxidx
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$11
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; yy_current_state = yy_get_previous_state( yyscanner );
;
	jsr     pushw0sp
	jsr     _yy_get_previous_state
	sta     L0EC9
	stx     L0EC9+1
;
; yy_cp = yyg->yy_c_buf_p;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$12
	jsr     ldaxidx
	sta     L0ECA
	stx     L0ECA+1
;
; yy_bp = yyg->yytext_r + 0;
;
	lda     L0ECD
	ldx     L0ECD+1
	ldy     #$28
	jsr     ldaxidx
	sta     L0ECB
	stx     L0ECB+1
;
; goto yy_find_action;
;
	jmp     L0F27
;
; yy_fatal_error( "fatal flex scanner internal error--no action found" , yyscanner)
;
L11DF:	lda     #<(L0001+39)
	ldx     #>(L0001+39)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
;
; ;
;
	jsr     _yy_fatal_error
;
; }
;
	jmp     L0ED1

.endproc

