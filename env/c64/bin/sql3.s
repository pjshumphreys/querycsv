;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.import		_stderr
	.import		_fputs
	.import		_malloc
	.import		_free
	.import		_stricmp
	.import		_parse_orderingSpec
	.import		_parse_scalarExpColumnRef
	.import		_parse_columnRefUnsuccessful
	.import		_parse_tableFactor
	.import		_readParams
	.import		_parse_whereClause
	.import		_parse_groupingSpec
	.import		_parse_scalarExp
	.import		_parse_inPredicate
	.import		_parse_functionRef
	.import		_parse_atomCommaList
	.import		_parse_expCommaList
	.import		_parse_functionRefStar
	.import		_parse_scalarExpLiteral
	.import		_yyerror
	.import		_runCommand
	.export		_yyparse
	.import		_yylex

.segment	"RODATA"

_yytranslate:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$0A
	.byte	$08
	.byte	$74
	.byte	$09
	.byte	$77
	.byte	$0B
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$73
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
_yytname:
	.addr	L0001
	.addr	L0001+5
	.addr	L0001+11
	.addr	L0001+22
	.addr	L0001+30
	.addr	L0001+33
	.addr	L0001+37
	.addr	L0001+41
	.addr	L0001+52
	.addr	L0001+56
	.addr	L0001+60
	.addr	L0001+64
	.addr	L0001+68
	.addr	L0001+75
	.addr	L0001+79
	.addr	L0001+83
	.addr	L0001+86
	.addr	L0001+90
	.addr	L0001+104
	.addr	L0001+112
	.addr	L0001+115
	.addr	L0001+120
	.addr	L0001+130
	.addr	L0001+136
	.addr	L0001+142
	.addr	L0001+149
	.addr	L0001+157
	.addr	L0001+166
	.addr	L0001+173
	.addr	L0001+180
	.addr	L0001+188
	.addr	L0001+195
	.addr	L0001+203
	.addr	L0001+211
	.addr	L0001+219
	.addr	L0001+226
	.addr	L0001+231
	.addr	L0001+240
	.addr	L0001+247
	.addr	L0001+252
	.addr	L0001+256
	.addr	L0001+262
	.addr	L0001+269
	.addr	L0001+276
	.addr	L0001+282
	.addr	L0001+288
	.addr	L0001+292
	.addr	L0001+300
	.addr	L0001+306
	.addr	L0001+311
	.addr	L0001+316
	.addr	L0001+322
	.addr	L0001+328
	.addr	L0001+335
	.addr	L0001+339
	.addr	L0001+349
	.addr	L0001+356
	.addr	L0001+364
	.addr	L0001+369
	.addr	L0001+372
	.addr	L0001+377
	.addr	L0001+381
	.addr	L0001+390
	.addr	L0001+395
	.addr	L0001+400
	.addr	L0001+407
	.addr	L0001+413
	.addr	L0001+421
	.addr	L0001+424
	.addr	L0001+427
	.addr	L0001+432
	.addr	L0001+439
	.addr	L0001+445
	.addr	L0001+452
	.addr	L0001+462
	.addr	L0001+472
	.addr	L0001+480
	.addr	L0001+491
	.addr	L0001+501
	.addr	L0001+508
	.addr	L0001+513
	.addr	L0001+524
	.addr	L0001+533
	.addr	L0001+540
	.addr	L0001+547
	.addr	L0001+551
	.addr	L0001+560
	.addr	L0001+565
	.addr	L0001+573
	.addr	L0001+582
	.addr	L0001+588
	.addr	L0001+593
	.addr	L0001+596
	.addr	L0001+602
	.addr	L0001+609
	.addr	L0001+616
	.addr	L0001+621
	.addr	L0001+628
	.addr	L0001+633
	.addr	L0001+638
	.addr	L0001+647
	.addr	L0001+653
	.addr	L0001+658
	.addr	L0001+663
	.addr	L0001+669
	.addr	L0001+677
	.addr	L0001+684
	.addr	L0001+688
	.addr	L0001+690
	.addr	L0001+694
	.addr	L0001+704
	.addr	L0001+710
	.addr	L0001+715
	.addr	L0001+722
	.addr	L0001+729
	.addr	L0001+739
	.addr	L0001+743
	.addr	L0001+747
	.addr	L0001+751
	.addr	L0001+755
	.addr	L0001+759
	.addr	L0001+767
	.addr	L0001+785
	.addr	L0001+796
	.addr	L0001+817
	.addr	L0001+834
	.addr	L0001+845
	.addr	L0001+853
	.addr	L0001+864
	.addr	L0001+877
	.addr	L0001+894
	.addr	L0001+905
	.addr	L0001+909
	.addr	L0001+913
	.addr	L0001+937
	.addr	L0001+952
	.addr	L0001+969
	.addr	L0001+982
	.addr	L0001+999
	.addr	L0001+1009
	.addr	L0001+1030
	.addr	L0001+1043
	.addr	L0001+1058
	.addr	L0001+1078
	.addr	L0001+1099
	.addr	L0001+1117
	.addr	L0001+1137
	.addr	L0001+1151
	.addr	L0001+1164
	.word	$0000
_yypact:
	.word	$FFF7
	.word	$FFC3
	.word	$FFC5
	.word	$0012
	.word	$FFF0
	.word	$FFD6
	.word	$FFE7
	.word	$FF9A
	.word	$0054
	.word	$FF9A
	.word	$FF9A
	.word	$0054
	.word	$0054
	.word	$FFDC
	.word	$FFE6
	.word	$FFE9
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$0054
	.word	$FFDE
	.word	$0080
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$0054
	.word	$004C
	.word	$FFF9
	.word	$0016
	.word	$FFFB
	.word	$0054
	.word	$0004
	.word	$0054
	.word	$0054
	.word	$0054
	.word	$0054
	.word	$0007
	.word	$FF9A
	.word	$003D
	.word	$0006
	.word	$0054
	.word	$0054
	.word	$0021
	.word	$FF9A
	.word	$FF9A
	.word	$005F
	.word	$0010
	.word	$FF9A
	.word	$0080
	.word	$FF9A
	.word	$0037
	.word	$0037
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$0054
	.word	$FF9A
	.word	$0025
	.word	$002F
	.word	$FF9A
	.word	$000E
	.word	$0011
	.word	$0045
	.word	$0044
	.word	$0052
	.word	$FF9A
	.word	$FF9A
	.word	$0033
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$0077
	.word	$001D
	.word	$0044
	.word	$0044
	.word	$005B
	.word	$004B
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$007E
	.word	$0064
	.word	$FF9A
	.word	$002A
	.word	$008D
	.word	$FF9A
	.word	$FFFF
	.word	$0008
	.word	$0065
	.word	$0054
	.word	$0028
	.word	$0044
	.word	$0044
	.word	$0030
	.word	$0044
	.word	$0057
	.word	$FF9A
	.word	$0031
	.word	$FF9A
	.word	$002C
	.word	$008B
	.word	$FFB5
	.word	$009D
	.word	$FF9A
	.word	$FF9A
	.word	$0032
	.word	$004B
	.word	$0090
	.word	$006B
	.word	$0063
	.word	$FF9A
	.word	$FFB5
	.word	$FF9A
	.word	$FF9B
	.word	$0030
	.word	$0054
	.word	$0038
	.word	$FF9A
	.word	$0044
	.word	$FF9A
	.word	$FF9A
	.word	$0063
	.word	$FFA1
	.word	$FFB5
	.word	$FF9A
	.word	$FF9A
	.word	$006F
	.word	$0036
	.word	$FF9A
	.word	$004B
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$FF9A
	.word	$0054
	.word	$006F
	.word	$FF9A
_yydefact:
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$15
	.byte	$00
	.byte	$28
	.byte	$20
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$09
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$29
	.byte	$07
	.byte	$00
	.byte	$1D
	.byte	$1C
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$3B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$21
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$2C
	.byte	$2B
	.byte	$39
	.byte	$38
	.byte	$3C
	.byte	$00
	.byte	$44
	.byte	$25
	.byte	$23
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$22
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$3A
	.byte	$41
	.byte	$3E
	.byte	$45
	.byte	$27
	.byte	$24
	.byte	$34
	.byte	$36
	.byte	$42
	.byte	$43
	.byte	$3F
	.byte	$00
	.byte	$41
	.byte	$40
_yypgoto:
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$79
	.byte	$F8
	.byte	$0A
	.byte	$A2
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$34
	.byte	$9A
	.byte	$9A
	.byte	$0C
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$3B
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$9A
	.byte	$22
	.byte	$9A
_yydefgoto:
	.word	$FFFF
	.word	$0003
	.word	$0004
	.word	$0014
	.word	$0027
	.word	$004D
	.word	$0016
	.word	$0017
	.word	$0018
	.word	$0030
	.word	$0031
	.word	$006F
	.word	$007B
	.word	$0079
	.word	$007A
	.word	$0042
	.word	$0043
	.word	$004E
	.word	$004F
	.word	$0050
	.word	$0051
	.word	$0073
	.word	$0053
	.word	$006B
	.word	$0061
	.word	$006E
	.word	$0081
	.word	$0089
	.word	$0077
_yytable:
	.byte	$15
	.byte	$6A
	.byte	$21
	.byte	$19
	.byte	$1A
	.byte	$5A
	.byte	$5B
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$1E
	.byte	$5D
	.byte	$5E
	.byte	$1F
	.byte	$7D
	.byte	$01
	.byte	$7E
	.byte	$07
	.byte	$28
	.byte	$2C
	.byte	$7D
	.byte	$7F
	.byte	$85
	.byte	$32
	.byte	$21
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$3B
	.byte	$3C
	.byte	$21
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$45
	.byte	$21
	.byte	$05
	.byte	$5C
	.byte	$06
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$02
	.byte	$21
	.byte	$24
	.byte	$25
	.byte	$08
	.byte	$58
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$09
	.byte	$4B
	.byte	$3F
	.byte	$0B
	.byte	$0C
	.byte	$40
	.byte	$5D
	.byte	$5E
	.byte	$1B
	.byte	$20
	.byte	$66
	.byte	$0B
	.byte	$0C
	.byte	$29
	.byte	$57
	.byte	$59
	.byte	$2A
	.byte	$0A
	.byte	$1C
	.byte	$0B
	.byte	$0C
	.byte	$21
	.byte	$0D
	.byte	$1D
	.byte	$5A
	.byte	$5B
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$0D
	.byte	$2D
	.byte	$68
	.byte	$69
	.byte	$2F
	.byte	$6C
	.byte	$80
	.byte	$3E
	.byte	$0D
	.byte	$2B
	.byte	$72
	.byte	$21
	.byte	$33
	.byte	$41
	.byte	$2E
	.byte	$38
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$72
	.byte	$3A
	.byte	$48
	.byte	$64
	.byte	$87
	.byte	$4A
	.byte	$49
	.byte	$8B
	.byte	$21
	.byte	$83
	.byte	$52
	.byte	$55
	.byte	$86
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$2E
	.byte	$56
	.byte	$21
	.byte	$26
	.byte	$5C
	.byte	$5F
	.byte	$88
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$3D
	.byte	$60
	.byte	$62
	.byte	$65
	.byte	$46
	.byte	$63
	.byte	$67
	.byte	$6D
	.byte	$0F
	.byte	$70
	.byte	$71
	.byte	$5E
	.byte	$75
	.byte	$76
	.byte	$47
	.byte	$74
	.byte	$78
	.byte	$82
	.byte	$54
	.byte	$8A
	.byte	$44
	.byte	$7C
	.byte	$8C
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$39
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$13
_yycheck:
	.word	$0008
	.word	$005F
	.word	$0003
	.word	$000B
	.word	$000C
	.word	$0006
	.word	$0007
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0013
	.word	$0004
	.word	$0005
	.word	$0030
	.word	$0074
	.word	$0019
	.word	$0076
	.word	$0000
	.word	$001B
	.word	$001C
	.word	$0074
	.word	$0074
	.word	$0076
	.word	$0020
	.word	$0003
	.word	$0022
	.word	$0023
	.word	$0024
	.word	$0025
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$002A
	.word	$002B
	.word	$0003
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$0003
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0039
	.word	$0003
	.word	$0070
	.word	$0035
	.word	$0070
	.word	$0003
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0048
	.word	$0003
	.word	$000A
	.word	$000B
	.word	$0053
	.word	$004C
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0073
	.word	$0006
	.word	$003B
	.word	$0008
	.word	$0009
	.word	$003E
	.word	$0004
	.word	$0005
	.word	$0075
	.word	$0074
	.word	$005B
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$004B
	.word	$004C
	.word	$000D
	.word	$0073
	.word	$0075
	.word	$0008
	.word	$0009
	.word	$0003
	.word	$001B
	.word	$0077
	.word	$0006
	.word	$0007
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$001B
	.word	$006F
	.word	$005D
	.word	$005E
	.word	$0070
	.word	$0060
	.word	$0075
	.word	$000F
	.word	$001B
	.word	$0024
	.word	$0067
	.word	$0003
	.word	$006F
	.word	$0064
	.word	$0076
	.word	$006F
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0071
	.word	$0076
	.word	$006F
	.word	$0076
	.word	$0010
	.word	$003B
	.word	$0070
	.word	$008A
	.word	$0003
	.word	$0078
	.word	$0033
	.word	$000F
	.word	$007D
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0076
	.word	$0070
	.word	$0003
	.word	$000F
	.word	$0035
	.word	$0013
	.word	$0023
	.word	$0008
	.word	$0009
	.word	$000A
	.word	$000B
	.word	$0076
	.word	$0034
	.word	$006F
	.word	$0035
	.word	$0076
	.word	$000F
	.word	$0075
	.word	$0047
	.word	$006F
	.word	$006F
	.word	$0075
	.word	$0005
	.word	$0013
	.word	$0039
	.word	$0076
	.word	$0074
	.word	$0044
	.word	$0070
	.word	$0076
	.word	$0074
	.word	$0032
	.word	$0071
	.word	$008B
	.word	$FFFF
	.word	$007B
	.word	$FFFF
	.word	$0074
	.word	$006E
	.word	$006F
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$FFFF
	.word	$FFFF
	.word	$0075
	.word	$006E
	.word	$006F
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$FFFF
	.word	$FFFF
	.word	$0075
	.word	$006E
	.word	$006F
	.word	$0070
	.word	$0071
	.word	$0072
	.word	$FFFF
	.word	$FFFF
	.word	$0075
_yystos:
	.byte	$00
	.byte	$19
	.byte	$48
	.byte	$79
	.byte	$7A
	.byte	$70
	.byte	$70
	.byte	$00
	.byte	$53
	.byte	$73
	.byte	$73
	.byte	$08
	.byte	$09
	.byte	$1B
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$75
	.byte	$7B
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$7D
	.byte	$7D
	.byte	$75
	.byte	$75
	.byte	$77
	.byte	$7D
	.byte	$30
	.byte	$74
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0F
	.byte	$7C
	.byte	$7D
	.byte	$0A
	.byte	$0D
	.byte	$24
	.byte	$7D
	.byte	$6F
	.byte	$76
	.byte	$70
	.byte	$81
	.byte	$82
	.byte	$7D
	.byte	$6F
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$6F
	.byte	$74
	.byte	$76
	.byte	$7D
	.byte	$7D
	.byte	$76
	.byte	$0F
	.byte	$3B
	.byte	$3E
	.byte	$64
	.byte	$87
	.byte	$88
	.byte	$7C
	.byte	$7D
	.byte	$76
	.byte	$76
	.byte	$6F
	.byte	$70
	.byte	$3B
	.byte	$06
	.byte	$75
	.byte	$7D
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$33
	.byte	$8E
	.byte	$76
	.byte	$0F
	.byte	$70
	.byte	$89
	.byte	$7D
	.byte	$89
	.byte	$06
	.byte	$07
	.byte	$35
	.byte	$04
	.byte	$05
	.byte	$13
	.byte	$34
	.byte	$90
	.byte	$6F
	.byte	$0F
	.byte	$76
	.byte	$35
	.byte	$7D
	.byte	$75
	.byte	$89
	.byte	$89
	.byte	$7F
	.byte	$8F
	.byte	$89
	.byte	$47
	.byte	$91
	.byte	$83
	.byte	$6F
	.byte	$75
	.byte	$7E
	.byte	$8D
	.byte	$74
	.byte	$13
	.byte	$39
	.byte	$94
	.byte	$44
	.byte	$85
	.byte	$86
	.byte	$84
	.byte	$8D
	.byte	$74
	.byte	$76
	.byte	$7F
	.byte	$7D
	.byte	$92
	.byte	$70
	.byte	$89
	.byte	$86
	.byte	$76
	.byte	$7E
	.byte	$10
	.byte	$23
	.byte	$93
	.byte	$74
	.byte	$7D
	.byte	$93
_yyr1:
	.byte	$00
	.byte	$78
	.byte	$79
	.byte	$79
	.byte	$7A
	.byte	$7A
	.byte	$7B
	.byte	$7B
	.byte	$7C
	.byte	$7C
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$81
	.byte	$83
	.byte	$82
	.byte	$84
	.byte	$82
	.byte	$85
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$89
	.byte	$89
	.byte	$89
	.byte	$8A
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8C
	.byte	$8D
	.byte	$8D
	.byte	$8E
	.byte	$8E
	.byte	$8F
	.byte	$8F
	.byte	$90
	.byte	$90
	.byte	$91
	.byte	$91
	.byte	$92
	.byte	$92
	.byte	$93
	.byte	$93
	.byte	$93
	.byte	$94
	.byte	$94
_yyr2:
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
L0001:
	.byte	$24,$45,$4E,$44,$00,$45,$52,$52,$4F,$52,$00,$24,$55,$4E,$44,$45
	.byte	$46,$49,$4E,$45,$44,$00,$C3,$CF,$CC,$CC,$C1,$D4,$C5,$00,$CF,$D2
	.byte	$00,$C1,$CE,$C4,$00,$CE,$CF,$D4,$00,$C3,$CF,$CD,$D0,$C1,$D2,$C9
	.byte	$D3,$CF,$CE,$00,$27,$2B,$27,$00,$27,$2D,$27,$00,$27,$2A,$27,$00
	.byte	$27,$2F,$27,$00,$D5,$CD,$C9,$CE,$D5,$D3,$00,$C1,$CC,$CC,$00,$C1
	.byte	$CE,$D9,$00,$C1,$D3,$00,$C1,$D3,$C3,$00,$C1,$D5,$D4,$C8,$CF,$D2
	.byte	$C9,$DA,$C1,$D4,$C9,$CF,$CE,$00,$C2,$C5,$D4,$D7,$C5,$C5,$CE,$00
	.byte	$C2,$D9,$00,$C3,$C1,$D3,$C5,$00,$C3,$C8,$C1,$D2,$C1,$C3,$D4,$C5
	.byte	$D2,$00,$C3,$C8,$C5,$C3,$CB,$00,$C3,$CC,$CF,$D3,$C5,$00,$C3,$CF
	.byte	$CD,$CD,$C9,$D4,$00,$C3,$CF,$CD,$CD,$C1,$CE,$C4,$00,$C3,$CF,$CE
	.byte	$D4,$C9,$CE,$D5,$C5,$00,$C3,$CF,$CE,$C3,$C1,$D4,$00,$C3,$D2,$C5
	.byte	$C1,$D4,$C5,$00,$C3,$D5,$D2,$D2,$C5,$CE,$D4,$00,$C3,$D5,$D2,$D3
	.byte	$CF,$D2,$00,$C4,$C5,$D3,$C9,$CD,$C1,$CC,$00,$C4,$C5,$C3,$CC,$C1
	.byte	$D2,$C5,$00,$C4,$C5,$C6,$C1,$D5,$CC,$D4,$00,$C4,$C5,$CC,$C5,$C5
	.byte	$D4,$00,$C4,$C5,$D3,$C3,$00,$C4,$C9,$D3,$D4,$C9,$CE,$C3,$D4,$00
	.byte	$C4,$D5,$C2,$C2,$CC,$C5,$00,$C5,$CC,$D3,$C5,$00,$C5,$CE,$C4,$00
	.byte	$C5,$D2,$D2,$C5,$D2,$00,$C5,$D3,$C3,$C1,$D0,$C5,$00,$C5,$D8,$C9
	.byte	$D3,$D4,$D3,$00,$C6,$C5,$D4,$C3,$C8,$00,$C6,$CC,$CF,$D7,$D4,$00
	.byte	$C6,$CF,$D2,$00,$C6,$CF,$D2,$C5,$C9,$C7,$CE,$00,$C6,$CF,$D5,$CE
	.byte	$C4,$00,$C6,$D2,$CF,$CD,$00,$C7,$CF,$D4,$CF,$00,$C7,$D2,$C1,$CE
	.byte	$D4,$00,$C7,$D2,$CF,$D5,$D0,$00,$C8,$C1,$D6,$C9,$CE,$C7,$00,$C9
	.byte	$CE,$CE,$00,$C9,$CE,$C4,$C9,$C3,$C1,$D4,$CF,$D2,$00,$C9,$CE,$D3
	.byte	$C5,$D2,$D4,$00,$C9,$CE,$D4,$C5,$C7,$C5,$D2,$00,$C9,$CE,$D4,$CF
	.byte	$00,$C9,$D3,$00,$CA,$CF,$C9,$CE,$00,$CB,$C5,$D9,$00,$CC,$C1,$CE
	.byte	$C7,$D5,$C1,$C7,$C5,$00,$CC,$C5,$C6,$D4,$00,$CC,$C9,$CB,$C5,$00
	.byte	$CD,$CF,$C4,$D5,$CC,$C5,$00,$CE,$D5,$CC,$CC,$D8,$00,$CE,$D5,$CD
	.byte	$C5,$D2,$C9,$C3,$00,$CF,$C6,$00,$CF,$CE,$00,$CF,$D0,$C5,$CE,$00
	.byte	$CF,$D0,$D4,$C9,$CF,$CE,$00,$CF,$D2,$C4,$C5,$D2,$00,$D0,$C1,$D2
	.byte	$C1,$CD,$D3,$00,$D0,$C1,$D2,$C1,$CD,$C5,$D4,$C5,$D2,$00,$D0,$D2
	.byte	$C5,$C3,$C9,$D3,$C9,$CF,$CE,$00,$D0,$D2,$C9,$CD,$C1,$D2,$D9,$00
	.byte	$D0,$D2,$C9,$D6,$C9,$CC,$C5,$C7,$C5,$D3,$00,$D0,$D2,$CF,$C3,$C5
	.byte	$C4,$D5,$D2,$C5,$00,$D0,$D5,$C2,$CC,$C9,$CB,$00,$D2,$C5,$C1,$CC
	.byte	$00,$D2,$C5,$C6,$C5,$D2,$C5,$CE,$C3,$C5,$D3,$00,$D2,$CF,$CC,$CC
	.byte	$C2,$C1,$C3,$CB,$00,$D3,$C3,$C8,$C5,$CD,$C1,$00,$D3,$C5,$CC,$C5
	.byte	$C3,$D4,$00,$D3,$C5,$D4,$00,$D3,$CD,$C1,$CC,$CC,$C9,$CE,$D4,$00
	.byte	$D3,$CF,$CD,$C5,$00,$D3,$D1,$CC,$C3,$CF,$C4,$C5,$00,$D3,$D1,$CC
	.byte	$C5,$D2,$D2,$CF,$D2,$00,$D4,$C1,$C2,$CC,$C5,$00,$D4,$C8,$C5,$CE
	.byte	$00,$D4,$CF,$00,$D5,$CE,$C9,$CF,$CE,$00,$D5,$CE,$C9,$D1,$D5,$C5
	.byte	$00,$D5,$D0,$C4,$C1,$D4,$C5,$00,$D5,$D3,$C5,$D2,$00,$D6,$C1,$CC
	.byte	$D5,$C5,$D3,$00,$D6,$C9,$C5,$D7,$00,$D7,$C8,$C5,$CE,$00,$D7,$C8
	.byte	$C5,$CE,$C5,$D6,$C5,$D2,$00,$D7,$C8,$C5,$D2,$C5,$00,$D7,$C9,$D4
	.byte	$C8,$00,$D7,$CF,$D2,$CB,$00,$C3,$CF,$C2,$CF,$CC,$00,$C6,$CF,$D2
	.byte	$D4,$D2,$C1,$CE,$00,$D0,$C1,$D3,$CB,$C1,$CC,$00,$D0,$CC,$C9,$00
	.byte	$C3,$00,$C1,$C4,$C1,$00,$C1,$CC,$CC,$CF,$C3,$C6,$C1,$C9,$CC,$00
	.byte	$C1,$CD,$CD,$D3,$C3,$00,$CE,$C1,$CD,$C5,$00,$D3,$D4,$D2,$C9,$CE
	.byte	$C7,$00,$C9,$CE,$D4,$CE,$D5,$CD,$00,$C1,$D0,$D0,$D2,$CF,$D8,$CE
	.byte	$D5,$CD,$00,$27,$3B,$27,$00,$27,$2C,$27,$00,$27,$28,$27,$00,$27
	.byte	$29,$27,$00,$27,$2E,$27,$00,$24,$41,$43,$43,$45,$50,$54,$00,$43
	.byte	$4F,$4D,$4D,$41,$4E,$44,$AF,$4F,$52,$AF,$53,$45,$4C,$45,$43,$54
	.byte	$00,$4F,$50,$54,$AF,$50,$41,$52,$41,$4D,$53,$00,$53,$43,$41,$4C
	.byte	$41,$52,$AF,$45,$58,$50,$AF,$43,$4F,$4D,$4D,$41,$4C,$49,$53,$54
	.byte	$00,$4F,$50,$54,$49,$4F,$4E,$41,$4C,$AF,$41,$53,$AF,$4E,$41,$4D
	.byte	$45,$00,$53,$43,$41,$4C,$41,$52,$AF,$45,$58,$50,$00,$4C,$49,$54
	.byte	$45,$52,$41,$4C,$00,$43,$4F,$4C,$55,$4D,$4E,$AF,$52,$45,$46,$00
	.byte	$46,$55,$4E,$43,$54,$49,$4F,$4E,$AF,$52,$45,$46,$00,$54,$41,$42
	.byte	$4C,$45,$AF,$52,$45,$46,$45,$52,$45,$4E,$43,$45,$53,$00,$4A,$4F
	.byte	$49,$4E,$AF,$54,$41,$42,$4C,$45,$00,$24,$40,$31,$00,$24,$40,$32
	.byte	$00,$4F,$50,$54,$49,$4F,$4E,$41,$4C,$AF,$4A,$4F,$49,$4E,$AF,$43
	.byte	$4F,$4E,$44,$49,$54,$49,$4F,$4E,$00,$4A,$4F,$49,$4E,$AF,$43,$4F
	.byte	$4E,$44,$49,$54,$49,$4F,$4E,$00,$4F,$50,$54,$AF,$57,$48,$45,$52
	.byte	$45,$AF,$43,$4C,$41,$55,$53,$45,$00,$57,$48,$45,$52,$45,$AF,$43
	.byte	$4C,$41,$55,$53,$45,$00,$53,$45,$41,$52,$43,$48,$AF,$43,$4F,$4E
	.byte	$44,$49,$54,$49,$4F,$4E,$00,$50,$52,$45,$44,$49,$43,$41,$54,$45
	.byte	$00,$43,$4F,$4D,$50,$41,$52,$49,$53,$4F,$4E,$AF,$50,$52,$45,$44
	.byte	$49,$43,$41,$54,$45,$00,$49,$4E,$AF,$50,$52,$45,$44,$49,$43,$41
	.byte	$54,$45,$00,$41,$54,$4F,$4D,$AF,$43,$4F,$4D,$4D,$41,$4C,$49,$53
	.byte	$54,$00,$4F,$50,$54,$AF,$47,$52,$4F,$55,$50,$AF,$42,$59,$AF,$43
	.byte	$4C,$41,$55,$53,$45,$00,$43,$4F,$4C,$55,$4D,$4E,$AF,$52,$45,$46
	.byte	$AF,$43,$4F,$4D,$4D,$41,$4C,$49,$53,$54,$00,$4F,$50,$54,$AF,$48
	.byte	$41,$56,$49,$4E,$47,$AF,$43,$4C,$41,$55,$53,$45,$00,$4F,$50,$54
	.byte	$AF,$4F,$52,$44,$45,$52,$AF,$42,$59,$AF,$43,$4C,$41,$55,$53,$45
	.byte	$00,$4F,$52,$44,$45,$52,$49,$4E,$47,$AF,$53,$50,$45,$43,$00,$4F
	.byte	$50,$54,$AF,$41,$53,$43,$AF,$44,$45,$53,$43,$00,$4F,$50,$54,$AF
	.byte	$49,$4E,$54,$4F,$AF,$43,$4C,$41,$55,$53,$45,$00,$53,$59,$4E,$54
	.byte	$41,$58,$20,$45,$52,$52,$4F,$52,$00,$53,$59,$4E,$54,$41,$58,$20
	.byte	$45,$52,$52,$4F,$52,$2C,$20,$55,$4E,$45,$58,$50,$45,$43,$54,$45
	.byte	$44,$20,$25,$53,$00,$53,$59,$4E,$54,$41,$58,$20,$45,$52,$52,$4F
	.byte	$52,$2C,$20,$55,$4E,$45,$58,$50,$45,$43,$54,$45,$44,$20,$25,$53
	.byte	$2C,$20,$45,$58,$50,$45,$43,$54,$49,$4E,$47,$20,$25,$53,$00,$53
	.byte	$59,$4E,$54,$41,$58,$20,$45,$52,$52,$4F,$52,$2C,$20,$55,$4E,$45
	.byte	$58,$50,$45,$43,$54,$45,$44,$20,$25,$53,$2C,$20,$45,$58,$50,$45
	.byte	$43,$54,$49,$4E,$47,$20,$25,$53,$20,$4F,$52,$20,$25,$53,$00,$53
	.byte	$59,$4E,$54,$41,$58,$20,$45,$52,$52,$4F,$52,$2C,$20,$55,$4E,$45
	.byte	$58,$50,$45,$43,$54,$45,$44,$20,$25,$53,$2C,$20,$45,$58,$50,$45
	.byte	$43,$54,$49,$4E,$47,$20,$25,$53,$20,$4F,$52,$20,$25,$53,$20,$4F
	.byte	$52,$20,$25,$53,$00,$53,$59,$4E,$54,$41,$58,$20,$45,$52,$52,$4F
	.byte	$52,$2C,$20,$55,$4E,$45,$58,$50,$45,$43,$54,$45,$44,$20,$25,$53
	.byte	$2C,$20,$45,$58,$50,$45,$43,$54,$49,$4E,$47,$20,$25,$53,$20,$4F
	.byte	$52,$20,$25,$53,$20,$4F,$52,$20,$25,$53,$20,$4F,$52,$20,$25,$53
	.byte	$00,$C4,$45,$4C,$45,$54,$49,$4E,$47,$00,$AF,$53,$45,$4E,$53,$49
	.byte	$54,$49,$56,$45,$00,$55,$4E,$4B,$4E,$4F,$57,$4E,$20,$4F,$52,$20
	.byte	$41,$4D,$42,$49,$47,$55,$4F,$55,$53,$20,$43,$4F,$4C,$55,$4D,$4E
	.byte	$20,$4E,$41,$4D,$45,$0D,$00,$55,$4E,$4B,$4E,$4F,$57,$4E,$20,$4F
	.byte	$52,$20,$41,$4D,$42,$49,$47,$55,$4F,$55,$53,$20,$43,$4F,$4C,$55
	.byte	$4D,$4E,$20,$4E,$41,$4D,$45,$0D,$00,$53,$59,$4E,$54,$41,$58,$20
	.byte	$45,$52,$52,$4F,$52,$00,$C5,$52,$52,$4F,$52,$3A,$20,$44,$49,$53
	.byte	$43,$41,$52,$44,$49,$4E,$47,$00,$C5,$52,$52,$4F,$52,$3A,$20,$50
	.byte	$4F,$50,$50,$49,$4E,$47,$00,$4D,$45,$4D,$4F,$52,$59,$20,$45,$58
	.byte	$48,$41,$55,$53,$54,$45,$44,$00,$C3,$4C,$45,$41,$4E,$55,$50,$3A
	.byte	$20,$44,$49,$53,$43,$41,$52,$44,$49,$4E,$47,$20,$4C,$4F,$4F,$4B
	.byte	$41,$48,$45,$41,$44,$00,$C3,$4C,$45,$41,$4E,$55,$50,$3A,$20,$50
	.byte	$4F,$50,$50,$49,$4E,$47,$00

; ---------------------------------------------------------------
; int __near__ yyparse (__near__ struct qryData*, __near__ void*)
; ---------------------------------------------------------------

.segment	"YYPARSE"

.proc	_yyparse: near

.segment	"BSS"

L081E:
	.res	2,$00
L081F:
	.res	4,$00
L0820:
	.res	4,$00
L0821:
	.res	2,$00
L0822:
	.res	2,$00
L0823:
	.res	2,$00
L0825:
	.res	400,$00
L0826:
	.res	2,$00
L0827:
	.res	2,$00
L0829:
	.res	800,$00
L082A:
	.res	2,$00
L082B:
	.res	2,$00
L082C:
	.res	4,$00
L082E:
	.res	40,$00
L082F:
	.res	2,$00
L0830:
	.res	4,$00
L0831:
	.res	2,$00
L0833:
	.res	2,$00
L0834:
	.res	2,$00
L0835:
	.res	2,$00
L0837:
	.res	4,$00
L0839:
	.res	128,$00
L083A:
	.res	2,$00
L083C:
	.res	4,$00
L083E:
	.res	2,$00
L0860:
	.res	4,$00
L086B:
	.res	2,$00
L086D:
	.res	2,$00
L0879:
	.res	4,$00
L087D:
	.res	4,$00
L089B:
	.res	4,$00
L089F:
	.res	4,$00
L08FB:
	.res	2,$00
L0919:
	.res	2,$00
L0943:
	.res	2,$00
L0BAA:
	.res	2,$00
L0BAC:
	.res	2,$00
L0BB8:
	.res	2,$00

.segment	"YYPARSE"

;
; int yy_lac_established = 0;
;
	ldx     #$00
	txa
	sta     L0831
	sta     L0831+1
;
; int yytoken = 0;
;
	sta     L0835
	sta     L0835+1
;
; char *yymsg = yymsgbuf;
;
	lda     #<(L0839)
	sta     L083A
	lda     #>(L0839)
	sta     L083A+1
;
; long unsigned int yymsg_alloc = sizeof yymsgbuf;
;
	lda     #$80
	sta     L083C
	stx     L083C+1
	stx     L083C+2
	stx     L083C+3
;
; int yylen = 0;
;
	txa
	sta     L083E
	sta     L083E+1
;
; yyssp = yyss = yyssa;
;
	lda     #<(L0825)
	ldx     #>(L0825)
	sta     L0826
	stx     L0826+1
	sta     L0827
	stx     L0827+1
;
; yyvsp = yyvs = yyvsa;
;
	lda     #<(L0829)
	ldx     #>(L0829)
	sta     L082A
	stx     L082A+1
	sta     L082B
	stx     L082B+1
;
; yystacksize = 200;
;
	ldx     #$00
	lda     #$C8
	sta     L082C
	stx     L082C+1
	stx     L082C+2
	stx     L082C+3
;
; yyes = yyesa;
;
	lda     #<(L082E)
	sta     L082F
	lda     #>(L082E)
	sta     L082F+1
;
; yyes_capacity = sizeof yyesa / sizeof *yyes;
;
	lda     #$14
	sta     L0830
	stx     L0830+1
	stx     L0830+2
	stx     L0830+3
;
; if (10000 < yyes_capacity)
;
	ldx     #$27
	lda     #$10
	jsr     pushax
	lda     L0830+3
	sta     sreg+1
	lda     L0830+2
	sta     sreg
	ldx     L0830+1
	lda     L0830
	jsr     toslong
	jsr     tosulteax
	beq     L084C
;
; yyes_capacity = 10000;
;
	ldx     #$27
	lda     #$10
	sta     L0830
	stx     L0830+1
	ldy     #$00
	sty     L0830+2
	sty     L0830+3
;
; yystate = 0;
;
L084C:	lda     #$00
	sta     L0822
	sta     L0822+1
;
; yyerrstatus = 0;
;
	sta     L0823
	sta     L0823+1
;
; yynerrs = 0;
;
	sta     L0821
	sta     L0821+1
;
; yychar = (-2);
;
	ldx     #$FF
	lda     #$FE
	sta     L081E
	stx     L081E+1
;
; goto yysetstate;
;
	jmp     L0859
;
; yyssp++;
;
L085A:	lda     L0827
	ldx     L0827+1
	sta     regsave
	stx     regsave+1
	jsr     incax2
	sta     L0827
	stx     L0827+1
;
; *yyssp = yystate;
;
L0859:	lda     L0827
	sta     sreg
	lda     L0827+1
	sta     sreg+1
	lda     L0822
	ldy     #$00
	sta     (sreg),y
	iny
	lda     L0822+1
	sta     (sreg),y
;
; if (yyss + yystacksize - 1 <= yyssp)
;
	ldx     L082C+1
	lda     L082C
	jsr     aslax1
	clc
	adc     L0826
	pha
	txa
	adc     L0826+1
	tax
	pla
	jsr     decax2
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     tosicmp
	beq     L0CAA
	jcs     L08C2
;
; long unsigned int yysize = yyssp - yyss + 1;
;
L0CAA:	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0826
	ldx     L0826+1
	jsr     tossubax
	jsr     asrax1
	jsr     incax1
	jsr     axlong
	sta     L0860
	stx     L0860+1
	ldy     sreg
	sty     L0860+2
	ldy     sreg+1
	sty     L0860+3
;
; if (10000 <= yystacksize)
;
	ldx     #$27
	lda     #$10
	jsr     pushax
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     toslong
	jsr     tosuleeax
;
; goto yyexhaustedlab;
;
	jne     L0864
;
; yystacksize *= 2;
;
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     shleax1
	sta     L082C
	stx     L082C+1
	ldy     sreg
	sty     L082C+2
	ldy     sreg+1
	sty     L082C+3
;
; if (10000 < yystacksize)
;
	ldx     #$27
	lda     #$10
	jsr     pushax
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     toslong
	jsr     tosulteax
	beq     L0867
;
; yystacksize = 10000;
;
	ldx     #$27
	lda     #$10
	sta     L082C
	stx     L082C+1
	ldy     #$00
	sty     L082C+2
	sty     L082C+3
;
; yytype_int16 *yyss1 = yyss;
;
L0867:	lda     L0826
	sta     L086B
	lda     L0826+1
	sta     L086B+1
;
; (union yyalloc *) malloc (((yystacksize) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) + (sizeof (union yyalloc) - 1)));
;
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     pusheax
	ldx     #$00
	lda     #$06
	jsr     tosumul0ax
	ldy     #$03
	jsr     inceaxy
	jsr     _malloc
	sta     L086D
	stx     L086D+1
;
; if (! yyptr)
;
	lda     L086D
	ora     L086D+1
;
; goto yyexhaustedlab;
;
	jeq     L0864
;
; do { long unsigned int yynewbytes; do { long unsigned int yyi; for (yyi = 0; yyi < (yysize); yyi++) (&yyptr->yyss_alloc)[yyi] = (yyss)[yyi]; } while (0); yyss = &yyptr->yyss_alloc; yynewbytes = yystacksize * sizeof (*yyss) + (sizeof (union yyalloc) - 1); yyptr += yynewbytes / sizeof (*yyptr); } while (0);
;
	lda     #$00
	sta     L087D
	sta     L087D+1
	sta     L087D+2
	sta     L087D+3
L087E:	lda     L087D+3
	sta     sreg+1
	lda     L087D+2
	sta     sreg
	ldx     L087D+1
	lda     L087D
	jsr     pusheax
	lda     L0860+3
	sta     sreg+1
	lda     L0860+2
	sta     sreg
	ldx     L0860+1
	lda     L0860
	jsr     tosulteax
	beq     L087F
	ldx     L087D+1
	lda     L087D
	jsr     aslax1
	clc
	adc     L086D
	sta     sreg
	txa
	adc     L086D+1
	sta     sreg+1
	ldx     L087D+1
	lda     L087D
	jsr     aslax1
	clc
	adc     L0826
	pha
	txa
	adc     L0826+1
	tax
	pla
	jsr     ldaxi
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     L087D+3
	sta     sreg+1
	lda     L087D+2
	sta     sreg
	ldx     L087D+1
	lda     L087D
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	sta     L087D
	stx     L087D+1
	ldy     sreg
	sty     L087D+2
	ldy     sreg+1
	sty     L087D+3
	jsr     resteax
	jmp     L087E
L087F:	lda     L086D
	sta     L0826
	lda     L086D+1
	sta     L0826+1
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     shleax1
	ldy     #$03
	jsr     inceaxy
	sta     L0879
	stx     L0879+1
	ldy     sreg
	sty     L0879+2
	ldy     sreg+1
	sty     L0879+3
	lda     L0879+3
	sta     sreg+1
	lda     L0879+2
	sta     sreg
	ldx     L0879+1
	lda     L0879
	jsr     shreax2
	jsr     shleax2
	clc
	adc     L086D
	sta     L086D
	txa
	adc     L086D+1
	sta     L086D+1
;
; do { long unsigned int yynewbytes; do { long unsigned int yyi; for (yyi = 0; yyi < (yysize); yyi++) (&yyptr->yyvs_alloc)[yyi] = (yyvs)[yyi]; } while (0); yyvs = &yyptr->yyvs_alloc; yynewbytes = yystacksize * sizeof (*yyvs) + (sizeof (union yyalloc) - 1); yyptr += yynewbytes / sizeof (*yyptr); } while (0);
;
	lda     #$00
	sta     L089F
	sta     L089F+1
	sta     L089F+2
	sta     L089F+3
L08A0:	lda     L089F+3
	sta     sreg+1
	lda     L089F+2
	sta     sreg
	ldx     L089F+1
	lda     L089F
	jsr     pusheax
	lda     L0860+3
	sta     sreg+1
	lda     L0860+2
	sta     sreg
	ldx     L0860+1
	lda     L0860
	jsr     tosulteax
	beq     L08A1
	ldx     L089F+1
	lda     L089F
	jsr     aslax2
	clc
	adc     L086D
	pha
	txa
	adc     L086D+1
	tax
	pla
	jsr     pushax
	ldx     L089F+1
	lda     L089F
	jsr     aslax2
	clc
	adc     L082A
	pha
	txa
	adc     L082A+1
	tax
	pla
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
	lda     L089F+3
	sta     sreg+1
	lda     L089F+2
	sta     sreg
	ldx     L089F+1
	lda     L089F
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	sta     L089F
	stx     L089F+1
	ldy     sreg
	sty     L089F+2
	ldy     sreg+1
	sty     L089F+3
	jsr     resteax
	jmp     L08A0
L08A1:	lda     L086D
	sta     L082A
	lda     L086D+1
	sta     L082A+1
	lda     L082C+3
	sta     sreg+1
	lda     L082C+2
	sta     sreg
	ldx     L082C+1
	lda     L082C
	jsr     shleax2
	ldy     #$03
	jsr     inceaxy
	sta     L089B
	stx     L089B+1
	ldy     sreg
	sty     L089B+2
	ldy     sreg+1
	sty     L089B+3
	lda     L089B+3
	sta     sreg+1
	lda     L089B+2
	sta     sreg
	ldx     L089B+1
	lda     L089B
	jsr     shreax2
	jsr     shleax2
	clc
	adc     L086D
	sta     L086D
	txa
	adc     L086D+1
	sta     L086D+1
;
; if (yyss1 != yyssa)
;
	lda     #<(L0825)
	ldx     #>(L0825)
	cpx     L086B+1
	bne     L0CAD
	cmp     L086B
	beq     L08BA
;
; free (yyss1);
;
L0CAD:	lda     L086B
	ldx     L086B+1
	jsr     _free
;
; yyssp = yyss + yysize - 1;
;
L08BA:	ldx     L0860+1
	lda     L0860
	jsr     aslax1
	clc
	adc     L0826
	pha
	txa
	adc     L0826+1
	tax
	pla
	jsr     decax2
	sta     L0827
	stx     L0827+1
;
; yyvsp = yyvs + yysize - 1;
;
	ldx     L0860+1
	lda     L0860
	jsr     aslax2
	clc
	adc     L082A
	pha
	txa
	adc     L082A+1
	tax
	pla
	jsr     decax4
	sta     L082B
	stx     L082B+1
;
; if (yyss + yystacksize - 1 <= yyssp)
;
	ldx     L082C+1
	lda     L082C
	jsr     aslax1
	clc
	adc     L0826
	pha
	txa
	adc     L0826+1
	tax
	pla
	jsr     decax2
	sec
	sbc     L0827
	sta     tmp1
	txa
	sbc     L0827+1
	ora     tmp1
	jeq     L08C4
;
; goto yyabortlab;
;
	jcc     L08C4
;
; if (yystate == 7)
;
L08C2:	lda     L0822+1
	bne     L0CAE
	lda     L0822
	cmp     #$07
;
; goto yyacceptlab;
;
	jeq     L08C8
;
; yyn = yypact[yystate];
;
L0CAE:	lda     L0822
	ldx     L0822+1
	jsr     aslax1
	clc
	adc     #<(_yypact)
	tay
	txa
	adc     #>(_yypact)
	tax
	tya
	jsr     ldaxi
	sta     L0833
	stx     L0833+1
;
; if ((!!((yyn) == (-102))))
;
	cpx     #$FF
	bne     L08D3
	cmp     #$9A
L08D3:	jsr     booleq
	jsr     bnega
	stx     tmp1
	ora     tmp1
;
; goto yydefault;
;
	jeq     L08D4
;
; if (yychar == (-2))
;
	lda     L081E+1
	cmp     #$FF
	bne     L08D5
	lda     L081E
	cmp     #$FE
	bne     L08D5
;
; yychar = yylex (&yylval, scanner);
;
	lda     #<(L0820)
	ldx     #>(L0820)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	jsr     _yylex
	sta     L081E
	stx     L081E+1
;
; if (yychar <= 0)
;
L08D5:	lda     L081E
	cmp     #$01
	lda     L081E+1
	sbc     #$00
	bvc     L08DF
	eor     #$80
L08DF:	bpl     L08DD
;
; yychar = yytoken = 0;
;
	lda     #$00
	sta     L0835
	sta     L0835+1
	sta     L081E
	sta     L081E+1
;
; else
;
	jmp     L08E3
;
; yytoken = ((unsigned int) (yychar) <= 365 ? yytranslate[yychar] : 2);
;
L08DD:	lda     L081E+1
	cmp     #$01
	bne     L08E8
	lda     L081E
	cmp     #$6E
L08E8:	bcs     L08E9
	lda     #<(_yytranslate)
	sta     ptr1
	lda     #>(_yytranslate)
	clc
	adc     L081E+1
	sta     ptr1+1
	ldy     L081E
	lda     (ptr1),y
	ldx     #$00
	jmp     L08EC
L08E9:	ldx     #$00
	lda     #$02
L08EC:	sta     L0835
	stx     L0835+1
;
; yyn += yytoken;
;
L08E3:	lda     L0835
	clc
	adc     L0833
	sta     L0833
	lda     L0835+1
	adc     L0833+1
	sta     L0833+1
;
; if (yyn < 0 || 201 < yyn || yycheck[yyn] != yytoken)
;
	ldx     L0833+1
	cpx     #$80
	bcs     L08F1
	lda     #$C9
	cmp     L0833
	lda     #$00
	sbc     L0833+1
	bvc     L0C9C
	eor     #$80
L0C9C:	bmi     L08F1
	lda     L0833
	ldx     L0833+1
	jsr     aslax1
	clc
	adc     #<(_yycheck)
	tay
	txa
	adc     #>(_yycheck)
	tax
	tya
	jsr     ldaxi
	cpx     L0835+1
	bne     L08F1
	cmp     L0835
	beq     L08F0
;
; do { if (!yy_lac_established) { ; yy_lac_established = 1; { int yy_lac_status = yy_lac (yyesa, &yyes, &yyes_capacity, yyssp, yytoken); if (yy_lac_status == 2) goto yyexhaustedlab; if (yy_lac_status == 1) goto yyerrlab; } } } while (0);
;
L08F1:	lda     L0831
	ora     L0831+1
	jne     L08D4
	sta     L0831+1
	lda     #$01
	sta     L0831
	lda     #<(L082E)
	ldx     #>(L082E)
	jsr     pushax
	lda     #<(L082F)
	ldx     #>(L082F)
	jsr     pushax
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	jsr     _yy_lac
	sta     L08FB
	stx     L08FB+1
	cpx     #$00
	bne     L0CAF
	cmp     #$02
	jeq     L0864
L0CAF:	lda     L08FB+1
	jne     L08D4
	lda     L08FB
	cmp     #$01
	jne     L08D4
	jmp     L0908
;
; yyn = yytable[yyn];
;
L08F0:	lda     #<(_yytable)
	sta     ptr1
	lda     #>(_yytable)
	clc
	adc     L0833+1
	sta     ptr1+1
	ldy     L0833
	lda     (ptr1),y
	ldx     #$00
	sta     L0833
	stx     L0833+1
;
; if (yyn <= 0)
;
	cmp     #$01
	txa
	bvc     L090F
	lda     #$80
L090F:	asl     a
	bcc     L090D
;
; do { if (!yy_lac_established) { ; yy_lac_established = 1; { int yy_lac_status = yy_lac (yyesa, &yyes, &yyes_capacity, yyssp, yytoken); if (yy_lac_status == 2) goto yyexhaustedlab; if (yy_lac_status == 1) goto yyerrlab; } } } while (0);
;
	lda     L0831
	ora     L0831+1
	bne     L0923
	lda     #$01
	sta     L0831
	stx     L0831+1
	lda     #<(L082E)
	ldx     #>(L082E)
	jsr     pushax
	lda     #<(L082F)
	ldx     #>(L082F)
	jsr     pushax
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	jsr     _yy_lac
	sta     L0919
	stx     L0919+1
	cpx     #$00
	bne     L0CB0
	cmp     #$02
	jeq     L0864
L0CB0:	lda     L0919+1
	bne     L0923
	lda     L0919
	cmp     #$01
	jeq     L0908
;
; yyn = -yyn;
;
L0923:	lda     L0833
	ldx     L0833+1
	jsr     negax
	sta     L0833
	stx     L0833+1
;
; goto yyreduce;
;
	jmp     L0929
;
; if (yyerrstatus)
;
L090D:	lda     L0823
	ora     L0823+1
	beq     L092A
;
; yyerrstatus--;
;
	lda     L0823
	ldx     L0823+1
	sta     regsave
	stx     regsave+1
	jsr     decax1
	sta     L0823
	stx     L0823+1
;
; yychar = (-2);
;
L092A:	ldx     #$FF
	lda     #$FE
	sta     L081E
	stx     L081E+1
;
; yy_lac_established = 0;
;
	lda     #$00
	sta     L0831
	sta     L0831+1
;
; yystate = yyn;
;
	lda     L0833
	sta     L0822
	lda     L0833+1
	sta     L0822+1
;
; *++yyvsp = yylval;
;
	lda     #$04
	clc
	adc     L082B
	sta     L082B
	bcc     L0935
	inc     L082B+1
L0935:	ldx     L082B+1
	jsr     pushax
	lda     L0820+3
	sta     sreg+1
	lda     L0820+2
	sta     sreg
	ldx     L0820+1
	lda     L0820
	ldy     #$00
	jsr     steaxspidx
;
; goto yynewstate;
;
	jmp     L085A
;
; yyn = yydefact[yystate];
;
L08D4:	lda     #<(_yydefact)
	sta     ptr1
	lda     #>(_yydefact)
	clc
	adc     L0822+1
	sta     ptr1+1
	ldy     L0822
	lda     (ptr1),y
	sta     L0833
	lda     #$00
	sta     L0833+1
;
; goto yyerrlab;
;
	jmp     L0908
;
; yylen = yyr2[yyn];
;
L0929:	lda     #<(_yyr2)
	sta     ptr1
	lda     #>(_yyr2)
	clc
	adc     L0833+1
	sta     ptr1+1
	ldy     L0833
	lda     (ptr1),y
	sta     L083E
	lda     #$00
	sta     L083E+1
;
; yyval = yyvsp[1-yylen];
;
	lda     #$01
	sec
	sbc     L083E
	pha
	lda     #$00
	sbc     L083E+1
	tax
	pla
	jsr     aslax2
	clc
	adc     L082B
	pha
	txa
	adc     L082B+1
	tax
	pla
	jsr     ldeaxi
	sta     L0837
	stx     L0837+1
	ldy     sreg
	sty     L0837+2
	ldy     sreg+1
	sty     L0837+3
;
; int yychar_backup = yychar;
;
	lda     L081E
	sta     L0943
	lda     L081E+1
	sta     L0943+1
;
; switch (yyn)
;
	lda     L0833
	ldx     L0833+1
;
; }
;
	cpx     #$00
	jne     L0947
	cmp     #$02
	jeq     L0949
	cmp     #$05
	jeq     L0952
	cmp     #$06
	jeq     L095D
	cmp     #$07
	jeq     L0968
	cmp     #$08
	jeq     L0973
	cmp     #$09
	jeq     L0978
	cmp     #$0A
	jeq     L098A
	cmp     #$0B
	jeq     L099F
	cmp     #$0C
	jeq     L09AC
	cmp     #$0D
	jeq     L09B9
	cmp     #$0E
	jeq     L09C6
	cmp     #$0F
	jeq     L09D3
	cmp     #$10
	jeq     L09E0
	cmp     #$11
	jeq     L09EB
	cmp     #$12
	jeq     L09F6
	cmp     #$13
	jeq     L0A03
	cmp     #$14
	jeq     L0A0C
	cmp     #$15
	jeq     L0A13
	cmp     #$16
	jeq     L0A1A
	cmp     #$17
	jeq     L0A21
	cmp     #$18
	jeq     L0A26
	cmp     #$19
	jeq     L0A2B
	cmp     #$1A
	jeq     L0A3B
	cmp     #$1B
	jeq     L0A4C
	cmp     #$1C
	jeq     L0A55
	cmp     #$1D
	jeq     L0A62
	cmp     #$1E
	jeq     L0A6F
	cmp     #$1F
	jeq     L0A7C
	cmp     #$21
	jeq     L0A87
	cmp     #$23
	jeq     L0A92
	cmp     #$27
	jeq     L0A9D
	cmp     #$2A
	jeq     L0AA4
	cmp     #$2B
	jeq     L0AAB
	cmp     #$2C
	jeq     L0AB8
	cmp     #$2D
	jeq     L0AC5
	cmp     #$2E
	jeq     L0AD0
	cmp     #$2F
	jeq     L0AD7
	cmp     #$30
	jeq     L0ADE
	cmp     #$31
	jeq     L0AE5
	cmp     #$32
	jeq     L0AEC
	cmp     #$33
	jeq     L0AFB
	cmp     #$34
	jeq     L0B08
	cmp     #$35
	jeq     L0B15
	cmp     #$36
	jeq     L0B1F
	cmp     #$38
	jeq     L0B2B
	cmp     #$39
	jeq     L0B2F
	cmp     #$3A
	jeq     L0B38
	cmp     #$3F
	jeq     L0B41
	cmp     #$40
	jeq     L0B4B
	cmp     #$41
	jeq     L0B55
	cmp     #$42
	jeq     L0B5A
	cmp     #$43
	jeq     L0B5F
	cmp     #$45
	jeq     L0B64
	jmp     L0947
;
; if(queryData->parseMode != 1) {
;
L0949:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	cpx     #$00
	bne     L0CB1
	cmp     #$01
	jeq     L0947
;
; runCommand((yyvsp[-1].strval));
;
L0CB1:	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     _runCommand
;
; break;
;
	jmp     L0947
;
; if(queryData->parseMode != 1) {
;
L0952:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	cpx     #$00
	bne     L0CB2
	cmp     #$01
	jeq     L0947
;
; readParams((yyvsp[-1].strval), &(queryData->params));
;
L0CB2:	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	ldy     #$05
	jsr     ldaxysp
	ldy     #$0E
	jsr     incaxy
	jsr     pushax
	jsr     _readParams
;
; break;
;
	jmp     L0947
;
; { parse_expCommaList(queryData, (yyvsp[-1].expressionPtr), (yyvsp[0].strval), 0); }
;
L095D:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     push0
	jsr     _parse_expCommaList
;
; break;
;
	jmp     L0947
;
; {parse_expCommaList(queryData, (yyvsp[-1].expressionPtr), (yyvsp[0].strval), 0); }
;
L0968:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     push0
	jsr     _parse_expCommaList
;
; break;
;
	jmp     L0947
;
; { (yyval.strval) = 0; }
;
L0973:	txa
	sta     L0837
	sta     L0837+1
;
; break;
;
	jmp     L0947
;
; { if(queryData->parseMode != 1) { free((yyvsp[0].strval)); (yyval.strval) = 0; } else {(yyval.strval) = (yyvsp[0].strval);} }
;
L0978:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	cpx     #$00
	bne     L0CB3
	cmp     #$01
	beq     L0979
L0CB3:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	jsr     _free
	lda     #$00
	sta     L0837
	sta     L0837+1
	jmp     L0947
L0979:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; if((yyvsp[-2].expressionPtr) != 0) {
;
L098A:	txa
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     ldaxidx
	cpx     #$00
	bne     L0CB4
	cmp     #$00
	beq     L098B
;
; (yyvsp[-2].expressionPtr)->caseSensitive = (stricmp((yyvsp[0].strval),"_sensitive") == 0);
;
L0CB4:	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	lda     #<(L0001+1434)
	ldx     #>(L0001+1434)
	jsr     _stricmp
	cpx     #$00
	bne     L0999
	cmp     #$00
L0999:	jsr     booleq
	ldy     #$0A
	jsr     staxspidx
;
; free((yyvsp[0].strval));
;
L098B:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	jsr     _free
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 4, (yyvsp[0].expressionPtr)); }
;
L099F:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$04
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 5, (yyvsp[0].expressionPtr)); }
;
L09AC:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$05
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 6, (yyvsp[0].expressionPtr)); }
;
L09B9:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$06
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 7, (yyvsp[0].expressionPtr)); }
;
L09C6:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$07
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-3].expressionPtr), 8, (yyvsp[-1].expressionPtr)); }
;
L09D3:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F5
	jsr     pushwidx
	lda     #$08
	jsr     pusha0
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[0].expressionPtr), 9, 0); }
;
L09E0:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	lda     #$09
	jsr     pusha0
	jsr     push0
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[0].expressionPtr), 10, 0); }
;
L09EB:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	lda     #$0A
	jsr     pusha0
	jsr     push0
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExpLiteral(queryData, (yyvsp[0].strval)); free((yyvsp[0].strval)); }
;
L09F6:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExpLiteral
	sta     L0837
	stx     L0837+1
	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	jsr     _free
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExpColumnRef(queryData, (yyvsp[0].referencePtr)); }
;
L0A03:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExpColumnRef
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[0].expressionPtr); }
;
L0A0C:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[-1].expressionPtr); }
;
L0A13:	txa
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     ldaxidx
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.strval) = (yyvsp[0].strval); }
;
L0A1A:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.strval) = 0; }
;
L0A21:	txa
	sta     L0837
	sta     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.strval) = 0; }
;
L0A26:	txa
	sta     L0837
	sta     L0837+1
;
; break;
;
	jmp     L0947
;
; if(parse_columnRefUnsuccessful(queryData, &((yyval.referencePtr)), 0, (yyvsp[0].strval))) {
;
L0A2B:	ldy     #$05
	jsr     pushwysp
	lda     #<(L0837)
	ldx     #>(L0837)
	jsr     pushax
	jsr     push0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_columnRefUnsuccessful
	stx     tmp1
	ora     tmp1
	jeq     L0947
;
; fputs("unknown or ambiguous column name\n", stderr);
;
	lda     #<(L0001+1445)
	ldx     #>(L0001+1445)
	jsr     pushax
	lda     _stderr
	ldx     _stderr+1
	jsr     _fputs
;
; goto yyerrorlab;
;
	jmp     L0C0E
;
; if(parse_columnRefUnsuccessful(queryData, &((yyval.referencePtr)), (yyvsp[-2].strval), (yyvsp[0].strval))) {
;
L0A3B:	ldy     #$05
	jsr     pushwysp
	lda     #<(L0837)
	ldx     #>(L0837)
	jsr     pushax
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_columnRefUnsuccessful
	stx     tmp1
	ora     tmp1
	jeq     L0947
;
; fputs("unknown or ambiguous column name\n", stderr);
;
	lda     #<(L0001+1479)
	ldx     #>(L0001+1479)
	jsr     pushax
	lda     _stderr
	ldx     _stderr+1
	jsr     _fputs
;
; goto yyerrorlab;
;
	jmp     L0C0E
;
; { (yyval.expressionPtr) = parse_functionRefStar(queryData, (yyvsp[-3].intval)); }
;
L0A4C:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F7
	jsr     ldeaxidx
	jsr     pusheax
	jsr     _parse_functionRefStar
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_functionRef(queryData, (yyvsp[-4].intval), (yyvsp[-1].expressionPtr), 1); }
;
L0A55:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F3
	jsr     ldeaxidx
	jsr     pusheax
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	lda     #$01
	jsr     pusha0
	jsr     _parse_functionRef
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_functionRef(queryData, (yyvsp[-4].intval), (yyvsp[-1].expressionPtr), 0); }
;
L0A62:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F3
	jsr     ldeaxidx
	jsr     pusheax
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     push0
	jsr     _parse_functionRef
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_functionRef(queryData, (yyvsp[-3].intval), (yyvsp[-1].expressionPtr), 0); }
;
L0A6F:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F7
	jsr     ldeaxidx
	jsr     pusheax
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     push0
	jsr     _parse_functionRef
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { parse_tableFactor(queryData, 0, (yyvsp[-2].strval), (yyvsp[0].strval)); }
;
L0A7C:	ldy     #$05
	jsr     pushwysp
	jsr     push0
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_tableFactor
;
; break;
;
	jmp     L0947
;
; { parse_tableFactor(queryData, 0, (yyvsp[-2].strval), (yyvsp[0].strval)); }
;
L0A87:	ldy     #$05
	jsr     pushwysp
	jsr     push0
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_tableFactor
;
; break;
;
	jmp     L0947
;
; { parse_tableFactor(queryData, 1, (yyvsp[-2].strval), (yyvsp[0].strval)); }
;
L0A92:	ldy     #$05
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_tableFactor
;
; break;
;
	jmp     L0947
;
; { parse_whereClause(queryData, (yyvsp[0].expressionPtr)); }
;
L0A9D:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_whereClause
;
; break;
;
	jmp     L0947
;
; { parse_whereClause(queryData, (yyvsp[0].expressionPtr)); }
;
L0AA4:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_whereClause
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 11, (yyvsp[0].expressionPtr)); }
;
L0AAB:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$0B
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), 12, (yyvsp[0].expressionPtr)); }
;
L0AB8:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$0C
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[0].expressionPtr), 13, 0); }
;
L0AC5:	ldy     #$05
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	lda     #$0D
	jsr     pusha0
	jsr     push0
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[-1].expressionPtr); }
;
L0AD0:	txa
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     ldaxidx
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[0].expressionPtr); }
;
L0AD7:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[0].expressionPtr); }
;
L0ADE:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = (yyvsp[0].expressionPtr); }
;
L0AE5:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_scalarExp(queryData, (yyvsp[-2].expressionPtr), (yyvsp[-1].intval)+14, (yyvsp[0].expressionPtr)); }
;
L0AEC:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FF
	jsr     ldeaxidx
	ldy     #$0E
	jsr     inceaxy
	jsr     pushax
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExp
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_inPredicate(queryData, (yyvsp[-4].expressionPtr), 0, (yyvsp[-1].atomPtr)); }
;
L0AFB:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F1
	jsr     pushwidx
	jsr     push0
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     _parse_inPredicate
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.expressionPtr) = parse_inPredicate(queryData, (yyvsp[-5].expressionPtr), 1, (yyvsp[-1].atomPtr)); }
;
L0B08:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$ED
	jsr     pushwidx
	lda     #$01
	jsr     pusha0
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	jsr     _parse_inPredicate
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.atomPtr) = parse_atomCommaList(queryData, 0, (yyvsp[0].strval)); }
;
L0B15:	ldy     #$05
	jsr     pushwysp
	jsr     push0
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_atomCommaList
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { (yyval.atomPtr) = parse_atomCommaList(queryData, (yyvsp[-2].atomPtr), (yyvsp[0].strval)); }
;
L0B1F:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$F9
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_atomCommaList
	sta     L0837
	stx     L0837+1
;
; break;
;
	jmp     L0947
;
; { queryData->hasGrouping = 1; }
;
L0B2B:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	lda     #$01
	ldy     #$02
	sta     (sreg),y
	iny
	lda     #$00
;
; break;
;
	jmp     L0CC2
;
; { parse_groupingSpec(queryData, parse_scalarExpColumnRef(queryData, (yyvsp[0].referencePtr))); }
;
L0B2F:	ldy     #$05
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExpColumnRef
	jsr     pushax
	jsr     _parse_groupingSpec
;
; break;
;
	jmp     L0947
;
; { parse_groupingSpec(queryData, parse_scalarExpColumnRef(queryData, (yyvsp[0].referencePtr))); }
;
L0B38:	ldy     #$05
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_scalarExpColumnRef
	jsr     pushax
	jsr     _parse_groupingSpec
;
; break;
;
	jmp     L0947
;
; { parse_orderingSpec(queryData, (yyvsp[-1].expressionPtr), (yyvsp[0].intval)); }
;
L0B41:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_orderingSpec
;
; break;
;
	jmp     L0947
;
; { parse_orderingSpec(queryData, (yyvsp[-1].expressionPtr), (yyvsp[0].intval)); }
;
L0B4B:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	clc
	adc     L082B
	pha
	lda     #$FF
	adc     L082B+1
	tax
	pla
	ldy     #$FD
	jsr     pushwidx
	lda     L082B
	ldx     L082B+1
	jsr     pushw
	jsr     _parse_orderingSpec
;
; break;
;
	jmp     L0947
;
; {(yyval.intval) = 0;}
;
L0B55:	txa
	sta     L0837
	sta     L0837+1
	sta     L0837+2
	sta     L0837+3
;
; break;
;
	jmp     L0947
;
; {(yyval.intval) = 0;}
;
L0B5A:	txa
	sta     L0837
	sta     L0837+1
	sta     L0837+2
	sta     L0837+3
;
; break;
;
	jmp     L0947
;
; {(yyval.intval) = 1;}
;
L0B5F:	lda     #$01
	sta     L0837
	stx     L0837+1
	stx     L0837+2
	stx     L0837+3
;
; break;
;
	jmp     L0947
;
; { if(queryData->parseMode != 1) {free((yyvsp[0].strval));} else {queryData->intoFileName = (yyvsp[0].strval);} }
;
L0B64:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	cpx     #$00
	bne     L0CB5
	cmp     #$01
	beq     L0B65
L0CB5:	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	jsr     _free
	jmp     L0947
L0B65:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	lda     L082B
	ldx     L082B+1
	jsr     ldaxi
	ldy     #$10
	sta     (sreg),y
	iny
	txa
L0CC2:	sta     (sreg),y
;
; if (yychar_backup != yychar)
;
L0947:	lda     L081E
	ldx     L081E+1
	cpx     L0943+1
	bne     L0CB6
	cmp     L0943
	beq     L0B72
;
; yy_lac_established = 0;
;
L0CB6:	lda     #$00
	sta     L0831
	sta     L0831+1
;
; (yyvsp -= (yylen), yyssp -= (yylen));
;
L0B72:	lda     L083E
	ldx     L083E+1
	jsr     aslax2
	eor     #$FF
	sec
	adc     L082B
	sta     L082B
	txa
	eor     #$FF
	adc     L082B+1
	sta     L082B+1
	lda     L083E
	ldx     L083E+1
	jsr     aslax1
	eor     #$FF
	sec
	adc     L0827
	sta     L0827
	txa
	eor     #$FF
	adc     L0827+1
	sta     L0827+1
;
; yylen = 0;
;
	lda     #$00
	sta     L083E
	sta     L083E+1
;
; *++yyvsp = yyval;
;
	lda     #$04
	clc
	adc     L082B
	sta     L082B
	bcc     L0B80
	inc     L082B+1
L0B80:	ldx     L082B+1
	jsr     pushax
	lda     L0837+3
	sta     sreg+1
	lda     L0837+2
	sta     sreg
	ldx     L0837+1
	lda     L0837
	ldy     #$00
	jsr     steaxspidx
;
; yyn = yyr1[yyn];
;
	lda     #<(_yyr1)
	sta     ptr1
	lda     #>(_yyr1)
	clc
	adc     L0833+1
	sta     ptr1+1
	ldy     L0833
	lda     (ptr1),y
	ldx     #$00
	sta     L0833
	stx     L0833+1
;
; yystate = yypgoto[yyn - 120] + *yyssp;
;
	ldy     #$78
	jsr     decaxy
	clc
	adc     #<(_yypgoto)
	tay
	txa
	adc     #>(_yypgoto)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	sta     sreg
	stx     sreg+1
	lda     L0827
	ldx     L0827+1
	jsr     ldaxi
	clc
	adc     sreg
	sta     L0822
	txa
	adc     sreg+1
	sta     L0822+1
;
; if (0 <= yystate && yystate <= 201 && yycheck[yystate] == *yyssp)
;
	jsr     push0
	lda     L0822
	ldx     L0822+1
	jsr     tosicmp
	beq     L0CAB
	bpl     L0B88
L0CAB:	lda     L0822
	cmp     #$CA
	lda     L0822+1
	sbc     #$00
	bvc     L0B8B
	eor     #$80
L0B8B:	bpl     L0B88
	lda     L0822
	ldx     L0822+1
	jsr     aslax1
	clc
	adc     #<(_yycheck)
	tay
	txa
	adc     #>(_yycheck)
	tax
	tya
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L0827
	ldx     L0827+1
	jsr     ldaxi
	cpx     sreg+1
	bne     L0B88
	cmp     sreg
	bne     L0B88
;
; yystate = yytable[yystate];
;
	lda     #<(_yytable)
	sta     ptr1
	lda     #>(_yytable)
	clc
	adc     L0822+1
	sta     ptr1+1
	ldy     L0822
	lda     (ptr1),y
	sta     L0822
	lda     #$00
	sta     L0822+1
;
; else
;
	jmp     L085A
;
; yystate = yydefgoto[yyn - 120];
;
L0B88:	lda     L0833
	ldx     L0833+1
	ldy     #$78
	jsr     decaxy
	jsr     aslax1
	clc
	adc     #<(_yydefgoto)
	tay
	txa
	adc     #>(_yydefgoto)
	tax
	tya
	jsr     ldaxi
	sta     L0822
	stx     L0822+1
;
; goto yynewstate;
;
	jmp     L085A
;
; yytoken = yychar == (-2) ? (-2) : ((unsigned int) (yychar) <= 365 ? yytranslate[yychar] : 2);
;
L0908:	lda     L081E+1
	cmp     #$FF
	bne     L0B99
	lda     L081E
	cmp     #$FE
	bne     L0B99
	ldx     #$FF
	jmp     L0BA4
L0B99:	lda     L081E+1
	cmp     #$01
	bne     L0BA0
	lda     L081E
	cmp     #$6E
L0BA0:	bcs     L0BA1
	lda     #<(_yytranslate)
	sta     ptr1
	lda     #>(_yytranslate)
	clc
	adc     L081E+1
	sta     ptr1+1
	ldy     L081E
	lda     (ptr1),y
	ldx     #$00
	jmp     L0BA4
L0BA1:	ldx     #$00
	lda     #$02
L0BA4:	sta     L0835
	stx     L0835+1
;
; if (!yyerrstatus)
;
	lda     L0823
	ora     L0823+1
	jne     L0BF7
;
; ++yynerrs;
;
	inc     L0821
	bne     L0BA9
	inc     L0821+1
;
; char const *yymsgp = "syntax error";
;
L0BA9:	lda     #<(L0001+1513)
	sta     L0BAA
	lda     #>(L0001+1513)
	sta     L0BAA+1
;
; if (yychar != (-2))
;
	lda     L081E+1
	cmp     #$FF
	bne     L0CB8
	lda     L081E
	cmp     #$FE
	beq     L0BC2
;
; do { if (!yy_lac_established) { ; yy_lac_established = 1; { int yy_lac_status = yy_lac (yyesa, &yyes, &yyes_capacity, yyssp, yytoken); if (yy_lac_status == 2) goto yyexhaustedlab; if (yy_lac_status == 1) goto yyerrlab; } } } while (0);
;
L0CB8:	lda     L0831
	ora     L0831+1
	bne     L0BC2
	sta     L0831+1
	lda     #$01
	sta     L0831
	lda     #<(L082E)
	ldx     #>(L082E)
	jsr     pushax
	lda     #<(L082F)
	ldx     #>(L082F)
	jsr     pushax
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	jsr     _yy_lac
	sta     L0BB8
	stx     L0BB8+1
	cpx     #$00
	bne     L0CB9
	cmp     #$02
	jeq     L0864
L0CB9:	lda     L0BB8+1
	bne     L0BC2
	lda     L0BB8
	cmp     #$01
	jeq     L0908
;
; yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, yyesa, &yyes, &yyes_capacity, yyssp, yytoken);
;
L0BC2:	lda     #<(L083C)
	ldx     #>(L083C)
	jsr     pushax
	lda     #<(L083A)
	ldx     #>(L083A)
	jsr     pushax
	lda     #<(L082E)
	ldx     #>(L082E)
	jsr     pushax
	lda     #<(L082F)
	ldx     #>(L082F)
	jsr     pushax
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	jsr     _yysyntax_error
	sta     L0BAC
	stx     L0BAC+1
;
; if (yysyntax_error_status == 0)
;
	cpx     #$00
	bne     L0BCF
	cmp     #$00
;
; else if (yysyntax_error_status == 1)
;
	jeq     L0CC6
L0BCF:	lda     L0BAC+1
	jne     L0BE7
	lda     L0BAC
	cmp     #$01
	jne     L0BE7
;
; if (yymsg != yymsgbuf)
;
	lda     #<(L0839)
	ldx     #>(L0839)
	cpx     L083A+1
	bne     L0CBA
	cmp     L083A
	beq     L0BD8
;
; free (yymsg);
;
L0CBA:	lda     L083A
	ldx     L083A+1
	jsr     _free
;
; yymsg = (char *) malloc (yymsg_alloc);
;
L0BD8:	lda     L083C
	ldx     L083C+1
	jsr     _malloc
	sta     L083A
	stx     L083A+1
;
; if (!yymsg)
;
	lda     L083A
	ora     L083A+1
	bne     L0BDF
;
; yymsg = yymsgbuf;
;
	lda     #<(L0839)
	sta     L083A
	lda     #>(L0839)
	sta     L083A+1
;
; yymsg_alloc = sizeof yymsgbuf;
;
	ldx     #$00
	lda     #$80
	sta     L083C
	stx     L083C+1
	stx     L083C+2
	stx     L083C+3
;
; yysyntax_error_status = 2;
;
	lda     #$02
	sta     L0BAC
	stx     L0BAC+1
;
; else
;
	jmp     L0BE7
;
; yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, yyesa, &yyes, &yyes_capacity, yyssp, yytoken);
;
L0BDF:	lda     #<(L083C)
	ldx     #>(L083C)
	jsr     pushax
	lda     #<(L083A)
	ldx     #>(L083A)
	jsr     pushax
	lda     #<(L082E)
	ldx     #>(L082E)
	jsr     pushax
	lda     #<(L082F)
	ldx     #>(L082F)
	jsr     pushax
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     pushax
	lda     L0827
	ldx     L0827+1
	jsr     pushax
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	jsr     _yysyntax_error
	sta     L0BAC
	stx     L0BAC+1
;
; yymsgp = yymsg;
;
L0CC6:	lda     L083A
	sta     L0BAA
	lda     L083A+1
	sta     L0BAA+1
;
; yyerror (queryData, scanner, yymsgp);
;
L0BE7:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	lda     L0BAA
	ldx     L0BAA+1
	jsr     pushax
	jsr     _yyerror
;
; if (yysyntax_error_status == 2)
;
	lda     L0BAC+1
	bne     L0BF7
	lda     L0BAC
	cmp     #$02
;
; goto yyexhaustedlab;
;
	jeq     L0864
;
; if (yyerrstatus == 3)
;
L0BF7:	lda     L0823+1
	jne     L0C0D
	lda     L0823
	cmp     #$03
	jne     L0C0D
;
; if (yychar <= 0)
;
	lda     L081E
	cmp     #$01
	lda     L081E+1
	sbc     #$00
	bvc     L0BFF
	eor     #$80
L0BFF:	bpl     L0BFD
;
; if (yychar == 0)
;
	lda     L081E
	ora     L081E+1
	jne     L0C0D
;
; goto yyabortlab;
;
	jmp     L08C4
;
; yydestruct ("Error: discarding",
;
L0BFD:	lda     #<(L0001+1526)
	ldx     #>(L0001+1526)
	jsr     pushax
;
; yytoken, &yylval, queryData, scanner);
;
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	lda     #<(L0820)
	ldx     #>(L0820)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	jsr     _yydestruct
;
; yychar = (-2);
;
	ldx     #$FF
	lda     #$FE
	sta     L081E
	stx     L081E+1
;
; goto yyerrlab1;
;
	jmp     L0C0D
;
; (yyvsp -= (yylen), yyssp -= (yylen));
;
L0C0E:	lda     L083E
	ldx     L083E+1
	jsr     aslax2
	eor     #$FF
	sec
	adc     L082B
	sta     L082B
	txa
	eor     #$FF
	adc     L082B+1
	sta     L082B+1
	lda     L083E
	ldx     L083E+1
	jsr     aslax1
	eor     #$FF
	sec
	adc     L0827
	sta     L0827
	txa
	eor     #$FF
	adc     L0827+1
	sta     L0827+1
;
; yylen = 0;
;
	lda     #$00
	sta     L083E
	sta     L083E+1
;
; yystate = *yyssp;
;
	lda     L0827
	ldx     L0827+1
	jsr     ldaxi
	sta     L0822
	stx     L0822+1
;
; yyerrstatus = 3;
;
L0C0D:	ldx     #$00
	lda     #$03
	sta     L0823
	stx     L0823+1
;
; yyn = yypact[yystate];
;
L0C20:	lda     L0822
	ldx     L0822+1
	jsr     aslax1
	clc
	adc     #<(_yypact)
	tay
	txa
	adc     #>(_yypact)
	tax
	tya
	jsr     ldaxi
	sta     L0833
	stx     L0833+1
;
; if (!(!!((yyn) == (-102))))
;
	cpx     #$FF
	bne     L0C2A
	cmp     #$9A
L0C2A:	jsr     booleq
	jsr     bnega
	jsr     bnegax
	stx     tmp1
	ora     tmp1
	bne     L0C38
;
; yyn += 1;
;
	inc     L0833
	bne     L0C2D
	inc     L0833+1
;
; if (0 <= yyn && yyn <= 201 && yycheck[yyn] == 1)
;
L0C2D:	jsr     push0
	lda     L0833
	ldx     L0833+1
	jsr     tosicmp
	beq     L0CAC
	bpl     L0C38
L0CAC:	lda     L0833
	cmp     #$CA
	lda     L0833+1
	sbc     #$00
	bvc     L0C31
	eor     #$80
L0C31:	bpl     L0C38
	lda     L0833
	ldx     L0833+1
	jsr     aslax1
	clc
	adc     #<(_yycheck)
	tay
	txa
	adc     #>(_yycheck)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L0C38
	cmp     #$01
	bne     L0C38
;
; yyn = yytable[yyn];
;
	lda     #<(_yytable)
	sta     ptr1
	lda     #>(_yytable)
	clc
	adc     L0833+1
	sta     ptr1+1
	ldy     L0833
	lda     (ptr1),y
	sta     L0833
	txa
	sta     L0833+1
;
; if (0 < yyn)
;
	cmp     L0833
	sbc     L0833+1
	bvc     L0CA1
	eor     #$80
;
; break;
;
L0CA1:	bmi     L0C1E
;
; if (yyssp == yyss)
;
L0C38:	lda     L0826
	ldx     L0826+1
	cpx     L0827+1
	bne     L0CBC
	cmp     L0827
;
; goto yyabortlab;
;
	jeq     L08C4
;
; yydestruct ("Error: popping",
;
L0CBC:	lda     #<(L0001+1544)
	ldx     #>(L0001+1544)
	jsr     pushax
;
; yystos[yystate], yyvsp, queryData, scanner);
;
	lda     #<(_yystos)
	sta     ptr1
	lda     #>(_yystos)
	clc
	adc     L0822+1
	sta     ptr1+1
	ldy     L0822
	lda     (ptr1),y
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	jsr     _yydestruct
;
; (yyvsp -= (1), yyssp -= (1));
;
	lda     L082B
	sec
	sbc     #$04
	sta     L082B
	bcs     L0C47
	dec     L082B+1
L0C47:	lda     L0827
	sec
	sbc     #$02
	sta     L0827
	bcs     L0C4B
	dec     L0827+1
;
; yystate = *yyssp;
;
L0C4B:	lda     L0827
	ldx     L0827+1
	jsr     ldaxi
	sta     L0822
	stx     L0822+1
;
; }
;
	jmp     L0C20
;
; yy_lac_established = 0;
;
L0C1E:	txa
	sta     L0831
	sta     L0831+1
;
; *++yyvsp = yylval;
;
	lda     #$04
	clc
	adc     L082B
	sta     L082B
	bcc     L0C51
	inc     L082B+1
L0C51:	ldx     L082B+1
	jsr     pushax
	lda     L0820+3
	sta     sreg+1
	lda     L0820+2
	sta     sreg
	ldx     L0820+1
	lda     L0820
	ldy     #$00
	jsr     steaxspidx
;
; yystate = yyn;
;
	lda     L0833
	sta     L0822
	lda     L0833+1
	sta     L0822+1
;
; goto yynewstate;
;
	jmp     L085A
;
; yyresult = 0;
;
L08C8:	ldx     #$00
	txa
;
; goto yyreturn;
;
	jmp     L0CC4
;
; yyresult = 1;
;
L08C4:	ldx     #$00
	lda     #$01
;
; goto yyreturn;
;
	jmp     L0CC4
;
; yyerror (queryData, scanner, "memory exhausted");
;
L0864:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	lda     #<(L0001+1559)
	ldx     #>(L0001+1559)
	jsr     pushax
	jsr     _yyerror
;
; yyresult = 2;
;
	ldx     #$00
	lda     #$02
L0CC4:	sta     L0834
	stx     L0834+1
;
; if (yychar != (-2))
;
	lda     L081E+1
	cmp     #$FF
	bne     L0CBD
	lda     L081E
	cmp     #$FE
	beq     L0C60
;
; yytoken = ((unsigned int) (yychar) <= 365 ? yytranslate[yychar] : 2);
;
L0CBD:	lda     L081E+1
	cmp     #$01
	bne     L0C68
	lda     L081E
	cmp     #$6E
L0C68:	bcs     L0C69
	lda     #<(_yytranslate)
	sta     ptr1
	lda     #>(_yytranslate)
	clc
	adc     L081E+1
	sta     ptr1+1
	ldy     L081E
	lda     (ptr1),y
	jmp     L0C6C
L0C69:	lda     #$02
L0C6C:	sta     L0835
	stx     L0835+1
;
; yydestruct ("Cleanup: discarding lookahead",
;
	lda     #<(L0001+1576)
	ldx     #>(L0001+1576)
	jsr     pushax
;
; yytoken, &yylval, queryData, scanner);
;
	lda     L0835
	ldx     L0835+1
	jsr     pushax
	lda     #<(L0820)
	ldx     #>(L0820)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	jsr     _yydestruct
;
; (yyvsp -= (yylen), yyssp -= (yylen));
;
L0C60:	lda     L083E
	ldx     L083E+1
	jsr     aslax2
	eor     #$FF
	sec
	adc     L082B
	sta     L082B
	txa
	eor     #$FF
	adc     L082B+1
	sta     L082B+1
	lda     L083E
	ldx     L083E+1
	jsr     aslax1
	eor     #$FF
	sec
	adc     L0827
	sta     L0827
	txa
	eor     #$FF
	adc     L0827+1
	sta     L0827+1
;
; while (yyssp != yyss)
;
L0C7B:	lda     L0826
	ldx     L0826+1
	cpx     L0827+1
	bne     L0CBE
	cmp     L0827
	beq     L0C7C
;
; yydestruct ("Cleanup: popping",
;
L0CBE:	lda     #<(L0001+1606)
	ldx     #>(L0001+1606)
	jsr     pushax
;
; yystos[*yyssp], yyvsp, queryData, scanner);
;
	lda     L0827
	ldx     L0827+1
	jsr     ldaxi
	sta     ptr1
	txa
	clc
	adc     #>(_yystos)
	sta     ptr1+1
	ldy     #<(_yystos)
	lda     (ptr1),y
	jsr     pusha0
	lda     L082B
	ldx     L082B+1
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	jsr     _yydestruct
;
; (yyvsp -= (1), yyssp -= (1));
;
	lda     L082B
	sec
	sbc     #$04
	sta     L082B
	bcs     L0C89
	dec     L082B+1
L0C89:	lda     L0827
	sec
	sbc     #$02
	sta     L0827
	bcs     L0C7B
	dec     L0827+1
;
; }
;
	jmp     L0C7B
;
; if (yyss != yyssa)
;
L0C7C:	lda     #<(L0825)
	ldx     #>(L0825)
	cpx     L0826+1
	bne     L0CBF
	cmp     L0826
	beq     L0C8E
;
; free (yyss);
;
L0CBF:	lda     L0826
	ldx     L0826+1
	jsr     _free
;
; if (yyes != yyesa)
;
L0C8E:	lda     #<(L082E)
	ldx     #>(L082E)
	cpx     L082F+1
	bne     L0CC0
	cmp     L082F
	beq     L0C92
;
; free (yyes);
;
L0CC0:	lda     L082F
	ldx     L082F+1
	jsr     _free
;
; if (yymsg != yymsgbuf)
;
L0C92:	lda     #<(L0839)
	ldx     #>(L0839)
	cpx     L083A+1
	bne     L0CC1
	cmp     L083A
	beq     L0C96
;
; free (yymsg);
;
L0CC1:	lda     L083A
	ldx     L083A+1
	jsr     _free
;
; return yyresult;
;
L0C96:	lda     L0834
	ldx     L0834+1
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yy_lac_stack_realloc (__near__ unsigned long*, unsigned long, __near__ __near__ signed short**, __near__ signed short*, __near__ __near__ signed short**, __near__ signed short*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_lac_stack_realloc: near

.segment	"BSS"

L0679:
	.res	4,$00
L067F:
	.res	4,$00
L0683:
	.res	4,$00
L0685:
	.res	2,$00
L0698:
	.res	4,$00

.segment	"CODE"

;
; *yytop == yytop_empty ? 0 : *yytop - *yybottom + 1;
;
	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	ldy     #$00
	cmp     (sp),y
	bne     L067B
	txa
	iny
	cmp     (sp),y
	bne     L067B
	ldx     #$00
	txa
	jmp     L067D
L067B:	ldy     #$03
	jsr     ldaxysp
	jsr     pushw
	ldy     #$09
	jsr     ldaxysp
	jsr     ldaxi
	jsr     tossubax
	jsr     asrax1
	jsr     incax1
L067D:	jsr     axlong
	sta     L0679
	stx     L0679+1
	ldy     sreg
	sty     L0679+2
	ldy     sreg+1
	sty     L0679+3
;
; long unsigned int yysize_new = yysize_old + yyadd;
;
	lda     L0679+3
	sta     sreg+1
	lda     L0679+2
	sta     sreg
	ldx     L0679+1
	lda     L0679
	jsr     pusheax
	ldy     #$0F
	jsr     ldeaxysp
	jsr     tosaddeax
	sta     L067F
	stx     L067F+1
	ldy     sreg
	sty     L067F+2
	ldy     sreg+1
	sty     L067F+3
;
; if (*yycapacity < yysize_new)
;
	ldy     #$0D
	jsr     ldaxysp
	jsr     ldeaxi
	jsr     pusheax
	lda     L067F+3
	sta     sreg+1
	lda     L067F+2
	sta     sreg
	ldx     L067F+1
	lda     L067F
	jsr     tosulteax
	jeq     L0681
;
; long unsigned int yyalloc = 2 * yysize_new;
;
	lda     #$02
	jsr     pusha0
	lda     L067F+3
	sta     sreg+1
	lda     L067F+2
	sta     sreg
	ldx     L067F+1
	lda     L067F
	jsr     toslong
	jsr     tosumuleax
	sta     L0683
	stx     L0683+1
	ldy     sreg
	sty     L0683+2
	ldy     sreg+1
	sty     L0683+3
;
; if (10000 < yysize_new)
;
	ldx     #$27
	lda     #$10
	jsr     pushax
	lda     L067F+3
	sta     sreg+1
	lda     L067F+2
	sta     sreg
	ldx     L067F+1
	lda     L067F
	jsr     toslong
	jsr     tosulteax
	beq     L0686
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     L0678
;
; if (10000 < yyalloc)
;
L0686:	ldx     #$27
	lda     #$10
	jsr     pushax
	lda     L0683+3
	sta     sreg+1
	lda     L0683+2
	sta     sreg
	ldx     L0683+1
	lda     L0683
	jsr     toslong
	jsr     tosulteax
	beq     L0689
;
; yyalloc = 10000;
;
	ldx     #$27
	lda     #$10
	sta     L0683
	stx     L0683+1
	ldy     #$00
	sty     L0683+2
	sty     L0683+3
;
; (yytype_int16*) malloc (yyalloc * sizeof *yybottom_new);
;
L0689:	lda     L0683+3
	sta     sreg+1
	lda     L0683+2
	sta     sreg
	ldx     L0683+1
	lda     L0683
	jsr     shleax1
	jsr     _malloc
	sta     L0685
	stx     L0685+1
;
; if (!yybottom_new)
;
	lda     L0685
	ora     L0685+1
	bne     L0690
;
; return 1;
;
	tax
	lda     #$01
	jmp     L0678
;
; if (*yytop != yytop_empty)
;
L0690:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	ldy     #$00
	cmp     (sp),y
	bne     L0CCA
	txa
	iny
	cmp     (sp),y
	jeq     L0693
;
; do { long unsigned int yyi; for (yyi = 0; yyi < (yysize_old); yyi++) (yybottom_new)[yyi] = (*yybottom)[yyi]; } while (0);
;
L0CCA:	lda     #$00
	sta     L0698
	sta     L0698+1
	sta     L0698+2
	sta     L0698+3
L0699:	lda     L0698+3
	sta     sreg+1
	lda     L0698+2
	sta     sreg
	ldx     L0698+1
	lda     L0698
	jsr     pusheax
	lda     L0679+3
	sta     sreg+1
	lda     L0679+2
	sta     sreg
	ldx     L0679+1
	lda     L0679
	jsr     tosulteax
	beq     L069A
	ldx     L0698+1
	lda     L0698
	jsr     aslax1
	clc
	adc     L0685
	sta     sreg
	txa
	adc     L0685+1
	sta     sreg+1
	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldx     L0698+1
	lda     L0698
	jsr     aslax1
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     L0698+3
	sta     sreg+1
	lda     L0698+2
	sta     sreg
	ldx     L0698+1
	lda     L0698
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	sta     L0698
	stx     L0698+1
	ldy     sreg
	sty     L0698+2
	ldy     sreg+1
	sty     L0698+3
	jsr     resteax
	jmp     L0699
;
; *yytop = yybottom_new + (yysize_old - 1);
;
L069A:	ldy     #$05
	jsr     pushwysp
	lda     L0685
	ldx     L0685+1
	jsr     pushax
	lda     L0679+3
	sta     sreg+1
	lda     L0679+2
	sta     sreg
	ldx     L0679+1
	lda     L0679
	ldy     #$01
	jsr     deceaxy
	jsr     aslax1
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (*yybottom != yybottom_no_free)
;
L0693:	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	ldy     #$04
	cmp     (sp),y
	bne     L0CCB
	txa
	iny
	cmp     (sp),y
	beq     L06AC
;
; free (*yybottom);
;
L0CCB:	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _free
;
; *yybottom = yybottom_new;
;
L06AC:	ldy     #$07
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	lda     L0685
	ldy     #$00
	sta     (sreg),y
	iny
	lda     L0685+1
	sta     (sreg),y
;
; *yycapacity = yyalloc;
;
	ldy     #$0F
	jsr     pushwysp
	lda     L0683+3
	sta     sreg+1
	lda     L0683+2
	sta     sreg
	ldx     L0683+1
	lda     L0683
	ldy     #$00
	jsr     steaxspidx
;
; return 0;
;
L0681:	ldx     #$00
	txa
;
; }
;
L0678:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ yy_lac (__near__ signed short*, __near__ __near__ signed short**, __near__ unsigned long*, __near__ signed short*, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yy_lac: near

.segment	"BSS"

L06B6:
	.res	2,$00
L06B8:
	.res	2,$00
L06C1:
	.res	2,$00
L06E2:
	.res	4,$00
L06E7:
	.res	4,$00
L06F9:
	.res	2,$00
L06FA:
	.res	2,$00

.segment	"CODE"

;
; yytype_int16 *yyes_prev = yyssp;
;
	ldy     #$03
	jsr     ldaxysp
	sta     L06B6
	stx     L06B6+1
;
; yytype_int16 *yyesp = yyes_prev;
;
	sta     L06B8
	stx     L06B8+1
;
; if (yytoken == 2)
;
	ldy     #$01
	lda     (sp),y
	bne     L06BA
	dey
	lda     (sp),y
	cmp     #$02
	bne     L06BA
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     L06BF
;
; int yyrule = yypact[*yyesp];
;
L06BA:	lda     L06B8
	ldx     L06B8+1
	jsr     ldaxi
	jsr     aslax1
	clc
	adc     #<(_yypact)
	tay
	txa
	adc     #>(_yypact)
	tax
	tya
	jsr     ldaxi
	sta     L06C1
	stx     L06C1+1
;
; if ((!!((yyrule) == (-102)))
;
	cpx     #$FF
	bne     L06CA
	cmp     #$9A
L06CA:	jsr     booleq
	jsr     bnega
	stx     tmp1
	ora     tmp1
;
; || (yyrule += yytoken) < 0 || 201 < yyrule
;
	beq     L06C5
	jsr     ldax0sp
	clc
	adc     L06C1
	sta     L06C1
	txa
	adc     L06C1+1
	sta     L06C1+1
	tax
	cpx     #$80
	bcs     L06C5
	lda     #$C9
;
; || yycheck[yyrule] != yytoken)
;
	cmp     L06C1
;
; || (yyrule += yytoken) < 0 || 201 < yyrule
;
	lda     #$00
;
; || yycheck[yyrule] != yytoken)
;
	sbc     L06C1+1
	bvc     L0CCC
	eor     #$80
L0CCC:	bmi     L06C5
	lda     L06C1
	ldx     L06C1+1
	jsr     aslax1
	clc
	adc     #<(_yycheck)
	tay
	txa
	adc     #>(_yycheck)
	tax
	tya
	jsr     ldaxi
	ldy     #$00
	cmp     (sp),y
	bne     L06C5
	txa
	iny
	cmp     (sp),y
	beq     L06C4
;
; yyrule = yydefact[*yyesp];
;
L06C5:	lda     L06B8
	ldx     L06B8+1
	jsr     ldaxi
	sta     ptr1
	txa
	clc
	adc     #>(_yydefact)
	sta     ptr1+1
	ldy     #<(_yydefact)
	lda     (ptr1),y
	ldx     #$00
	sta     L06C1
	stx     L06C1+1
;
; if (yyrule == 0)
;
	cmp     #$00
	bne     L06D6
;
; return 1;
;
	lda     #$01
	jmp     L06BF
;
; yyrule = yytable[yyrule];
;
L06C4:	lda     #<(_yytable)
	sta     ptr1
	lda     #>(_yytable)
	clc
	adc     L06C1+1
	sta     ptr1+1
	ldy     L06C1
	lda     (ptr1),y
	sta     L06C1
	lda     #$00
	sta     L06C1+1
;
; if (0 < yyrule)
;
	tax
	cmp     L06C1
	sbc     L06C1+1
	bvc     L0CCE
	eor     #$80
L0CCE:	bpl     L06DD
;
; return 0;
;
	txa
	jmp     L06BF
;
; yyrule = -yyrule;
;
L06DD:	lda     L06C1
	ldx     L06C1+1
	jsr     negax
	sta     L06C1
	stx     L06C1+1
;
; long unsigned int yylen = yyr2[yyrule];
;
L06D6:	lda     #<(_yyr2)
	sta     ptr1
	lda     #>(_yyr2)
	clc
	adc     L06C1+1
	sta     ptr1+1
	ldy     L06C1
	ldx     #$00
	lda     (ptr1),y
	jsr     aulong
	jsr     axulong
	sta     L06E2
	stx     L06E2+1
	ldy     sreg
	sty     L06E2+2
	ldy     sreg+1
	sty     L06E2+3
;
; if (yyesp != yyes_prev)
;
	lda     L06B6
	ldx     L06B6+1
	cpx     L06B8+1
	bne     L0CD3
	cmp     L06B8
	jeq     L06EF
;
; long unsigned int yysize = yyesp - *yyes + 1;
;
L0CD3:	lda     L06B8
	ldx     L06B8+1
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     ldaxi
	jsr     tossubax
	jsr     asrax1
	jsr     incax1
	jsr     axlong
	sta     L06E7
	stx     L06E7+1
	ldy     sreg
	sty     L06E7+2
	ldy     sreg+1
	sty     L06E7+3
;
; if (yylen < yysize)
;
	lda     L06E2+3
	sta     sreg+1
	lda     L06E2+2
	sta     sreg
	ldx     L06E2+1
	lda     L06E2
	jsr     pusheax
	lda     L06E7+3
	sta     sreg+1
	lda     L06E7+2
	sta     sreg
	ldx     L06E7+1
	lda     L06E7
	jsr     tosulteax
	beq     L06E9
;
; yyesp -= yylen;
;
	lda     L06E2+3
	sta     sreg+1
	lda     L06E2+2
	sta     sreg
	ldx     L06E2+1
	lda     L06E2
	jsr     shleax1
	eor     #$FF
	sec
	adc     L06B8
	sta     L06B8
	txa
	eor     #$FF
	adc     L06B8+1
	sta     L06B8+1
;
; yylen = 0;
;
	lda     #$00
	sta     L06E2
	sta     L06E2+1
	sta     L06E2+2
	sta     L06E2+3
;
; else
;
	jmp     L06EF
;
; yylen -= yysize;
;
L06E9:	lda     L06E7+3
	sta     sreg+1
	lda     L06E7+2
	sta     sreg
	ldx     L06E7+1
	lda     L06E7
	ldy     #<(L06E2)
	sty     ptr1
	ldy     #>(L06E2)
	jsr     lsubeq
;
; yyesp = yyes_prev;
;
	lda     L06B6
	sta     L06B8
	lda     L06B6+1
	sta     L06B8+1
;
; if (yylen)
;
L06EF:	lda     L06E2+3
	ora     L06E2+2
	ora     L06E2+1
	ora     L06E2+0
	beq     L06F4
;
; yyesp = yyes_prev -= yylen;
;
	lda     L06E2+3
	sta     sreg+1
	lda     L06E2+2
	sta     sreg
	ldx     L06E2+1
	lda     L06E2
	jsr     shleax1
	eor     #$FF
	sec
	adc     L06B6
	sta     L06B6
	txa
	eor     #$FF
	adc     L06B6+1
	sta     L06B6+1
	sta     L06B8+1
	lda     L06B6
	sta     L06B8
;
; int yylhs = yyr1[yyrule] - 120;
;
L06F4:	lda     #<(_yyr1)
	sta     ptr1
	lda     #>(_yyr1)
	clc
	adc     L06C1+1
	sta     ptr1+1
	ldy     L06C1
	ldx     #$00
	lda     (ptr1),y
	ldy     #$78
	jsr     decaxy
	sta     L06FA
	stx     L06FA+1
;
; yystate = yypgoto[yylhs] + *yyesp;
;
	lda     #<(_yypgoto)
	clc
	adc     L06FA
	tay
	lda     #>(_yypgoto)
	adc     L06FA+1
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	sta     sreg
	stx     sreg+1
	lda     L06B8
	ldx     L06B8+1
	jsr     ldaxi
	clc
	adc     sreg
	sta     L06F9
	txa
	adc     sreg+1
	tax
	stx     L06F9+1
;
; if (yystate < 0 || 201 < yystate
;
	cpx     #$80
	bcs     L0701
	lda     #$C9
;
; || yycheck[yystate] != *yyesp)
;
	cmp     L06F9
;
; if (yystate < 0 || 201 < yystate
;
	lda     #$00
;
; || yycheck[yystate] != *yyesp)
;
	sbc     L06F9+1
	bvc     L0CD0
	eor     #$80
L0CD0:	bmi     L0701
	lda     L06F9
	ldx     L06F9+1
	jsr     aslax1
	clc
	adc     #<(_yycheck)
	tay
	txa
	adc     #>(_yycheck)
	tax
	tya
	jsr     ldaxi
	sta     sreg
	stx     sreg+1
	lda     L06B8
	ldx     L06B8+1
	jsr     ldaxi
	cpx     sreg+1
	bne     L0701
	cmp     sreg
	beq     L0700
;
; yystate = yydefgoto[yylhs];
;
L0701:	lda     L06FA
	ldx     L06FA+1
	jsr     aslax1
	clc
	adc     #<(_yydefgoto)
	tay
	txa
	adc     #>(_yydefgoto)
	tax
	tya
	jsr     ldaxi
	sta     L06F9
	stx     L06F9+1
;
; else
;
	jmp     L0707
;
; yystate = yytable[yystate];
;
L0700:	lda     #<(_yytable)
	sta     ptr1
	lda     #>(_yytable)
	clc
	adc     L06F9+1
	sta     ptr1+1
	ldy     L06F9
	lda     (ptr1),y
	sta     L06F9
	lda     #$00
	sta     L06F9+1
;
; if (yyesp == yyes_prev)
;
L0707:	lda     L06B6
	ldx     L06B6+1
	cpx     L06B8+1
	bne     L070B
	cmp     L06B8
	bne     L070B
;
; yyesp = *yyes;
;
	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	sta     L06B8
	stx     L06B8+1
;
; *yyesp = yystate;
;
	sta     ptr1
	stx     ptr1+1
	lda     L06F9
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     L06F9+1
	sta     (ptr1),y
;
; else
;
	jmp     L06BA
;
; if (yy_lac_stack_realloc (yyes_capacity, 1,
;
L070B:	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$01
	jsr     push0ax
;
; yyes, yyesa, &yyesp, yyes_prev))
;
	ldy     #$0F
	jsr     pushwysp
	ldy     #$13
	jsr     pushwysp
	lda     #<(L06B8)
	ldx     #>(L06B8)
	jsr     pushax
	lda     L06B6
	ldx     L06B6+1
	jsr     pushax
	jsr     _yy_lac_stack_realloc
	stx     tmp1
	ora     tmp1
	beq     L0712
;
; return 2;
;
	ldx     #$00
	lda     #$02
	jmp     L06BF
;
; *++yyesp = yystate;
;
L0712:	lda     #$02
	clc
	adc     L06B8
	sta     L06B8
	bcc     L071C
	inc     L06B8+1
L071C:	ldx     L06B8+1
	sta     ptr1
	stx     ptr1+1
	lda     L06F9
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     L06F9+1
	sta     (ptr1),y
;
; }
;
	jmp     L06BA
;
; }
;
L06BF:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned long __near__ yystrlen (__near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yystrlen: near

.segment	"BSS"

L071F:
	.res	4,$00

.segment	"CODE"

;
; for (yylen = 0; yystr[yylen]; yylen++)
;
	lda     #$00
	sta     L071F
	sta     L071F+1
	sta     L071F+2
	sta     L071F+3
L0720:	lda     L071F
	clc
	ldy     #$00
	adc     (sp),y
	sta     ptr1
	lda     L071F+1
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	beq     L0721
	lda     L071F+3
	sta     sreg+1
	lda     L071F+2
	sta     sreg
	ldx     L071F+1
	lda     L071F
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	sta     L071F
	stx     L071F+1
	ldy     sreg
	sty     L071F+2
	ldy     sreg+1
	sty     L071F+3
	jsr     resteax
	jmp     L0720
;
; return yylen;
;
L0721:	lda     L071F+3
	sta     sreg+1
	lda     L071F+2
	sta     sreg
	ldx     L071F+1
	lda     L071F
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; __near__ unsigned char* __near__ yystpcpy (__near__ unsigned char*, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yystpcpy: near

.segment	"BSS"

L072B:
	.res	2,$00
L072D:
	.res	2,$00

.segment	"CODE"

;
; char *yyd = yydest;
;
	ldy     #$03
	jsr     ldaxysp
	sta     L072B
	stx     L072B+1
;
; const char *yys = yysrc;
;
	jsr     ldax0sp
	sta     L072D
	stx     L072D+1
;
; while ((*yyd++ = *yys++) != '\0')
;
L072F:	lda     L072B
	ldx     L072B+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L072B
	stx     L072B+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     L072D
	ldx     L072D+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L072D
	stx     L072D+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
	cmp     #$00
;
; continue;
;
	bne     L072F
;
; return yyd - 1;
;
	lda     L072B
	ldx     L072B+1
	jsr     decax1
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned long __near__ yytnamerr (__near__ unsigned char*, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yytnamerr: near

.segment	"BSS"

L0738:
	.res	4,$00
L073A:
	.res	2,$00

.segment	"CODE"

;
; if (*yystr == '"')
;
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$22
	jne     L073D
;
; long unsigned int yyn = 0;
;
	tya
	sta     L0738
	sta     L0738+1
	sta     L0738+2
	sta     L0738+3
;
; char const *yyp = yystr;
;
	jsr     ldax0sp
	sta     L073A
	stx     L073A+1
;
; switch (*++yyp)
;
L073F:	inc     L073A
	bne     L0741
	inc     L073A+1
L0741:	lda     L073A
	sta     ptr1
	lda     L073A+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
;
; }
;
	cmp     #$22
	jeq     L0756
	cmp     #$27
	jeq     L073D
	cmp     #$2C
	jeq     L073D
	cmp     #$5C
	bne     L074B
;
; if (*++yyp != '\\')
;
	inc     L073A
	bne     L074D
	inc     L073A+1
L074D:	lda     L073A
	sta     ptr1
	lda     L073A+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$5C
;
; goto do_not_strip_quotes;
;
	jne     L073D
;
; if (yyres)
;
L074B:	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L074F
;
; yyres[yyn] = *yyp;
;
	lda     L0738
	clc
	adc     (sp),y
	pha
	lda     L0738+1
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     L073A
	sta     ptr1
	lda     L073A+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; yyn++;
;
L074F:	lda     L0738+3
	sta     sreg+1
	lda     L0738+2
	sta     sreg
	ldx     L0738+1
	lda     L0738
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	sta     L0738
	stx     L0738+1
	ldy     sreg
	sty     L0738+2
	ldy     sreg+1
	sty     L0738+3
	jsr     resteax
;
; break;
;
	jmp     L073F
;
; if (yyres)
;
L0756:	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L0757
;
; yyres[yyn] = '\0';
;
	lda     L0738
	clc
	adc     (sp),y
	sta     ptr1
	lda     L0738+1
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; return yyn;
;
L0757:	lda     L0738+3
	sta     sreg+1
	lda     L0738+2
	sta     sreg
	ldx     L0738+1
	lda     L0738
	jmp     incsp4
;
; if (! yyres)
;
L073D:	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L075D
;
; return yystrlen (yystr);
;
	jsr     pushw0sp
	jsr     _yystrlen
	jmp     incsp4
;
; return yystpcpy (yyres, yystr) - yyres;
;
L075D:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	jsr     _yystpcpy
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tossubax
	jsr     axlong
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ yysyntax_error (__near__ unsigned long*, __near__ __near__ unsigned char**, __near__ signed short*, __near__ __near__ signed short**, __near__ unsigned long*, __near__ signed short*, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yysyntax_error: near

.segment	"BSS"

L0765:
	.res	4,$00
L076A:
	.res	4,$00
L076D:
	.res	2,$00
L0770:
	.res	10,$00
L0771:
	.res	2,$00
L0777:
	.res	2,$00
L0785:
	.res	2,$00
L0796:
	.res	2,$00
L07AF:
	.res	4,$00
L07D8:
	.res	4,$00
L07F2:
	.res	2,$00
L07F4:
	.res	2,$00

.segment	"CODE"

;
; long unsigned int yysize0 = yytnamerr (0, yytname[yytoken]);
;
	jsr     push0
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_yytname)
	tay
	txa
	adc     #>(_yytname)
	tax
	tya
	jsr     pushw
	jsr     _yytnamerr
	sta     L0765
	stx     L0765+1
	ldy     sreg
	sty     L0765+2
	ldy     sreg+1
	sty     L0765+3
;
; long unsigned int yysize = yysize0;
;
	lda     L0765+3
	sta     sreg+1
	lda     L0765+2
	sta     sreg
	ldx     L0765+1
	lda     L0765
	sta     L076A
	stx     L076A+1
	ldy     sreg
	sty     L076A+2
	ldy     sreg+1
	sty     L076A+3
;
; const char *yyformat = 0;
;
	lda     #$00
	sta     L076D
	sta     L076D+1
;
; int yycount = 0;
;
	sta     L0771
	sta     L0771+1
;
; if (yytoken != (-2))
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FF
	bne     L0CD6
	dey
	lda     (sp),y
	cmp     #$FE
	jeq     L0787
;
; int yyn = yypact[*yyssp];
;
L0CD6:	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	jsr     aslax1
	clc
	adc     #<(_yypact)
	tay
	txa
	adc     #>(_yypact)
	tax
	tya
	jsr     ldaxi
	sta     L0777
	stx     L0777+1
;
; yyarg[yycount++] = yytname[yytoken];
;
	lda     L0771
	ldx     L0771+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L0771
	stx     L0771+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(L0770)
	sta     sreg
	txa
	adc     #>(L0770)
	sta     sreg+1
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_yytname)
	tay
	txa
	adc     #>(_yytname)
	tax
	tya
	jsr     ldaxi
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (!(!!((yyn) == (-102))))
;
	lda     L0777
	ldx     L0777+1
	cpx     #$FF
	bne     L0784
	cmp     #$9A
L0784:	jsr     booleq
	jsr     bnega
	jsr     bnegax
	stx     tmp1
	ora     tmp1
	jne     L0787
;
; for (yyx = 0; yyx < 120; ++yyx)
;
	sta     L0785
	sta     L0785+1
L0786:	lda     L0785
	cmp     #$78
	lda     L0785+1
	sbc     #$00
	bvc     L078D
	eor     #$80
L078D:	jpl     L0787
;
; if (yyx != 1 && yyx != 2)
;
	lda     L0785+1
	bne     L0CD7
	lda     L0785
	cmp     #$01
	jeq     L0788
L0CD7:	lda     L0785+1
	bne     L0791
	lda     L0785
	cmp     #$02
	jeq     L0788
;
; int yy_lac_status = yy_lac (yyesa, yyes, yyes_capacity,
;
L0791:	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
;
; yyssp, yyx);
;
	ldy     #$0B
	jsr     pushwysp
	lda     L0785
	ldx     L0785+1
	jsr     pushax
	jsr     _yy_lac
	sta     L0796
	stx     L0796+1
;
; if (yy_lac_status == 2)
;
	cpx     #$00
	bne     L079D
	cmp     #$02
;
; return 2;
;
	jeq     L07F7
;
; if (yy_lac_status == 1)
;
L079D:	lda     L0796+1
	bne     L0CD8
	lda     L0796
	cmp     #$01
;
; continue;
;
	jeq     L0788
;
; if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
;
L0CD8:	lda     L0771+1
	bne     L07A4
	lda     L0771
	cmp     #$05
	bne     L07A4
;
; yycount = 1;
;
	ldx     #$00
	lda     #$01
	sta     L0771
	stx     L0771+1
;
; yysize = yysize0;
;
	lda     L0765+3
	sta     sreg+1
	lda     L0765+2
	sta     sreg
	ldx     L0765+1
	lda     L0765
	sta     L076A
	stx     L076A+1
	ldy     sreg
	sty     L076A+2
	ldy     sreg+1
	sty     L076A+3
;
; break;
;
	jmp     L0787
;
; yyarg[yycount++] = yytname[yyx];
;
L07A4:	lda     L0771
	ldx     L0771+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L0771
	stx     L0771+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(L0770)
	sta     sreg
	txa
	adc     #>(L0770)
	sta     sreg+1
	lda     L0785
	ldx     L0785+1
	jsr     aslax1
	clc
	adc     #<(_yytname)
	tay
	txa
	adc     #>(_yytname)
	tax
	tya
	jsr     ldaxi
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; long unsigned int yysize1 = yysize + yytnamerr (0, yytname[yyx]);
;
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     pusheax
	jsr     push0
	lda     L0785
	ldx     L0785+1
	jsr     aslax1
	clc
	adc     #<(_yytname)
	tay
	txa
	adc     #>(_yytname)
	tax
	tya
	jsr     pushw
	jsr     _yytnamerr
	jsr     tosaddeax
	sta     L07AF
	stx     L07AF+1
	ldy     sreg
	sty     L07AF+2
	ldy     sreg+1
	sty     L07AF+3
;
; if (! (yysize <= yysize1
;
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     pusheax
;
; && yysize1 <= ((long unsigned int) -1)))
;
	lda     L07AF+3
	sta     sreg+1
	lda     L07AF+2
	sta     sreg
	ldx     L07AF+1
	lda     L07AF
	jsr     tosuleeax
	beq     L07B7
	jsr     return1
	bne     L07B6
L07B7:	lda     #$00
	jmp     L07B9
L07B6:	lda     #$01
L07B9:	jsr     bnega
	beq     L07B4
;
; return 2;
;
	ldx     #$00
	lda     #$02
	jmp     L0764
;
; yysize = yysize1;
;
L07B4:	lda     L07AF+3
	sta     sreg+1
	lda     L07AF+2
	sta     sreg
	ldx     L07AF+1
	lda     L07AF
	sta     L076A
	stx     L076A+1
	ldy     sreg
	sty     L076A+2
	ldy     sreg+1
	sty     L076A+3
;
; for (yyx = 0; yyx < 120; ++yyx)
;
L0788:	inc     L0785
	jne     L0786
	inc     L0785+1
	jmp     L0786
;
; switch (yycount)
;
L0787:	lda     L0771
	ldx     L0771+1
;
; }
;
	cpx     #$00
	bne     L07BF
	cmp     #$00
	beq     L07C1
	cmp     #$01
	beq     L07C5
	cmp     #$02
	beq     L07C9
	cmp     #$03
	beq     L07CD
	cmp     #$04
	beq     L07D1
	cmp     #$05
	beq     L07D5
	jmp     L07BF
;
; case 0: yyformat = "syntax error"; break;
;
L07C1:	lda     #<(L0001+1180)
	sta     L076D
	lda     #>(L0001+1180)
	jmp     L0CD5
;
; case 1: yyformat = "syntax error, unexpected %s"; break;
;
L07C5:	lda     #<(L0001+1193)
	sta     L076D
	lda     #>(L0001+1193)
	jmp     L0CD5
;
; case 2: yyformat = "syntax error, unexpected %s, expecting %s"; break;
;
L07C9:	lda     #<(L0001+1221)
	sta     L076D
	lda     #>(L0001+1221)
	jmp     L0CD5
;
; case 3: yyformat = "syntax error, unexpected %s, expecting %s or %s"; break;
;
L07CD:	lda     #<(L0001+1263)
	sta     L076D
	lda     #>(L0001+1263)
	jmp     L0CD5
;
; case 4: yyformat = "syntax error, unexpected %s, expecting %s or %s or %s"; break;
;
L07D1:	lda     #<(L0001+1311)
	sta     L076D
	lda     #>(L0001+1311)
	jmp     L0CD5
;
; case 5: yyformat = "syntax error, unexpected %s, expecting %s or %s or %s or %s"; break;
;
L07D5:	lda     #<(L0001+1365)
	sta     L076D
	lda     #>(L0001+1365)
L0CD5:	sta     L076D+1
;
; long unsigned int yysize1 = yysize + yystrlen (yyformat);
;
L07BF:	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     pusheax
	lda     L076D
	ldx     L076D+1
	jsr     pushax
	jsr     _yystrlen
	jsr     tosaddeax
	sta     L07D8
	stx     L07D8+1
	ldy     sreg
	sty     L07D8+2
	ldy     sreg+1
	sty     L07D8+3
;
; if (! (yysize <= yysize1 && yysize1 <= ((long unsigned int) -1)))
;
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     pusheax
	lda     L07D8+3
	sta     sreg+1
	lda     L07D8+2
	sta     sreg
	ldx     L07D8+1
	lda     L07D8
	jsr     tosuleeax
	beq     L07DE
	jsr     return1
	bne     L07DD
L07DE:	lda     #$00
	jmp     L07E0
L07DD:	lda     #$01
L07E0:	jsr     bnega
	beq     L07DB
;
; return 2;
;
	ldx     #$00
	lda     #$02
	jmp     L0764
;
; yysize = yysize1;
;
L07DB:	lda     L07D8+3
	sta     sreg+1
	lda     L07D8+2
	sta     sreg
	ldx     L07D8+1
	lda     L07D8
	sta     L076A
	stx     L076A+1
	ldy     sreg
	sty     L076A+2
	ldy     sreg+1
	sty     L076A+3
;
; if (*yymsg_alloc < yysize)
;
	ldy     #$0D
	jsr     ldaxysp
	jsr     ldeaxi
	jsr     pusheax
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     tosulteax
	beq     L07E4
;
; *yymsg_alloc = 2 * yysize;
;
	ldy     #$0F
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     toslong
	jsr     tosumuleax
	ldy     #$00
	jsr     steaxspidx
;
; if (! (yysize <= *yymsg_alloc
;
	lda     L076A+3
	sta     sreg+1
	lda     L076A+2
	sta     sreg
	ldx     L076A+1
	lda     L076A
	jsr     pusheax
;
; && *yymsg_alloc <= ((long unsigned int) -1)))
;
	ldy     #$11
	jsr     ldaxysp
	jsr     ldeaxi
	jsr     tosuleeax
	beq     L07EB
	ldy     #$0D
	jsr     ldaxysp
	jsr     ldeaxi
	jsr     return1
	bne     L07EA
L07EB:	lda     #$00
	jmp     L07ED
L07EA:	lda     #$01
L07ED:	jsr     bnega
	beq     L07E8
;
; *yymsg_alloc = ((long unsigned int) -1);
;
	ldy     #$0F
	jsr     pushwysp
	ldx     #$FF
	stx     sreg
	stx     sreg+1
	txa
	ldy     #$00
	jsr     steaxspidx
;
; return 1;
;
L07E8:	ldx     #$00
	lda     #$01
	jmp     L0764
;
; char *yyp = *yymsg;
;
L07E4:	ldy     #$0B
	jsr     ldaxysp
	jsr     ldaxi
	sta     L07F2
	stx     L07F2+1
;
; int yyi = 0;
;
	lda     #$00
	sta     L07F4
	sta     L07F4+1
;
; while ((*yyp = *yyformat) != '\0')
;
L07F6:	lda     L07F2
	ldx     L07F2+1
	jsr     pushax
	lda     L076D
	sta     ptr1
	lda     L076D+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	cmp     #$00
	jeq     L07F7
;
; if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
;
	lda     L07F2
	sta     ptr1
	lda     L07F2+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$25
	bne     L07FB
	lda     L076D
	sta     ptr1
	lda     L076D+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	cmp     #$53
	bne     L07FB
	lda     L07F4
	cmp     L0771
	lda     L07F4+1
	sbc     L0771+1
	bvc     L0CD4
	eor     #$80
L0CD4:	bpl     L07FB
;
; yyp += yytnamerr (yyp, yyarg[yyi++]);
;
	lda     L07F2
	ldx     L07F2+1
	jsr     pushax
	lda     L07F4
	ldx     L07F4+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     L07F4
	stx     L07F4+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(L0770)
	tay
	txa
	adc     #>(L0770)
	tax
	tya
	jsr     pushw
	jsr     _yytnamerr
	clc
	adc     L07F2
	sta     L07F2
	txa
	adc     L07F2+1
	sta     L07F2+1
;
; yyformat += 2;
;
	lda     #$02
	clc
	adc     L076D
	sta     L076D
	jcc     L07F6
	inc     L076D+1
;
; else
;
	jmp     L07F6
;
; yyp++;
;
L07FB:	lda     L07F2
	ldx     L07F2+1
	jsr     incax1
	sta     L07F2
	stx     L07F2+1
;
; yyformat++;
;
	lda     L076D
	ldx     L076D+1
	jsr     incax1
	sta     L076D
	stx     L076D+1
;
; }
;
	jmp     L07F6
;
; return 0;
;
L07F7:	ldx     #$00
;
; }
;
L0764:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ yydestruct (__near__ const unsigned char*, int, __near__ union YYSTYPE*, __near__ struct qryData*, __near__ void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_yydestruct: near

.segment	"CODE"

;
; if (!yymsg)
;
	ldy     #$09
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0816
;
; yymsg = "Deleting";
;
	lda     #<(L0001+1425)
	ldx     #>(L0001+1425)
	jsr     staxysp
;
; }
;
L0816:	ldy     #$0A
	jmp     addysp

.endproc

