#include "querycsv.h"

extern long codepoints[18];
extern struct hash2Entry entry;
extern struct hash2Entry* retval;
extern int i;

/*unicode normalization mapping table*/
  #define HASH2SIZE 72

  static const long
hash2_1[] = {0x0020},  /* NO-BREAK SPACE */ 
hash2_2[] = {0x0020, 0x0308},  /* DIAERESIS */ 
hash2_3[] = {0x0061},  /* FEMININE ORDINAL INDICATOR */ 
hash2_4[] = {0x0020, 0x0304},  /* MACRON */ 
hash2_5[] = {0x0032},  /* SUPERSCRIPT TWO */ 
hash2_6[] = {0x0033},  /* SUPERSCRIPT THREE */ 
hash2_7[] = {0x0020, 0x0301},  /* ACUTE ACCENT */ 
hash2_8[] = {0x03BC},  /* MICRO SIGN */ 
hash2_9[] = {0x0020, 0x0327},  /* CEDILLA */ 
hash2_10[] = {0x0031},  /* SUPERSCRIPT ONE */ 
hash2_11[] = {0x006F},  /* MASCULINE ORDINAL INDICATOR */ 
hash2_12[] = {0x0031, 0x2044, 0x0034},  /* VULGAR FRACTION ONE QUARTER */ 
hash2_13[] = {0x0031, 0x2044, 0x0032},  /* VULGAR FRACTION ONE HALF */ 
hash2_14[] = {0x0033, 0x2044, 0x0034},  /* VULGAR FRACTION THREE QUARTERS */ 
hash2_15[] = {0x0041, 0x0300},  /* LATIN CAPITAL LETTER A WITH GRAVE */ 
hash2_16[] = {0x0041, 0x0301},  /* LATIN CAPITAL LETTER A WITH ACUTE */ 
hash2_17[] = {0x0041, 0x0302},  /* LATIN CAPITAL LETTER A WITH CIRCUMFLEX */ 
hash2_18[] = {0x0041, 0x0303},  /* LATIN CAPITAL LETTER A WITH TILDE */ 
hash2_19[] = {0x0041, 0x0308},  /* LATIN CAPITAL LETTER A WITH DIAERESIS */ 
hash2_20[] = {0x0041, 0x030A},  /* LATIN CAPITAL LETTER A WITH RING ABOVE */ 
hash2_21[] = {0x0041, 0x0045},  /* Æ */ 
hash2_22[] = {0x0043, 0x0327},  /* LATIN CAPITAL LETTER C WITH CEDILLA */ 
hash2_23[] = {0x0045, 0x0300},  /* LATIN CAPITAL LETTER E WITH GRAVE */ 
hash2_24[] = {0x0045, 0x0301},  /* LATIN CAPITAL LETTER E WITH ACUTE */ 
hash2_25[] = {0x0045, 0x0302},  /* LATIN CAPITAL LETTER E WITH CIRCUMFLEX */ 
hash2_26[] = {0x0045, 0x0308},  /* LATIN CAPITAL LETTER E WITH DIAERESIS */ 
hash2_27[] = {0x0049, 0x0300},  /* LATIN CAPITAL LETTER I WITH GRAVE */ 
hash2_28[] = {0x0049, 0x0301},  /* LATIN CAPITAL LETTER I WITH ACUTE */ 
hash2_29[] = {0x0049, 0x0302},  /* LATIN CAPITAL LETTER I WITH CIRCUMFLEX */ 
hash2_30[] = {0x0049, 0x0308},  /* LATIN CAPITAL LETTER I WITH DIAERESIS */ 
hash2_31[] = {0x004E, 0x0303},  /* LATIN CAPITAL LETTER N WITH TILDE */ 
hash2_32[] = {0x004F, 0x0300},  /* LATIN CAPITAL LETTER O WITH GRAVE */ 
hash2_33[] = {0x004F, 0x0301},  /* LATIN CAPITAL LETTER O WITH ACUTE */ 
hash2_34[] = {0x004F, 0x0302},  /* LATIN CAPITAL LETTER O WITH CIRCUMFLEX */ 
hash2_35[] = {0x004F, 0x0303},  /* LATIN CAPITAL LETTER O WITH TILDE */ 
hash2_36[] = {0x004F, 0x0308},  /* LATIN CAPITAL LETTER O WITH DIAERESIS */ 
hash2_37[] = {0x004F, 0x0337},  /* Ø */ 
hash2_38[] = {0x0055, 0x0300},  /* LATIN CAPITAL LETTER U WITH GRAVE */ 
hash2_39[] = {0x0055, 0x0301},  /* LATIN CAPITAL LETTER U WITH ACUTE */ 
hash2_40[] = {0x0055, 0x0302},  /* LATIN CAPITAL LETTER U WITH CIRCUMFLEX */ 
hash2_41[] = {0x0055, 0x0308},  /* LATIN CAPITAL LETTER U WITH DIAERESIS */ 
hash2_42[] = {0x0059, 0x0301},  /* LATIN CAPITAL LETTER Y WITH ACUTE */ 
hash2_43[] = {0x0073, 0x007A},  /* ß */ 
hash2_44[] = {0x0061, 0x0300},  /* LATIN SMALL LETTER A WITH GRAVE */ 
hash2_45[] = {0x0061, 0x0301},  /* LATIN SMALL LETTER A WITH ACUTE */ 
hash2_46[] = {0x0061, 0x0302},  /* LATIN SMALL LETTER A WITH CIRCUMFLEX */ 
hash2_47[] = {0x0061, 0x0303},  /* LATIN SMALL LETTER A WITH TILDE */ 
hash2_48[] = {0x0061, 0x0308},  /* LATIN SMALL LETTER A WITH DIAERESIS */ 
hash2_49[] = {0x0061, 0x030A},  /* LATIN SMALL LETTER A WITH RING ABOVE */ 
hash2_50[] = {0x0061, 0x0065},  /* æ */ 
hash2_51[] = {0x0063, 0x0327},  /* LATIN SMALL LETTER C WITH CEDILLA */ 
hash2_52[] = {0x0065, 0x0300},  /* LATIN SMALL LETTER E WITH GRAVE */ 
hash2_53[] = {0x0065, 0x0301},  /* LATIN SMALL LETTER E WITH ACUTE */ 
hash2_54[] = {0x0065, 0x0302},  /* LATIN SMALL LETTER E WITH CIRCUMFLEX */ 
hash2_55[] = {0x0065, 0x0308},  /* LATIN SMALL LETTER E WITH DIAERESIS */ 
hash2_56[] = {0x0069, 0x0300},  /* LATIN SMALL LETTER I WITH GRAVE */ 
hash2_57[] = {0x0069, 0x0301},  /* LATIN SMALL LETTER I WITH ACUTE */ 
hash2_58[] = {0x0069, 0x0302},  /* LATIN SMALL LETTER I WITH CIRCUMFLEX */ 
hash2_59[] = {0x0069, 0x0308},  /* LATIN SMALL LETTER I WITH DIAERESIS */ 
hash2_60[] = {0x006E, 0x0303},  /* LATIN SMALL LETTER N WITH TILDE */ 
hash2_61[] = {0x006F, 0x0300},  /* LATIN SMALL LETTER O WITH GRAVE */ 
hash2_62[] = {0x006F, 0x0301},  /* LATIN SMALL LETTER O WITH ACUTE */ 
hash2_63[] = {0x006F, 0x0302},  /* LATIN SMALL LETTER O WITH CIRCUMFLEX */ 
hash2_64[] = {0x006F, 0x0303},  /* LATIN SMALL LETTER O WITH TILDE */ 
hash2_65[] = {0x006F, 0x0308},  /* LATIN SMALL LETTER O WITH DIAERESIS */ 
hash2_66[] = {0x006F, 0x0337},  /* ø */ 
hash2_67[] = {0x0075, 0x0300},  /* LATIN SMALL LETTER U WITH GRAVE */ 
hash2_68[] = {0x0075, 0x0301},  /* LATIN SMALL LETTER U WITH ACUTE */ 
hash2_69[] = {0x0075, 0x0302},  /* LATIN SMALL LETTER U WITH CIRCUMFLEX */ 
hash2_70[] = {0x0075, 0x0308},  /* LATIN SMALL LETTER U WITH DIAERESIS */ 
hash2_71[] = {0x0079, 0x0301},  /* LATIN SMALL LETTER Y WITH ACUTE */ 
hash2_72[] = {0x0079, 0x0308};  /* LATIN SMALL LETTER Y WITH DIAERESIS */ 

static const struct hash2Entry hash2[HASH2SIZE] = {
{0x00A0, 1, hash2_1},  /*NO-BREAK SPACE*/
{0x00A8, 2, hash2_2},  /*DIAERESIS*/
{0x00AA, 1, hash2_3},  /*FEMININE ORDINAL INDICATOR*/
{0x00AF, 2, hash2_4},  /*MACRON*/
{0x00B2, 1, hash2_5},  /*SUPERSCRIPT TWO*/
{0x00B3, 1, hash2_6},  /*SUPERSCRIPT THREE*/
{0x00B4, 2, hash2_7},  /*ACUTE ACCENT*/
{0x00B5, 1, hash2_8},  /*MICRO SIGN*/
{0x00B8, 2, hash2_9},  /*CEDILLA*/
{0x00B9, 1, hash2_10},  /*SUPERSCRIPT ONE*/
{0x00BA, 1, hash2_11},  /*MASCULINE ORDINAL INDICATOR*/
{0x00BC, 3, hash2_12},  /*VULGAR FRACTION ONE QUARTER*/
{0x00BD, 3, hash2_13},  /*VULGAR FRACTION ONE HALF*/
{0x00BE, 3, hash2_14},  /*VULGAR FRACTION THREE QUARTERS*/
{0x00C0, 2, hash2_15},  /*LATIN CAPITAL LETTER A WITH GRAVE*/
{0x00C1, 2, hash2_16},  /*LATIN CAPITAL LETTER A WITH ACUTE*/
{0x00C2, 2, hash2_17},  /*LATIN CAPITAL LETTER A WITH CIRCUMFLEX*/
{0x00C3, 2, hash2_18},  /*LATIN CAPITAL LETTER A WITH TILDE*/
{0x00C4, 2, hash2_19},  /*LATIN CAPITAL LETTER A WITH DIAERESIS*/
{0x00C5, 2, hash2_20},  /*LATIN CAPITAL LETTER A WITH RING ABOVE*/
{0x00C6, 2, hash2_21},  /*Æ*/
{0x00C7, 2, hash2_22},  /*LATIN CAPITAL LETTER C WITH CEDILLA*/
{0x00C8, 2, hash2_23},  /*LATIN CAPITAL LETTER E WITH GRAVE*/
{0x00C9, 2, hash2_24},  /*LATIN CAPITAL LETTER E WITH ACUTE*/
{0x00CA, 2, hash2_25},  /*LATIN CAPITAL LETTER E WITH CIRCUMFLEX*/
{0x00CB, 2, hash2_26},  /*LATIN CAPITAL LETTER E WITH DIAERESIS*/
{0x00CC, 2, hash2_27},  /*LATIN CAPITAL LETTER I WITH GRAVE*/
{0x00CD, 2, hash2_28},  /*LATIN CAPITAL LETTER I WITH ACUTE*/
{0x00CE, 2, hash2_29},  /*LATIN CAPITAL LETTER I WITH CIRCUMFLEX*/
{0x00CF, 2, hash2_30},  /*LATIN CAPITAL LETTER I WITH DIAERESIS*/
{0x00D1, 2, hash2_31},  /*LATIN CAPITAL LETTER N WITH TILDE*/
{0x00D2, 2, hash2_32},  /*LATIN CAPITAL LETTER O WITH GRAVE*/
{0x00D3, 2, hash2_33},  /*LATIN CAPITAL LETTER O WITH ACUTE*/
{0x00D4, 2, hash2_34},  /*LATIN CAPITAL LETTER O WITH CIRCUMFLEX*/
{0x00D5, 2, hash2_35},  /*LATIN CAPITAL LETTER O WITH TILDE*/
{0x00D6, 2, hash2_36},  /*LATIN CAPITAL LETTER O WITH DIAERESIS*/
{0x00D8, 2, hash2_37},  /*Ø*/
{0x00D9, 2, hash2_38},  /*LATIN CAPITAL LETTER U WITH GRAVE*/
{0x00DA, 2, hash2_39},  /*LATIN CAPITAL LETTER U WITH ACUTE*/
{0x00DB, 2, hash2_40},  /*LATIN CAPITAL LETTER U WITH CIRCUMFLEX*/
{0x00DC, 2, hash2_41},  /*LATIN CAPITAL LETTER U WITH DIAERESIS*/
{0x00DD, 2, hash2_42},  /*LATIN CAPITAL LETTER Y WITH ACUTE*/
{0x00DF, 2, hash2_43},  /*ß*/
{0x00E0, 2, hash2_44},  /*LATIN SMALL LETTER A WITH GRAVE*/
{0x00E1, 2, hash2_45},  /*LATIN SMALL LETTER A WITH ACUTE*/
{0x00E2, 2, hash2_46},  /*LATIN SMALL LETTER A WITH CIRCUMFLEX*/
{0x00E3, 2, hash2_47},  /*LATIN SMALL LETTER A WITH TILDE*/
{0x00E4, 2, hash2_48},  /*LATIN SMALL LETTER A WITH DIAERESIS*/
{0x00E5, 2, hash2_49},  /*LATIN SMALL LETTER A WITH RING ABOVE*/
{0x00E6, 2, hash2_50},  /*æ*/
{0x00E7, 2, hash2_51},  /*LATIN SMALL LETTER C WITH CEDILLA*/
{0x00E8, 2, hash2_52},  /*LATIN SMALL LETTER E WITH GRAVE*/
{0x00E9, 2, hash2_53},  /*LATIN SMALL LETTER E WITH ACUTE*/
{0x00EA, 2, hash2_54},  /*LATIN SMALL LETTER E WITH CIRCUMFLEX*/
{0x00EB, 2, hash2_55},  /*LATIN SMALL LETTER E WITH DIAERESIS*/
{0x00EC, 2, hash2_56},  /*LATIN SMALL LETTER I WITH GRAVE*/
{0x00ED, 2, hash2_57},  /*LATIN SMALL LETTER I WITH ACUTE*/
{0x00EE, 2, hash2_58},  /*LATIN SMALL LETTER I WITH CIRCUMFLEX*/
{0x00EF, 2, hash2_59},  /*LATIN SMALL LETTER I WITH DIAERESIS*/
{0x00F1, 2, hash2_60},  /*LATIN SMALL LETTER N WITH TILDE*/
{0x00F2, 2, hash2_61},  /*LATIN SMALL LETTER O WITH GRAVE*/
{0x00F3, 2, hash2_62},  /*LATIN SMALL LETTER O WITH ACUTE*/
{0x00F4, 2, hash2_63},  /*LATIN SMALL LETTER O WITH CIRCUMFLEX*/
{0x00F5, 2, hash2_64},  /*LATIN SMALL LETTER O WITH TILDE*/
{0x00F6, 2, hash2_65},  /*LATIN SMALL LETTER O WITH DIAERESIS*/
{0x00F8, 2, hash2_66},  /*ø*/
{0x00F9, 2, hash2_67},  /*LATIN SMALL LETTER U WITH GRAVE*/
{0x00FA, 2, hash2_68},  /*LATIN SMALL LETTER U WITH ACUTE*/
{0x00FB, 2, hash2_69},  /*LATIN SMALL LETTER U WITH CIRCUMFLEX*/
{0x00FC, 2, hash2_70},  /*LATIN SMALL LETTER U WITH DIAERESIS*/
{0x00FD, 2, hash2_71},  /*LATIN SMALL LETTER Y WITH ACUTE*/
{0x00FF, 2, hash2_72},  /*LATIN SMALL LETTER Y WITH DIAERESIS*/
};

int longCompare_0(const void *a, const void *b) {
  return (*((long*)a) < *((long*)b)) ? -1 : (*((long*)a) != *((long*)b) ? 1 : 0);
}

void isInHash2_0(void) {
  if((retval = (struct hash2Entry*)bsearch(
      (const void*)&(entry.codepoint),
      (const void*)&hash2,
      HASH2SIZE,
      sizeof(struct hash2Entry),
      &longCompare_0
    )) != NULL) {
    entry.length = retval->length;
    
    for(i = 0; i < entry.length; i++) {
      codepoints[i] = retval->codepoints[i];
    }

    retval = &entry;
  }
}
